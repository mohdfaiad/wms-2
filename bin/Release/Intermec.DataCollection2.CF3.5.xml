<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intermec.DataCollection2.CF3.5</name>
    </assembly>
    <members>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions">
            <summary>
            Use this class to set preamble, postamble, and global symbology ID options, 
            or to enable multicodes for bar code symbologies. For more information on 
            symbology attributes and how they apply to your Intermec computer, see the 
            Intermec Settings Command Reference Manual.
            </summary>
            <remarks> 
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should be 
            used only within a single thread.
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.Multicode">
            <summary>
            An object for set Multicode options. 
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.CSymbologyOptions.#ctor(System.Int32)">
            <summary>
            Constructor that create an instance of the SymbologyOptions class. 
            When you create an instance of the <see cref="T:Intermec.DataCollection2.BarcodeReader"/> class,
            you also create an instance of the SymbologyOptions class. 
            </summary>
            <param name="bcHandle">A handle that passed by BarcodeReader class.</param>        
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.SymbologyIdentifier">
            <summary>
            Sets and gets the global symbology ID option.
            </summary>
            <remarks>
            Support for this property depends on the hardware and firmware in your 
            Intermec computer. To determine whether or not your computer supports 
            this option, check the Intermec Settings application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.symbologyOptions.SymbologyIdentifier = SymbologyOptions.ESymbologyIdentifier.UserDefined;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.symbologyOptions.SymbologyIdentifier = SymbologyOptions.ESymbologyIdentifier.UserDefined
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub             
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.Preamble">
            <summary>
            Sets or gets the character string (up to 20 characters) that is prepended to scanned data.
            </summary>
            <remarks>
            <para>For example, if the preamble is set to "Martin," then a data string such as "305481" 
            is returned as "Martin305481".
            </para>
            <para>
            Support for this property depends on the hardware and firmware in your Intermec computer. 
            To determine whether or not your computer supports this option, check the Intermec Settings 
            application on the computer.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.symbologyOptions.Preamble = "Martin";
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.symbologyOptions.Preamble = "Martin"
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub             
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.Postamble">
            <summary>
            Sets or gets the character string (up to 20 characters) that is appended to scanned data.
            </summary>
            <remarks>
            <para>
            For example, if the postamble is set to "PartNumber," then a data string such as 
            "305481" is returned as "305481PartNumber."
            </para>
            <para>
            Support for this property depends on the hardware and firmware in your Intermec computer. 
            To determine whether or not your computer supports this option, check the Intermec 
            Settings application on the computer.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.symbologyOptions.Postamble = "PartNumber";
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.symbologyOptions.Postamble = "PartNumber"
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub             
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.SymbologyType">
            <summary> An enum data type for all symbologies that support multicode. </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.All">
            <summary>Any bar code.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean13">
            <summary>EAN-13</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean8">
            <summary> EAN-8</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Upca">
            <summary> UPC-A</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Upce">
            <summary> UPC-E</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean13AddOn2">
            <summary> EAN-13 with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean8AddOn2">
            <summary> EAN-8 with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpcaAddOn2">
            <summary> UPC-A with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpceAddOn2">
            <summary> UPC-E with Add-On 2</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean13AddOn5">
            <summary> EAN-13 with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean8AddOn5">
            <summary> EAN-8 with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpcaAddOn5">
            <summary> UPC-A with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpceAddOn5">
            <summary> UPC-E with Add-On 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Code39">
            <summary> Code 39</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Interleaved2Of5">
            <summary> Interleaved 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Standard2Of5">
            <summary> Code 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Matrix2Of5">
            <summary> Matrix 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Codabar">
            <summary> Codabar </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Msi">
            <summary> MSI </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Plessey">
            <summary> Plessey </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Code128">
            <summary> Code 128 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Code93">
            <summary> Code 93 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Code11">
            <summary> Code 11 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Telepen">
            <summary> Telepen </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.CodablockA">
            <summary> Codablock A </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.CodablockF">
            <summary> Codablock F </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Pdf417">
            <summary> PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1For128">
            <summary> GS1-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Isbt128">
            <summary> ISBT-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.MicroPdf">
            <summary> Micro PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarOmniDirectional">
            <summary> GS1 DataBar Omni-Directional </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarLimited">
            <summary> GS1 DataBar Limited </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarExpanded">
            <summary> GS1 DataBar Expanded </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.DataMatrix">
            <summary> DataMatrix </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.QrCode">
            <summary> QR Code </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Maxicode">
            <summary> Maxicode </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarOmniDirectionalCompositeCcA">
            <summary> GS1 DataBar Omni-Directional Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarLimitedCompositeCcA">
            <summary> GS1 DataBar Limited Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarExpandedCompositeCcA">
            <summary> GS1 DataBar Expanded Composite (CC-A) </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1Composite128CompositeCcA">
            <summary> GS1 Composite/GS1-128 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean13CompositeCcA">
            <summary> EAN-13 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean8CompositeCcA">
            <summary> EAN-8 Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpcaCompositeCcA">
            <summary> UPC-A Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpceCompositeCcA">
            <summary> UPC-E Composite (CC-A)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarOmniDirectionalCompositeCcB">
            <summary> GS1 DataBar Omni-Directional Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarLimitedCompositeCcB">
            <summary> GS1 DataBar Limited Composite (CC-B) </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1DatabarExpandedCompositeCcB">
            <summary> GS1 DataBar Expanded Composite (CC-B) </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1For128CompositeCcB">
            <summary> GS1 Composite/GS1-128 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean13CompositeCcB">
            <summary> EAN-13 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ean8CompositeCcB">
            <summary> EAN-8 Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpcaComposteCcB">
            <summary> UPC-A Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.UpceCompositeCcB">
            <summary> UPC-E Composite (CC-B)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Gs1For128ComposteCcC">
            <summary> GS1 Composite/GS1-128 Composite (CC-C)</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Isbn">
            <summary> ISBN</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Postnet">
            <summary> Postnet</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Planet">
            <summary> Planet</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Bpo">
            <summary> BPO</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.CanadaPost">
            <summary> Canada Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.AustralianPost">
            <summary> Australian Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.JapanPost">
            <summary> Japan Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.DutchPost">
            <summary> Dutch Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.ChinaPost">
            <summary> China Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.KoreanPost">
            <summary> Korean Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Tlc39">
            <summary> TLC39</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Trioptic">
            <summary> Trioptic</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Ismn">
            <summary> ISMN</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Issn">
            <summary> ISSN</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Aztec">
            <summary> Aztec</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.SwedenPost">
            <summary> Sweden Post</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.SymbologyType.Infomail">
            <summary> Infomail</summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.ESymbologyIdentifier">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbologyOptions.SymbologyIdentifier"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.ESymbologyIdentifier.Disable">
            <summary>
            Disables symbology ID.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.ESymbologyIdentifier.CodeMark">
            <summary>
            Use the code mark specified for the symbology.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.ESymbologyIdentifier.AIMFormat">
            <summary>
            AIM ISO/IEC standard for the symbology in use.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.ESymbologyIdentifier.UserDefined">
            <summary>
            String of 1 to 4 characters specifying the symbology ID.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode">
            <summary>
            Multicode class that sets the multicode options.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual. 
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not 
            supported on EV12. 
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode1">
            <summary>
            An object for bar code 1 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode2">
            <summary>
            An object for bar code 2 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode3">
            <summary>
            An object for bar code 3 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode4">
            <summary>
            An object for bar code 4 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode5">
            <summary>
            An object for bar code 5 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode6">
            <summary>
            An object for bar code 6 when Multicode is enabled.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode7">
            <summary>
            An object for bar code 7 when Multicode is enabled
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.Barcode8">
            <summary>
            An object for bar code 8 when Multicode is enabled.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EnableMulticode">
            <summary>
            Sets and gets the multicode status.
            </summary>
            <remarks>
             Support for this property depends on the hardware and firmware in your Intermec computer. 
             To determine whether or not your computer supports this option, check the Intermec Settings 
             application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.EnableMulticode = SymbologyOptions.CMulticode.EEnableMulticode.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.EnableMulticode = SymbologyOptions.CMulticode.EEnableMulticode.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.NumberOfBarcodes">
            <summary>
            Sets and gets the number of bar codes in a multicode.
            </summary>
            <remarks>
             Support for this property depends on the hardware and firmware in your Intermec computer. 
             To determine whether or not your computer supports this option, check the Intermec Settings 
             application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.NumberOfBarcodes = 2;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.NumberOfBarcodes = 2
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.IncompleteTransmission">
            <summary>
            Sets and gets incomplete transmission status. When enabled, the UDSI for an 
            incomplete multicode is transmitted after a timeout.
            </summary>
            <remarks>
             Support for this property depends on the hardware and firmware in your Intermec computer. 
             To determine whether or not your computer supports this option, check the Intermec Settings 
             application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.IncompleteTransmission = SymbologyOptions.CMulticode.EIncompleteTransmission.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.IncompleteTransmission = SymbologyOptions.CMulticode.EIncompleteTransmission.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CodeMark">
            <summary>
            Compose a one character code mark symbology identifier for a complete multicode. 
            The code mark is transmitted as follows:[code mark symbology id] &lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0. 
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.IncompleteTransmissionTimeout">
            <summary>
            Sets and gets the incomplete transmission timeout (in ms). 
            When incomplete transmission status is enabled, the incomplete 
            multicode UDSI is sent after this timeout. The timeout starts 
            after the last bar code is read.
            </summary>
            <value>
            Range is 0 to 65535 ms.
            </value>
            <remarks>
             Support for this property depends on the hardware and firmware in your Intermec computer. 
             To determine whether or not your computer supports this option, check the Intermec Settings 
             application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.IncompleteTransmissionTimeout = 2;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.IncompleteTransmissionTimeout = 2
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CompleteMulticode">
            <summary>
            Sets and gets a user-defined symbology identifier (UDSI, from 0 to 4 characters) 
            for a complete multicode. The UDSI is transmitted as "[UDSI symbology id]&lt;data&gt;".
            </summary>
            <remarks>
            <para>
            Support for this property depends on the hardware and firmware in your Intermec 
            computer. To determine whether or not your computer supports this option, check 
            the Intermec Settings application on the computer.
            </para>
            <para>
            If there are no characters specified for CompleteMulticode, and symbology ID 
            transmission is active, no symbology ID is sent (for this symbology only).
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.CompleteMulticode = "UDM0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.CompleteMulticode = "UDM0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.IncompleteMulticode">
            <summary>
            Sets and gets a user-defined symbology identifier (UDSI, from 0 to 4 characters) 
            for an incomplete multicode. The UDSI is transmitted as "[UDSI symbology id]&lt;data&gt;".
            </summary>
            <remarks>
            <para>
            Support for this property depends on the hardware and firmware in your Intermec computer. 
            To determine whether or not your computer supports this option, check the Intermec 
            Settings application on the computer.
            </para>
            <para>
            If there are no characters specified for IncompleteMulticode, and symbology ID 
            transmission is active, no symbology ID is sent (for this symbology only).
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.IncompleteMulticode = "UDM1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.IncompleteMulticode = "UDM1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.BarcodeSeparator">
            <summary>
            Sets and gets the character string (up to 4 characters) used as a separator 
            between each bar code if <see cref="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EnableMulticode"/> is enabled.
            </summary>
            <remarks>
            Support for this property depends on the hardware and firmware in your 
            Intermec computer. To determine whether or not your computer supports 
            this option, check the Intermec Settings application on the computer.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.SymbologyOptions.Multicode.BarcodeSeparator = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.SymbologyOptions.Multicode.BarcodeSeparator = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EEnableMulticode">
            <summary>
            An enum data type for the EnableMulticode property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EEnableMulticode.Disable">
            <summary>
            Read and send bar code as normal.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EEnableMulticode.Enable">
            <summary>
            Check each bar code to see if it is part of a multicode. If not, 
            the bar code is read and sent as normal.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EEnableMulticode.Exclusive">
            <summary>
            Discard any bar code that is not part of a multicode.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EIncompleteTransmission">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.IncompleteTransmission"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EIncompleteTransmission.Disable">
            <summary>
            Disable transmission of an incomplete multicode.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbologyOptions.CMulticode.EIncompleteTransmission.Enable">
            <summary>
            Enable transmission of an incomplete multicode. The incomplete multicode UDSI 
            is transmitted after the timeout expires.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode1">
            <summary>
            Sets length, mask, and symbology type for the first bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode1.Symbology">
            <summary>
            Sets and gets the symbology type for the first bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All;
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode1.Length">
            <summary>
            Sets and gets the length of bar code 1 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode1.Length = 25;
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode1.Length = 25
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode1.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the first bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode1.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode1.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode1.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode1.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode1.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode2">
            <summary>
            Sets length, mask, and symbology type for the second bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode2.Symbology">
            <summary>
            Sets and gets the symbology type for the second bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode2.Length">
            <summary>
            Sets and gets the length of bar code 2 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode2.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the second bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode2.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode2.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode2.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode3">
            <summary>
            Sets length, mask, and symbology type for the third bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode3.Symbology">
            <summary>
            Sets and gets the symbology type for the third bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode3.Length">
            <summary>
            Sets and gets the length of bar code 3 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>  
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode3.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the third bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode3.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode3.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode3.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode4">
            <summary>
            Sets length, mask, and symbology type for the fourth bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode4.Symbology">
            <summary>
            Sets and gets the symbology type for the fourth bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode4.Length">
            <summary>
            Sets and gets the length of bar code 4 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode4.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the fourth bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode4.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode4.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode4.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode5">
            <summary>
            Sets length, mask, and symbology type for the fifth bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode5.Symbology">
            <summary>
            Sets and gets the symbology type for the fifth bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode5.Length">
            <summary>
            Sets and gets the length of bar code 5 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode5.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the fifth bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode5.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode5.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode5.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode6">
            <summary>
            Sets length, mask, and symbology type for the sixth bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode6.Symbology">
            <summary>
            Sets and gets the symbology type for the sixth bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode6.Length">
            <summary>
            Sets and gets the length of bar code 6 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode6.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the sixth bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode6.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode6.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode6.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode7">
            <summary>
            Sets length, mask, and symbology type for the seventh bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode7.Symbology">
            <summary>
            Sets and gets the symbology type for the seventh bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode7.Length">
            <summary>
            Sets and gets the length of bar code 7 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode7.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the seventh bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode7.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode7.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode7.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode8">
            <summary>
            Sets length, mask, and symbology type for the eighth bar code in a multicode symbology.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode8.Symbology">
            <summary>
            Sets and gets the symbology type for the eighth bar code in a multicode symbology.
            </summary>
            <remarks>
            Bar codes in a multicode symbology are sent in order of bar code ID (bar code 1, 
            bar code 2, and so on). If no bar code ID is used and the multicode function is 
            applied to all bar codes, the bar codes are sent in the order read.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode8.Length">
            <summary>
            Sets and gets the length of bar code 8 in a multicode symbology. If any length 
            is acceptable, set this property to 0.
            </summary>
            <value>
            Range is 0 to 65535.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbologyOptions.CMulticode.CBarcode8.Mask">
            <summary>
            Sets and gets a mask (up to 26 characters) for the eighth bar code in a multicode symbology.
            </summary>
            <remarks>
            The mask is used as a filter to determine which incoming data will be used for first bar 
            code in the multicode symbology. No mask is used if there is no character. 
            <list type="bullet">
            <item>* = zero or more characters</item>
            <item>? = one character</item>
            <item>\ + wildcard = a backslash plus a special character takes away the wildcard function </item>
            <item>\C = non-numerical value</item>
            <item>\N = numerical value</item>
            </list>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                                using Intermec.DataCollection2;
                                namespace DataCollection
                                {
                                    public partial class frmImagerCapture : Form
                                    {
                                        private Intermec.DataCollection2.BarcodeReader bcr;
            
                                        public frmBarcodeReader()
                                        {
                                            InitializeComponent();
            
                                            try
                                            {
                                                bcr = new Intermec.DataCollection2.BarcodeReader();
                                                bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All;
                                                bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                                bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                            }
                                            catch (BarcodeReaderException bcrexp)
                                            {
                                                MessageBox.Show(bcrexp.Message);
                                            }         
                                        }                                   
                                    }            
                                }
                                </code>
                                <code lang="VB.NET">
                                Imports Intermec.DataCollection2
                                Public Class BarcodeReader
                                    Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                    Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                        Try
                                            bcr = New Intermec.DataCollection2.BarcodeReader()
                                            bcr.SymbologyOptions.Multicode.Barcode8.Symbology = SymbologyOptions.SymbologyType.All
                                            bcr.SymbologyOptions.Multicode.Barcode8.Length = 25
                                            bcr.SymbologyOptions.Multicode.Barcode8.Mask = "*123*";
                                        Catch bcrexp As BarcodeReaderException
                                            MessageBox.Show(bcrexp.Message)
                                        End Try
                                    End Sub             
                                End Class
                                </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario">
            <summary>
            When you create an instance of the ImagerCapture class, you also create four 
            instances of the SignatureScenario class. Each instance (also called a signature capture 
            scenario and named SignatureScenario1, SignatureScenario2, SignatureScenario3, 
            and SignatureScenario4) can be selected as a property in the ImagerCapture instance.
            </summary>
            <remarks>
            <para>
            Each instance (SignatureScenario1, SignatureScenario2, SignatureScenario3, and SignatureScenario4) 
            includes its own properties, such as symbology type, bar code length, or bar code mask, that
            define the conditions that will automatically trigger a signature capture. 
            </para>
            <para>
            Bar codes that meet the identifier, length, and mask values will trigger the signature capture 
            scenario as specified. If this interferes with other data collection activities, Intermec 
            recommends making your signature capture scenario definitions as specific as possible. Specify 
            a scenario symbology, bar code length, and mask combination that is unlikely to occur in another 
            bar code to avoid interference with regular decoding.
            </para>
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection2.SignatureScenario.#ctor(System.Int32)">
            <exclude />
            <summary>
            
            </summary>
            <param name="Idx"></param>
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioContrastEnhancement">
            <summary>
            Enables scenario contrast enhancement (also known as dynamic stretching) of the capture image. 
            This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioTextEnhancement">
            <summary>
            Enables scenario text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <list type="bullet">
            </list>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioTextEnhancement = ImageConditioning.TextEnhancementValue.Low;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioTextEnhancement = ImageConditioning.TextEnhancementValue.Low
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioImageRotation">
            <summary>
            Rotates the capture image counterclockwise from its original position by the specified amount. 
            This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageRotation"/> property of the 
            <see cref="T:Intermec.DataCollection2.ImageConditioning"/> class.
            </summary>      
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioImageRotation = ImageConditioning.ImageRotationValue.None;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioImageRotation = ImageConditioning.ImageRotationValue.None
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioNoiseReduction">
            <summary>
            Reduces noise resulting from the edge enhancement process. This property uses 
            the <see cref="P:Intermec.DataCollection2.ImageConditioning.NoiseReduction"/>NoiseReduction property of the 
            <see cref="T:Intermec.DataCollection2.ImageConditioning"/> class.
            </summary>
            <remarks>
            Valid range is 0 to 9. If set to 0, this filtering stage is disabled. The higher the 
            setting value, the higher the filtering. Use this property carefully as it may add some 
            blur to the image.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioNoiseReduction = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioNoiseReduction = 1
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioImageLightingCorrection">
            <summary>
            Sets and gets the image lighting correction using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection"/> 
            property of the ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.None
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioReverseImage">
            <summary>
            Reverse signature capture image.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets imager capture value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioReverseImage = ImageConditioning.ReverseVideoValue.Enabled;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()  
                                imgCapture.SignatureScenario1.ScenarioReverseImage = ImageConditioning.ReverseVideoValue.Enabled
                             End Sub           
                         End Class
                         </code>
            </example>  
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBrightness">
            <summary>
            Lightens or darkens the image. This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.Brightness"/>
            setting of the <see cref="T:Intermec.DataCollection2.ImageConditioning"/> class.
            </summary>       
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioBrightness = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioBrightness = 1
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioColorConversion">
            <summary>
            Sets the color mode to either grayscale or monochrome. This property uses the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> setting of the <see cref="T:Intermec.DataCollection2.ImageConditioning"/> 
            class.
            </summary>       
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal;
                                    imgCapture.SignatureScenario1.ScenarioColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal
                                imgCapture.SignatureScenario1.ScenarioColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioColorConversionEx">
            <exclude /> 
            <summary>
            
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioColorConversionBrightnessThreshold">
            <summary>
            When <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioColorConversion"/> is set to monochrome, this property determines the overall image 
            brightness by determining the general level at which pixels are converted from 
            greyscale to black or white. This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/> 
            setting of the <see cref="T:Intermec.DataCollection2.ImageConditioning"/> class.
            </summary>       
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal;
                                    imgCapture.SignatureScenario1.ScenarioColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal
                                imgCapture.SignatureScenario1.ScenarioColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioOutputCompression">
            <summary>
            Sets the output file type using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompression"/>
            property of the <see cref="T:Intermec.DataCollection2.ImageConditioning"/> class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.SignatureScenario1.ScenarioOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.SignatureScenario1.ScenarioOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioOutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the output file image, using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality"/> property of the 
            ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on get and set errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.SignatureScenario1.ScenarioOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.SignatureScenario1.ScenarioOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example>   
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioEnable">
            ----------------------------------------------------------------------------------------------------------------		  
            <summary>
            Selects the enable option for the current scenario. 
            </summary>
            <remarks>  
            <para>
            In Regular mode, if the bar code matches other scenario properties such as 
            <see cref="T:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType"/> or <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeMask"/>, signature capture 
            is triggered and the capture area is defined by settings relative to the size and position of 
            the bar code label.
            </para>
            <para>
            In Framing mode (not supported by all imagers), the imager looks for calibrated markings at the 
            corners of the capture area.
            </para>
            <para>
            When enabled, a bar code read triggers the current signature capture scenario if the barcode 
            identifier, barcode length and barcode mask conditions are satisfied.
            </para>
            </remarks>        
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception> 
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception> 
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular
                             End Sub           
                         End Class
                         </code>
            </example>       
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeIdentifier">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Selects the bar code symbology that triggers the signature capture. 
            </summary>
            <remarks>       
            If set to ID_NULL, all supported symbologies trigger a signature capture.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception> 
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>       
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeLength">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the bar code length (in characters) which triggers the signature capture. If the number 
            of characters in a scanned bar code matches this length, the signature capture occurs. 
            </summary>
            <remarks>
            Range is 0 to 0xffff. If set to 0, any successful bar code read triggers a signature capture.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeMask">
             ----------------------------------------------------------------------------------------------------------------
             <summary>
             Specifies a bar code mask string (26 characters maximum) that triggers the signature capture.
             </summary>
             <remarks>       
             <para>
             If no mask is specified, editing is applied to all data received (same as specifying * as the mask), 
             and any bar code successfully read triggers the signature capture.
             </para>
             <para>
             Wild card characters are as follows:
             <list type="table">
             <listheader>
             <term>Wildcard</term>
             <description>Definition</description>
             <description>Example</description>
             </listheader>
             <item>
             <term>*</term>
             <description>Zero or more characters</description>
             <description>*123* = any code with a consecutive 123</description>
             </item>
             <item>
             <term>?</term>
             <description>one character</description>
             <description>???A* = any code with A in the fourth position followed by zero or more characters</description>
             </item>
             <item>
             <term>\ + wildcard</term>
             <description>a backslash plus a special character takes away the wildcard function</description>
             <description>*1\*3* = any code with a consecutive 1*3 anywhere in the data</description>
             </item>
             <item>
             <term>\C</term>
             <description>non-numerical value</description>
             <description>\C* = any code that starts with a non-numerical value</description>
             </item>
             <item>
             <term>\N</term>
             <description>numercial value</description>
             <description>*\N* = any code that contains a numerical value</description>
             </item>
             </list>
            </para>   
             </remarks> 
             <exception cref="T:System.ArgumentException">
             Throws exception with invalided property value. 
             </exception>
             <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
             throws an exception when an error occurs in imager capture methods or properties. 
             </exception>
             <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Width (in mm) of the bar code that triggers a signature capture. 
            </summary>
            <remarks>
            Range is 0 to 0xffff. This setting is ignored if ScenarioEnable is set to Framing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Height (in mm) of the bar code that triggers a signature capture.
            </summary>
            <remarks>
            Range is 0 to 0xffff. Not supported if ScenarioEnable is set to Framing mode.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioHorizontalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Horizontal offset (in mm) from the center of the bar code to the center of the capture area.
            </summary>
            <remarks>
            Range is -0x7fff to 0x7fff. This setting is ignored if ScenarioEnable is set to Framing.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioVerticalOffset">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Vertical offset (in mm) from the center of the bar code to the center of the capture area.
            </summary>
            <remarks>
            Range is -0x7fff to 0x7fff. This setting is ignored if ScenarioEnable is set to Framing.      
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                     
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioAreaWidth">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the width (in mm) of the capture area.
            </summary>
            <remarks>
            Range is 0 to 0xffff. This setting is ignored if ScenarioEnable is set to Framing.       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;  
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioAreaHeight">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the height (in mm) of the capture area.
            </summary>
            <remarks>
            Range is 0 to 0xffff. This property is ignored if ScenarioEnable is set to Framing.    
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    //enable siganture capture
                                    imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                    //setup barcode data
                                    imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                    //use Interleaved 2 of 5 barcode for signature capture
                                    imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                    //setup captured area 
                                    imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                    imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                    imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                    imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                    imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17; 
                                }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                'enable siganture capture
                                imgCapture.SignatureScenario1.ScenarioEnable = SignatureScenario.ScenarioEnableType.Regular;
            
                                'setup barcode data
                                imgCapture.SignatureScenario1.ScenarioBarcodeLength = 0;
                                imgCapture.SignatureScenario1.ScenarioBarcodeMask = "";
            
                                'use Interleaved 2 of 5 barcode for signature capture
                                imgCapture.SignatureScenario1.ScenarioBarcodeIdentifier = SignatureScenario.BarcodeIdentifierType.ID_ITF;
            
                                'setup captured area 
                                imgCapture.SignatureScenario1.ScenarioHorizontalOffset = 35;
                                imgCapture.SignatureScenario1.ScenarioVerticalOffset = 22;
                                imgCapture.SignatureScenario1.ScenarioAreaWidth = 74;
                                imgCapture.SignatureScenario1.ScenarioAreaHeight = 22;
                                imgCapture.SignatureScenario1.ScenarioBarcodeWidth = 71;
                                imgCapture.SignatureScenario1.ScenarioBarcodeHeight = 17;                 
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioAutomaticCorrection">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Enables automatic image correction. This process extracts horizontal and vertical lines 
            from the image and uses them to correct the captured area.
            </summary>
            <remarks>       
            <para>
            Enable this property only if the area to be captured includes a visible frame or other marking 
            that delineates the area. Otherwise, auto-correction may detect the wrong edges of the document, 
            resulting in an incorrectly sized image.
            </para>
            <para>
            This setting is ignored if ScenarioEnable is set to Framing.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioAutomaticCorrection = SignatureScenario.AutomaticCorrectionType.Both;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioAutomaticCorrection = SignatureScenario.AutomaticCorrectionType.Both
                            End Sub           
                         End Class
                         </code>
            </example>
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioFocusCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of focus check to perform on the bar code.
            </summary>
            <remarks>        
            Use this setting to reject blurred signature captures.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioFocusCheck = SignatureScenario.FocusType.Medium;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioFocusCheck = SignatureScenario.FocusType.Medium
                            End Sub           
                         End Class
                         </code>
            </example>        
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioImageRatioCheck">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the percentage of pixels the capture image must have relative to the source image, 
            thus limiting the usable depth of field. 
            </summary>
            <remarks>
            Range is 0 to 0x64. The higher the value, the more the depth of field is limited. 
            A value of 50 means that the capture area must have at least 50% of the number of 
            pixels of the source image.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioImageRatioCheck = 10;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioImageRatioCheck = 10
                            End Sub           
                         End Class
                         </code>
            </example>       
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="P:Intermec.DataCollection2.SignatureScenario.ScenarioProjectiveMappingResolution">
            ----------------------------------------------------------------------------------------------------------------
            <summary>
            Sets the level of projective mapping, which adjusts the resolution of captured images.
            </summary>
            <remarks>
            <para>
            When projective mapping is enabled, the area captured is adjusted to a different size:
            <list type="bullet">
            <item> 
            Automatic: adjusts the resolution automatically.
            </item>
            <item>
            Fixed: adjusts the size of the capture to a preset width based on the narrowest element. 
            For example, "Fixed_1Pixel" adjusts the capture size so that the narrowest bar code element 
            is 1 pixel wide.
            </item>
            </list>
            </para>
            <para>
            When projective mapping is disabled, the system returns the smallest rectangle image.
            </para>
            <para>
            Set projective mapping to a fixed value to ensure that the captured image is always the same 
            size. If projective mapping is set to a fixed value and the captured image is larger than the 
            original image, the system sends a signature capture failure event with the "invalid parameters" 
            failure code.
            </para>        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalided property value. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    imgCapture.SignatureScenario1.ScenarioProjectiveMappingResolution = SignatureScenario.ProjectiveMappingResolutionType.Automatic;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()           
                                imgCapture.SignatureScenario1.ScenarioProjectiveMappingResolution = SignatureScenario.ProjectiveMappingResolutionType.Automatic
                            End Sub           
                         End Class
                         </code>
            </example>       
            ----------------------------------------------------------------------------------------------------------------
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeIdentifier"/> property.
            </summary>        
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_NULL">
            <summary>Any supported symbology.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_EAN13">
            <summary>EAN-13</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_EAN8">
            <summary> EAN-8</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_UPCA">
            <summary> UPC-A</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_UPCE">
            <summary> UPC-E</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_ITF">
            <summary> Interleaved 2 of 5</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_128">
            <summary> Code 128 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_93">
            <summary> Code 93 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_PDF">
            <summary> PDF417 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_EAN128">
            <summary> GS1-128 /EAN-128 </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_DATAMATRIX">
            <summary> DataMatrix </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_QR">
            <summary> QR Code </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.BarcodeIdentifierType.ID_MAXICODE">
            <summary> Maxicode </summary>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario.ScenarioEnableType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioEnable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ScenarioEnableType.Disabled">
            <summary>
            Disables signature capture for this scenario.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ScenarioEnableType.Regular">
            <summary>
            Bar code locator. Imager scans bar code; if bar code matches other scenario 
            properties such as <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeIdentifier"/> or <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioBarcodeMask"/>, 
            signature capture is triggered.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ScenarioEnableType.Framing">
            <summary>
            Framing mode. Imager looks for calibrated markings at the corners of the 
            capture area (not supported by all imagers).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario.AutomaticCorrectionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioAutomaticCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.AutomaticCorrectionType.Disabled">
            <summary>No automatic correction</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.AutomaticCorrectionType.HorizontalOnly">
            <summary>Horizontal correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.AutomaticCorrectionType.VerticalOnly">
            <summary>Vertical  correction only.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.AutomaticCorrectionType.Both">
            <summary>Enables horizontal and vertical correction.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario.FocusType">
            <summary>
            An enum data type for type <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioFocusCheck"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.FocusType.Disabled">
            <summary>No focus check.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.FocusType.Medium">
            <summary>Medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.FocusType.High">
            <summary>High level.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.SignatureScenario.ScenarioProjectiveMappingResolution"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Disabled">
            <summary>
            No projective mapping. Imager returns the smallest rectangular image containing 
            the capture area.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Automatic">
            <summary>
            Projective mapping is enabled and resolution is automatically adjusted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Fixed_1Pixel">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 1 pixel wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Fixed_2Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 2 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Fixed_3Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 3 pixels wide.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureScenario.ProjectiveMappingResolutionType.Fixed_4Pixels">
            <summary>
            Adjusts capture size so that the narrowest bar code element is 4 pixels wide.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReadEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection2.BarcodeReader"/> passes information 
            from the BarcodeReader class to the calling application when a 
            <see cref="E:Intermec.DataCollection2.BarcodeReader.BarcodeRead"/> event is handled.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReadEventArgs.#ctor(System.Byte[],System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor for the <see cref="T:Intermec.DataCollection2.BarcodeReadEventArgs"/> class.
            </summary>
            <param name="inpDataBuffer">Buffer that contains the data read.</param>
            <param name="inpBytesInBuffer">Size of the data buffer in bytes.</param>
            <param name="inpStrBarcodeData">String of Barcode data.</param>
            <param name="inpDataType">Barcode data type.</param>
            <param name="inpSymbologyId">Barcode symbology ID</param>
            <param name="strSymbologyName">Symbology name.</param>
            <param name="inpPortId">Scanner port ID.</param>
            <param name="strPortName">Port name.</param>
            <param name="strPortDeviceType">Port device type.</param>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("StrBarcodeData = " + bre.StrBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortId = " + bre.PortId);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("StrBarcodeData = " + bre.StrBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortId = " + bre.PortId.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.DataBuffer">
            <summary>Stores the buffer that containing the data that was read.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.BytesInBuffer">
            <summary>Stores the size in bytes of the data buffer.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.SymbologyId">
            <summary>Stores symbology Id</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.SymbologyName">
            <summary>Stores the symbology of the bar code that was read.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.DataType">
            <summary>Stores the type of data in the bar code.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.StrBarcodeData">
            <summary>Stores data in the buffer as a string. This value is null if conversion 
            to a string is not possible.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.PortId">
            <summary>Stores port ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.PortName">
            <summary>Stores port name.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadEventArgs.PortDeviceType">
            <summary> Stores port device type.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ScannerNotifyEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection2.BarcodeReader"/> passes information about scanner 
            events to the application.
            </summary>
            <remarks>
            Any public static (Shared in Visual Basic) members of this type are safe for 
            multithreaded operations. Any instance members are not guaranteed to be thread safe.
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection2.ScannerNotifyEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates an instance of the ScannerNotifyEventArgs class.
            </summary>
            <param name="inpPortId">Device Port ID.</param>
            <param name="inpPortName">Port name</param>
            <param name="inpDeviceType">Device port type.</param>
            <param name="inpPortStateId">Type of port state change that has occurred.</param>
            <param name="inpPortStateName">Name of port state change that has occurred.</param>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs snotify)
                                {
                                    this.listBox1.Items.Add("PortId = " + snotify.PortId.ToString());
                                    this.listBox1.Items.Add("PortName = " + snotify.PortName);
                                    this.listBox1.Items.Add("Type = " + snotify.PortDeviceType);
                                    this.listBox1.Items.Add("PortStateId = " + snotify.PortStateId.ToString());
                                    this.listBox1.Items.Add("PortStateName = " + snotify.PortStateName);
                                }              
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()        
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal snotify As Intermec.DataCollection2.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                ListBox1.Items.Add("PortId = " + snotify.PortId.ToString())
                                ListBox1.Items.Add("PortName = " + snotify.PortName)
                                ListBox1.Items.Add("Type = " + snotify.PortDeviceType)
                                ListBox1.Items.Add("PortStateId = " + snotify.PortStateId.ToString())
                                ListBox1.Items.Add("PortStateName = " + snotify.PortStateName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection2.ScannerNotifyEventArgs.PortId">
            <summary>Store port ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ScannerNotifyEventArgs.PortName">
            <summary>Store name.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ScannerNotifyEventArgs.PortDeviceType">
            <summary>Store port device type.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ScannerNotifyEventArgs.PortStateId">
            <summary>Store state ID.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ScannerNotifyEventArgs.PortStateName">
            <summary>Store port state name.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.NoBarcodeReadEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection2.BarcodeReader"/> passes information about no barcode read
            events to the application.
            </summary>
            <remarks>
            This class is only supported on EA30 and EA31 scanners. 
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection2.NoBarcodeReadEventArgs.#ctor(System.Int32,System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Event for indicating no barcode data read.
            </summary>
            <param name="errValue">Error code</param>
            <param name="errMessage">Error message</param>
            <param name="inpStrBarcodeData">String of returning barcode data.</param>
            <param name="inpPortId">Port ID.</param>
            <param name="inpPortName">Port name.</param>
            <param name="inpPortDeviceType">Port device type.</param>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                                {
                                    this.listBox1.Items.Add("noBre.ErrMessage = " + noBre.ErrMessage);
                                    this.listBox1.Items.Add("noBre.ErrCode = " + noBre.ErrCode);
                                    this.listBox1.Items.Add("noBre.StrBarcodeData = " + noBre.StrBarcodeData);
                                    this.listBox1.Items.Add("noBre.PortId = " + noBre.PortId);
                                    this.listBox1.Items.Add("noBre.PortName = " + noBre.PortName);
                                }          
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()        
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection2.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                ListBox1.Items.Add("noBre.ErrorMessage = " + noBre.ErrorMessage)
                                ListBox1.Items.Add("noBre.ErrorValue = " + noBre.ErrorValue.ToString())
                                ListBox1.Items.Add("noBre.StrBarcodeData = " + noBre.StrBarcodeData)
                                ListBox1.Items.Add("noBre.PortId = " + noBre.PortId.ToString())
                                ListBox1.Items.Add("noBre.PortName = " + noBre.PortName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.ErrorValue">
            <summary> Stores error code </summary>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.ErrorMessage">
            <summary> Stores error message </summary>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.StrBarcodeData">
            <summary> Stores barcode data. The "&lt;NULL_DATA>" is returned.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.PortId">
            <summary> Stores port ID. </summary>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.PortName">
            <summary> Stores port name. </summary>
        </member>
        <member name="F:Intermec.DataCollection2.NoBarcodeReadEventArgs.PortDeviceType">
            <summary> Stores port device type </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReadErrorEventArgs">
            <summary>
            This member class of <see cref="T:Intermec.DataCollection2.BarcodeReader"/> passes information about error events to 
            the application.
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multithreaded 
            operations. Any instance members are not guaranteed to be thread safe.
            </para>  
            </remarks>    
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReadErrorEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            Event for notifying when an error has occurred. Such as insufficient response buffer size.
            </summary>
            <param name="errValue">Error code</param>
            <param name="errMessage">Error message</param>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeReadError += new BarcodeReadErrorEventHandler(bcr_BarcodeReadError);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeReadError(object sender, BarcodeReadErrorEventArgs breErr)
                                {
                                    this.listBox1.Items.Add("ErrorMessage" + breErr.ErrorMessage);
                                }            
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeReadError(ByVal sender As Object, ByVal breErr As Intermec.DataCollection2.BarcodeReadErrorEventArgs) Handles bcr.BarcodeReadError
                                ListBox1.Items.Add("ErrorMessage" + breErr.ErrorMessage)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadErrorEventArgs.ErrorValue">
            <summary>
            Stores error code
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReadErrorEventArgs.ErrorMessage">
            <summary>
            Stores error message
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReadEventHandler">
            <exclude />
            <summary>
            The BarcodeReadEventHandler delegate represents the method that will handle the 
            BarcodeReader event of BarcodeReadEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="bre">
            An object of BarcodeReadEventArgs class that passes informatin of a bar code has been read.
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.ScannerNotifyEventHandler">
            <exclude />
            <summary>
            This delegate represents the method that will handle the 
            ScannerNotify event of the ScannerNotifyEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="snotify">
             An object of the ScannerNotifyEventArgs class that passes information about scanner events.
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.NoBarcodeReadEventHandler">
            <exclude />
            <summary>
            The NoBarcodeReadEventHandler delegate represents the method that will handle the 
            NoBarcodeRead event of NoBarcodeReadEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="noBre">
            An object of NoBarcodeReadEventArgs class that passes informatin of no barcode read.
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReadErrorEventHandler">
            <exclude />
            <summary>
            The BarcodeReadErrorEventHandler delegate represents the method that will handle the 
            BarcodeReader error event of BarcodeReadErrorEventArgs class.
            </summary>
            <param name="sender">An object of System.Object class</param>
            <param name="breErr">An object of BarcodeReadErrorEventArgs class that passes informatin of errors.</param>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReader">
            <summary>
            The BarcodeReader class allows you to control the internal, external bar code scanners,
            or Camera if support on a deivce.
            <list type="bullet">
            <item>
            Use the <see cref="F:Intermec.DataCollection2.BarcodeReader.Symbology"/> field in a BarcodeReader object to get and set decoding 
            options for supported symbologies. Symbology is set if port state is either enabled or 
            disabled when set option is requested. 
            </item>
            <item>
            Use the <see cref="F:Intermec.DataCollection2.BarcodeReader.SymbologyOptions"/> field in a BarcodeReader object to get and set 
            postamble and preamble text, to set global symbology ID information, or to configure 
            reading multicode symbologies of up to 8 separate bar codes. Symbology option is set if port state is either enabled or 
            disabled when set option is requested.
            </item>
            <item>
            Use the <see cref="F:Intermec.DataCollection2.BarcodeReader.PortInfoArray"/> field in the <see cref="M:Intermec.DataCollection2.BarcodeReader.GetPortInfo(Intermec.DataCollection2.BarcodeReader.PortInfo[])"/> method of 
            a BarcodeReader object to get all ports information of devcie.
            </item>
            <item>
            Method and/or property set request will performed if a scanner port state is either enabled or disabled 
            when request is made.
            </item>
            </list>
            </summary>
            <remarks>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should 
            be used only within a single thread.
            </para>
            <para>
            Support for some BarcodeReader functions depends on the hardware options and on the firmware 
            versions installed on your Intermec computer and its peripherals, such as external scanners. 
            For more information on compatibility, see the user manual for your Intermec product.
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.Symbology">
            <summary>
            An object of <see cref="T:Intermec.DataCollection2.CSymbology"/> class that sets and gets symbology settings through the 
            BarcodeReader class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.SymbologyOptions">
            <summary>
            An object of the <see cref="T:Intermec.DataCollection2.CSymbologyOptions"/> class that sets and gets symbology options 
            settings through the BarcodeReader class. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfoArray">
            <summary>
            An array object of <see cref="T:Intermec.DataCollection2.BarcodeReader.PortInfo"/> struct for get ports state information
            in <see cref="M:Intermec.DataCollection2.BarcodeReader.GetPortInfo(Intermec.DataCollection2.BarcodeReader.PortInfo[])"/> method.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.#ctor">
            <summary>
            Constructor uses the internal scanner and buffer size (2 KB).
            </summary>
            <remarks>
            <item>
            Multiple simultaneous instances of this class are NOT supported.
            Before you create a new instance, use <see cref="M:Intermec.DataCollection2.BarcodeReader.Dispose"/> 
            to dispose of the existing instance. 
            </item>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortId = " + bre.PortId);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.String)">
            <summary>
            Overloaded constructor sets the scanner name and uses the default buffer (2 KB).
            </summary>
            <param name="deviceName">Name of the scanner to be used.</param>
            <remarks>       
            <para>
            Multiple simultaneous instances of this class are NOT supported.
            Before you create a new instance, use <see cref="M:Intermec.DataCollection2.BarcodeReader.Dispose"/> 
            to dispose of the existing instance. 
            </para>
            <para>
            The BarcodeReader class supports the following device names:
            <list type="bullet">
            <item>To use the internal scanner for your Intermec computer, 
            set deviceName to "Internal".</item>
            <item>For external scanners connected to your Intermec 
            computer, set deviceName to "External".</item>
            <item> For Camera, set deviceName to "Camera". It is supported on 70 Series currently.</item>
            <item>For All scanners (exclude Camera), set deviceName to "All".</item>
            </list>   
            </para>     
            <para>
            If Camera is the barcode scan source, use the <see cref="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)"/> for using the Camera. 
            To preview barcode with Camera, set the <see cref="P:Intermec.DataCollection2.BarcodeReader.ViewFinderEnable"/> to true.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Internal");
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortID = " + bre.PortID);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader("Internal")
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.String,System.UInt32)">
            <summary>
            Overloaded constructor sets the scanner name and sets the buffer size.
            </summary>
            <param name="deviceName">Name of the scanner to be used.</param>
            <param name="buffSize">Size in bytes of the buffer (minimum 130 bytes). 
            Although the default size of 2 KB is adequate for most applications, 
            if you are using a bar code symbology that encodes a larger amount 
            of data, you should specify a larger buffer size</param>
            <remarks>      
            <para>
            Multiple simultaneous instances of this class are NOT supported.
            Before you create a new instance, use <see cref="M:Intermec.DataCollection2.BarcodeReader.Dispose"/> 
            to dispose of the existing instance. 
            </para>       
            <para>
            The BarcodeReader class supports the following device names:
            <list type="bullet">
            <item>To use the internal scanner for your Intermec computer, 
            set deviceName to "Internal".</item>
            <item>For external scanners connected to your Intermec 
            computer, set deviceName to "External".</item>
            <item> For Camera, set deviceName to "Camera". It is supported on 70 Series currently.</item>
            <item>For All scanners (exclude Camera), set deviceName to "All".</item>
            </list> 
            </para> 
            <para>
            If Camera is the barcode scan source, use the <see cref="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)"/> for using the Camera.
            To preview barcode with Camera, set the <see cref="P:Intermec.DataCollection2.BarcodeReader.ViewFinderEnable"/> to true.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Internal", 5000);
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortID = " + bre.PortID);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader("Internal", 5000)
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.Windows.Forms.Control,System.String,System.UInt32)">
            <summary>
            Overloaded constructor uses a specified scanner and sets the buffer size. Use this constructor 
            for applications without a user interface.
            </summary>
            <param name="thisCtrl">Set to null for a formless application.</param>
            <param name="deviceName">Name of the scanner to be used.</param>
            <param name="buffSize">Size in bytes for the buffer (minimum 130 bytes). 
            Although the default size of 2 KB is adequate for most applications, 
            if you are using a bar code symbology that encodes a larger amount of 
            data, you should specify a larger buffer size.</param>
            <remarks>
            <para>Even if your application does not use a form, you need to add a reference 
            to System.Windows.Forms.
            </para>
            <para>
            Multiple simultaneous instances of this class are NOT supported.
            Before you create a new instance, use <see cref="M:Intermec.DataCollection2.BarcodeReader.Dispose"/> 
            to dispose of the existing instance. 
            </para>
            <para>
            The BarcodeReader class supports the following device names:
            <list type="bullet">
            <item>To use the internal scanner for your Intermec computer, 
            set deviceName to "Internal".</item>
            <item>For external scanners connected to your Intermec 
            computer, set deviceName to "External".</item>
            <item> For Camera, set deviceName to "Camera". It is supported on 70 Series currently.</item>
            <item>For All scanners (exclude Camera), set deviceName to "All".</item>
            </list> 
            </para>
            <para>
            If Camera is the barcode scan source, use the <see cref="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)"/> for using the Camera.
            To preview barcode with Camera, set the <see cref="P:Intermec.DataCollection2.BarcodeReader.ViewFinderEnable"/> to true.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(null, "Internal", 5000);
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortID = " + bre.PortID);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader(Nothing, "Internal", 5000)
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.Dispose">
            <summary>
            Releases all resources from the scanner. Your application must call Dispose 
            before exiting, or the application may not exit properly.
            </summary>
            <remarks>
            Multiple simultaneous instances of this class is not supported. Before you 
            create a new instance, use this method to dispose of the existing instance.
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }   
                                
                                private void menuExit_Click(object sender, EventArgs e)
                                {                                      
                                    if (bcr != null)
                                    {                    
                                        bcr.Dispose();
                                        bcr = null;                    
                                    }                             
            
                                    Application.Exit();
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub    
                     
                            Private Sub MenuItem1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MenuItem1.Click
                                If bcr Is Nothing Then
                                    'do nothing
                                Else
                                    bcr.Dispose()
                                End If
            
                                Application.Exit()
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.Dispose(System.Boolean)">
            <summary>
            Override function that dispose the instance.
            </summary>
            <param name="disposing">Set true to dispose instance.</param>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.Finalize">
            <summary>
            Distructor of BarcodeReader class.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.SetViewFinderCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the screen coordinates for the viewfinder.
            </summary>
            <param name="leftPosition">The x-coordinate of the upper-left corner of the screen rectangle. Default value is 0.</param>
            <param name="topPositon">The y-coordinate of the upper-left corner of the screen rectangle. Default value is 0.</param>
            <param name="rightPosition">The x-coordinate of the lower-right corner of the screen rectangle. For a VGA display in portrait orientation, the maximum value of RightPosition is 480. Default value is 480.</param>
            <param name="bottomPosition">The y-coordinate of the lower-right corner of the screen rectangle. For a VGA display in portrait orientation, the maximum value of BottomPosition is 640. Default value is 640.</param>
            <remarks>
            <para>
            This method only supports the Camera is used in <see cref="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.String)"/>.
            </para>
            <para>
            Although you can specify the viewfinder size, the size of the image in the viewfinder depends on the image aspect ratio (width/height) of the camera in the computer. The default aspect ratio is .75.
            </para>
            <para>
            The image is always scaled to maintain that aspect ratio. If you specify a viewfinder size with a different aspect ratio, the image does not fill the viewfinder rectangle.
            </para>
            <para>
            When the display is in Portrait mode, the image will fill the viewfinder if the viewfinder size is set to 0, 0, 480, 640.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera");
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera);
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350);
                                        bcr.ViewFinderEnable = true;
            
                                        bcr.BarcodeRead +=new BarcodeReadEventHandler(bcr_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                } 
                                
                                void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                                {                       
                                    this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                    this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                    this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                    this.listBox1.Items.Add("DataType = " + bre.DataType);
                                    this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                    this.listBox1.Items.Add("PortId = " + bre.PortId);
                                    this.listBox1.Items.Add("PortName = " + bre.PortName);
                                    this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);                       
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera")
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera)
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350)
                                        bcr.ViewFinderEnable = true
                                        bcr.PostRead = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub  
                     
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId)
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortId = " + bre.PortId)
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetViewFinderCoordinates">
            <summary>
            Gets the current viewfinder coordinates.
            </summary>
            <returns>
            A string indicating the viewfinder coordinates as left, top, right, or bottom.
            </returns>
            <remarks>
            This method only supports the Camera is used in <see cref="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.String)"/>.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera");
                                        string strCoordinate = bcr.GetViewFinderCoordinates();
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera")
                                        Dim strCoordinates As String = docCamera.GetViewFinderCoordinates()
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)">
            <summary>
            Sets the button for using the Scan or Camera in BarcodeReader.
            </summary>
            <param name="inputButtonID">Button ID.</param>
            <param name="inputButtonActionType">Button action type.</param>        
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>    
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera");
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera);
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350);
                                        bcr.ViewFinderEnable = true;
            
                                        bcr.BarcodeRead +=new BarcodeReadEventHandler(bcr_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                } 
                                
                                void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                                {                       
                                    this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                    this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                    this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                    this.listBox1.Items.Add("DataType = " + bre.DataType);
                                    this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                    this.listBox1.Items.Add("PortId = " + bre.PortId);
                                    this.listBox1.Items.Add("PortName = " + bre.PortName);
                                    this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);                       
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera")
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera)
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350)
                                        bcr.ViewFinderEnable = true
                                        bcr.PostRead = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub  
                     
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId)
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortId = " + bre.PortId)
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType@)">
            <summary>
            Gets the current button action settings.
            </summary>
            <param name="inputButtonId">Button ID</param>
            <param name="returnButtonActionType">Button action type</param>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera");
                                        BarcodeReader.ButtonActionType myButtonType = 0;
                                        bcr.GetButtonAction(BarcodeReader.ButtonId.Center, ref myButtonType);
                                        string CenterButtonType = myButtonType.ToString();
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = new Intermec.DataCollection2.BarcodeReader("Camera")
                                    Dim myButtonType As DocumentCapture.ButtonActionType = 0
                                    bcr.GetButtonAction(DocumentCapture.ButtonId.Center, myButtonType)
                                    Dim CenterButtonType As String = myButtonType.ToString()
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetPortInfo(Intermec.DataCollection2.BarcodeReader.PortInfo[])">
            <summary>
            Gets all ports information of device.
            </summary>
            <param name="myPortInfo">Array of <see cref="T:Intermec.DataCollection2.BarcodeReader.PortInfo"/> struct that store port data</param>
            <remarks>
            When you create an instance of BarcodeReader class, you also create a <see cref="F:Intermec.DataCollection2.BarcodeReader.PortInfoArray"/> of
            PortInfo struct. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception> 
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                     
                                        bcr.GetPortInfo(bcr.PortInfoArray);
                                        for (int i = 0; i &lt; bcr.PortInfoArray.Length; i++)
                                        {
                                            this.listBox1.Items.Add("portID = " + bcr.PortInfoArray[i].PortId);
                                            this.listBox1.Items.Add("DeviceType = " + bcr.PortInfoArray[i].PortDeviceType);
                                            this.listBox1.Items.Add("PortName = " + bcr.PortInfoArray[i].PortName);
                                            this.listBox1.Items.Add("StateID = " + bcr.PortInfoArray[i].PortStateId);
                                            this.listBox1.Items.Add("PortStateName = " + bcr.PortInfoArray[i].PortStateName);
                                        }                                       
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New BarcodeReader()
            
                                    bcr.GetPortInfo(bcr.PortInfoArray)
            
                                    For Each myPort As BarcodeReader.PortInfo In bcr.PortInfoArray
                                        ListBox1.Items.Add("portID = " + myPort.PortId.ToString())
                                        ListBox1.Items.Add("DeviceType = " + myPort.PortDeviceType)
                                        ListBox1.Items.Add("PortName = " + myPort.PortName)
                                        ListBox1.Items.Add("StateID = " + myPort.PortStateId.ToString())
                                        ListBox1.Items.Add("PortStateName = " + myPort.PortStateName)
                                    Next
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.SetPortState(System.Int32,System.Int32)">
            <summary>
            Set the port state by port ID.
            </summary>
            <param name="portID">Port ID for state changing.</param>
            <param name="portState">Port state value of <see cref="T:Intermec.DataCollection2.BarcodeReader.PortState"/></param>
            <returns>Returns Zero for indicating sucessful setting.</returns>
            <exception cref="T:System.ArgumentException"> 
            thrown an exception when an invalid value is entered.         
            </exception>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <remarks>
            Valid values for port state are Disable, Enable, and Inoperative from <see cref="T:Intermec.DataCollection2.BarcodeReader.PortState"/>
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(); 
                                        //enable port 1
                                        bcr.SetPortState(1, (int)BarcodeReader.PortState.Enabled);                                   
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New BarcodeReader()
                                    'enable port 1
                                    bcr.SetPortState(1, BarcodeReader.PortState.Enabled)                       
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetPortState(System.Int32,System.Int32@,System.String@)">
            <summary>
            Get port state by port ID.
            </summary>
            <param name="portID">Port ID</param>
            <param name="stateID">Port state ID.</param>
            <param name="portState">String descrption of port state</param>
            <returns>Returns Zero if successful on get port state.</returns>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                               
                                        int stateID = 0;
                                        string PortState = string.Empty;
                                        bcr.GetPortState(1, ref stateID, ref PortState);                                   
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New BarcodeReader()
                     
                                    Dim stateID As Integer
                                    Dim PortState As String = Nothing
                                    bcr.GetPortState(1, stateID, PortState)                      
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetFirstPortID(System.Int32@)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetNextPortID(System.Int32@)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetPortDeviceType(System.Int32,System.String@)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.GetPortName(System.Int32,System.String@)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.SetPortDeviceType(System.Int32,System.String)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteConfigInfo(System.Int32,System.Byte,System.Byte,System.Byte)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.ReadConfigInfo(System.Int32,System.Byte,System.Byte,System.Int32@)">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteConfigInfoTwoBytes(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte)">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.ReadConfigInfo(System.Int32,System.Byte,System.Byte,System.Byte[],System.Int32@)">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteConfigInfoString(System.Int32,System.Byte,System.Byte,System.String)">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.ReadConfigInfoString(System.Int32,System.Byte,System.Byte,System.String@)">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteConfigInfo(System.Int32,System.Byte[],System.Int32)">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.ReadConfigInfo(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />         
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteStatusCommand(System.Int32,System.Byte,System.Byte,System.Byte)">
            <exclude />        
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.WriteStatusCommand(System.Int32,System.Byte[],System.Int32)">
            <exclude />       
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReader.ReadStatus(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />          
        </member>
        <member name="E:Intermec.DataCollection2.BarcodeReader.BarcodeRead">
            <summary>
            An event for notifying applications that a bar code has been read.
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("StrBarcodeData = " + bre.StrBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortId = " + bre.PortId);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("StrBarcodeData = " + bre.StrBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId.ToString())
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortId = " + bre.PortId.ToString())
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.BarcodeReader.ScannerNotify">
            <summary>
            An event that passes information about scanner events to the 
            application as device state changed. 
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.ScannerNotify += new ScannerNotifyEventHandler(bcr_ScannerNotify);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_ScannerNotify(object sender, ScannerNotifyEventArgs snotify)
                                {
                                    this.listBox1.Items.Add("PortId = " + snotify.PortId.ToString());
                                    this.listBox1.Items.Add("PortName = " + snotify.PortName);
                                    this.listBox1.Items.Add("Type = " + snotify.PortDeviceType);
                                    this.listBox1.Items.Add("PortStateId = " + snotify.PortStateId.ToString());
                                    this.listBox1.Items.Add("PortStateName = " + snotify.PortStateName);
                                }              
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()        
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_ScannerNotify(ByVal sender As Object, ByVal snotify As Intermec.DataCollection2.ScannerNotifyEventArgs) Handles bcr.ScannerNotify
                                ListBox1.Items.Add("PortId = " + snotify.PortId.ToString())
                                ListBox1.Items.Add("PortName = " + snotify.PortName)
                                ListBox1.Items.Add("Type = " + snotify.PortDeviceType)
                                ListBox1.Items.Add("PortStateId = " + snotify.PortStateId.ToString())
                                ListBox1.Items.Add("PortStateName = " + snotify.PortStateName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.BarcodeReader.NoBarcodeRead">
            <summary>
            An event for notifying applications that no barcode is read 
            when trigger is released.
            </summary>
            <remarks>
            <para>
            This event is only supported on EA30 and EA31 scanners.
            </para>
            <para>
            The "&lt;NULL_DATA>" is returned in strBarcodeData.
            </para>
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                                {
                                    this.listBox1.Items.Add("noBre.ErrMessage = " + noBre.ErrMessage);
                                    this.listBox1.Items.Add("noBre.ErrCode = " + noBre.ErrCode);
                                    this.listBox1.Items.Add("noBre.StrBarcodeData = " + noBre.StrBarcodeData);
                                    this.listBox1.Items.Add("noBre.PortId = " + noBre.PortId);
                                    this.listBox1.Items.Add("noBre.PortName = " + noBre.PortName);
                                }          
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()        
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection2.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                ListBox1.Items.Add("noBre.ErrorMessage = " + noBre.ErrorMessage)
                                ListBox1.Items.Add("noBre.ErrorValue = " + noBre.ErrorValue.ToString())
                                ListBox1.Items.Add("noBre.StrBarcodeData = " + noBre.StrBarcodeData)
                                ListBox1.Items.Add("noBre.PortId = " + noBre.PortId.ToString())
                                ListBox1.Items.Add("noBre.PortName = " + noBre.PortName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.BarcodeReader.BarcodeReadError">
            <summary>
            An event for notifying applications that an error has occurred. Such as insufficient response buffer size.
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeReadError += new BarcodeReadErrorEventHandler(bcr_BarcodeReadError);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeReadError(object sender, BarcodeReadErrorEventArgs breErr)
                                {
                                    this.listBox1.Items.Add("ErrorMessage" + breErr.ErrorMessage);
                                }            
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeReadError(ByVal sender As Object, ByVal breErr As Intermec.DataCollection2.BarcodeReadErrorEventArgs) Handles bcr.BarcodeReadError
                                ListBox1.Items.Add("ErrorMessage" + breErr.ErrorMessage)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.PostRead">
            <summary>
            Requests data from the scanner and posts an event when scanned data is available.
            </summary>    
            <value>
            <list type="bullet">
            <item>true = sends the BarcodeRead event after each successful read.</item>
            <item>false = no barcode data send to the BarcodeRead event. </item>
            </list>
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortID = " + bre.PortID);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
            
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId)
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID)
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.ScannerEnable">
            <summary>
            Enables or disables the scanner port.
            </summary>
            <value>
            <list type="bullet">
            <item>true = Enables the scanner port.</item>
            <item>false = Disables the scanner port.</item>
            </list>
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.BarcodeRead += new BarcodeReadEventHandler(bcr1_BarcodeRead);
                                        bcr.PostRead = true;
                                        bcr.ScannerEnable = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }  
                                
                                void bcr_BarcodeRead(object sender, Intermec.DataCollection2.BarcodeReadEventArgs bre)
                                {
                                    try
                                    {
                                        this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                        this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                        this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                        this.listBox1.Items.Add("DataType = " + bre.DataType);
                                        this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                        this.listBox1.Items.Add("PortID = " + bre.PortID);
                                        this.listBox1.Items.Add("PortName = " + bre.PortName);
                                        this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    } 
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.PostRead = True
                                    bcr.ScannerEnable = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub
            
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId)
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortID = " + bre.PortID)
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.TriggerOn">
            <summary>
            Turns the trigger on or off.
            </summary>
            <remarks>
            <para>
            This propert is supported only if the BarcodeReader constructor specifies Internal or Camera. 
            </para>
            <para>
            The ScannerEnable setting has no control on this TriggerOn property. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.TriggerOn = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                 
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.TriggerOn = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.DataLed">
            <summary>
            Turns the data LED on or off. Supported only by Intermec computers with a data LED.
            </summary>           
            <value>
            <list type="bullet">
            <item>true = Turns data LED on.</item>
            <item>false = Turns data LED off.</item>
            </list>
            </value>
            <remarks>
            This property only sets the state of the data LED (when available) on the Intermec 
            computer, and does not affect the state of the good read LED. Use <see cref="P:Intermec.DataCollection2.BarcodeReader.ReadLed"/> 
            to set the state of the good read LED.
            </remarks>       
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(); 
                                        bcr.DataLed = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                           
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.DataLed = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub               
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.ReadLed">
            <summary>
            Turns the good read LED on or off. Supported only by Intermec computers with a good read LED.
            </summary>
            <value>
            <para>
            This property only sets the state of the good read LED (when available) on the Intermec computer. 
            To set the state of the data LED, use <see cref="P:Intermec.DataCollection2.BarcodeReader.DataLed"/>
            </para>
            <list type="bullet">
            <item>true = Turns Read LED on.</item>
            <item>false = Turns Read LED off.</item>
            </list>
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(); 
                                        bcr.ReadLed = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                           
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.ReadLed = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub               
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.FilterGrid">
            <summary>
            Sets and gets the grid filter string.
            </summary>
            <value>
            A string (up to 239 characters) that is used to filter and edit scanned data.
            </value>
            <remarks>
            This property temporarily sets the scanner filter for the current bar code 
            reader engine. The grid is enabled as long as the connection to the current 
            bar code reader engine remains open
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(); 
                                        bcr.FilterGrid = "123";
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                           
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.FilterGrid = "123"
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub               
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.EnableNoBarcodeReadEvent">
            <summary>
            Enable/disable the NoBarcodeReadEvent if no barcode is read after 
            release the trigger. 
            </summary>  
            <value>
            <list type="bullet">
            <item>true = enable the NoBarcodeReadEvent. </item>
            <item>false = disable the NoBarcodeReadEvent. </item>
            </list>
            </value>
            <remarks>
            The NoBarcodeReadEvent is only supported on CN70 serise currently.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader(); 
                                        bcr.EnableNoBarcodeReadEvent = true;
                                        bcr.NoBarcodeRead += new NoBarcodeReadEventHandler(bcr_NoBarcodeRead);
            
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                } 
                                
                                void bcr_NoBarcodeRead(object sender, NoBarcodeReadEventArgs noBre)
                                {
                                    this.listBox1.Items.Add("noBre.errMessage = " + noBre.errMessage);
                                    this.listBox1.Items.Add("noBre.errCode = " + noBre.errCode);
                                    this.listBox1.Items.Add("noBre.strBarcodeData = " + noBre.strBarcodeData);
                                    this.listBox1.Items.Add("noBre.PortId = " + noBre.PortId);
                                    this.listBox1.Items.Add("noBre.PortName = " + noBre.PortName);
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.EnableNoBarcodeReadEvent = True
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub  
                     
                            Private Sub bcr_NoBarcodeRead(ByVal sender As Object, ByVal noBre As Intermec.DataCollection2.NoBarcodeReadEventArgs) Handles bcr.NoBarcodeRead
                                ListBox1.Items.Add("noBre.errMessage = " + noBre.errMessage)
                                ListBox1.Items.Add("noBre.errCode = " + noBre.errCode)
                                ListBox1.Items.Add("noBre.strBarcodeData = " + noBre.strBarcodeData)
                                ListBox1.Items.Add("noBre.PortId = " + noBre.PortId)
                                ListBox1.Items.Add("noBre.PortName = " + noBre.PortName)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.ViewFinderEnable">
            <summary>
            Enables and disables the ViewFinder for reading barcode with Camera.
            </summary>
            <remarks>
            <para>
            This property only supports the Camera is used in <see cref="M:Intermec.DataCollection2.BarcodeReader.#ctor(System.String)"/>.
            </para>
            <para>
            Set ViewFinderEnable to true to preview barcode for scanning.
            </para>
            </remarks>
            <value>
            <list type="bullet">
            <item>true = enable the ViewFinder. </item>
            <item>false = disable the ViewFinder. </item>
            </list>
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException">
            Throws exception when an error has occurred on bar code read methods and properties. 
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera");
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera);
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350);
                                        bcr.ViewFinderEnable = true;
            
                                        bcr.BarcodeRead +=new BarcodeReadEventHandler(bcr_BarcodeRead);
                                        bcr.PostRead = true;
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                } 
                                
                                void bcr_BarcodeRead(object sender, BarcodeReadEventArgs bre)
                                {                       
                                    this.listBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData);
                                    this.listBox1.Items.Add("SymbologyId = " + bre.SymbologyId);
                                    this.listBox1.Items.Add("SymbologyName = " + bre.SymbologyName);
                                    this.listBox1.Items.Add("DataType = " + bre.DataType);
                                    this.listBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer);
                                    this.listBox1.Items.Add("PortId = " + bre.PortId);
                                    this.listBox1.Items.Add("PortName = " + bre.PortName);
                                    this.listBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType);                       
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                        bcr = new Intermec.DataCollection2.BarcodeReader("Camera")
                                        bcr.SetButtonAction(BarcodeReader.ButtonID.Center, BarcodeReader.ButtonActionType.Camera)
                                        bcr.SetViewFinderCoordinates(0, 0, 480, 350)
                                        bcr.ViewFinderEnable = true
                                        bcr.PostRead = true
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub  
                     
                            Private Sub bcr_BarcodeRead(ByVal sender As Object, ByVal bre As Intermec.DataCollection2.BarcodeReadEventArgs) Handles bcr.BarcodeRead
                                ListBox1.Items.Add("strBarcodeData = " + bre.strBarcodeData)
                                ListBox1.Items.Add("SymbologyId = " + bre.SymbologyId)
                                ListBox1.Items.Add("SymbologyName = " + bre.SymbologyName)
                                ListBox1.Items.Add("DataType = " + bre.DataType)
                                ListBox1.Items.Add("BytesInBuffer = " + bre.BytesInBuffer)
                                ListBox1.Items.Add("PortId = " + bre.PortId)
                                ListBox1.Items.Add("PortName = " + bre.PortName)
                                ListBox1.Items.Add("PortDeviceType = " + bre.PortDeviceType)
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.CurrentBCHandle">
            <exclude />
            <summary>
            The handle of BarcodeReader instance.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.BarcodeReader.NumgerOfPort">
            <exclude /> 
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReader.ButtonId">
            <summary>
            Button ID type used by <see cref="M:Intermec.DataCollection2.BarcodeReader.GetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType@)"/> or <see cref="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)"/>.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonId.Handle">
            <summary>
            Button on the scan handle.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonId.RightFront">
            <summary>
            Right front button on the computer. Not supported by CK70, CK71, or CN70. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonId.Left">
            <summary>
            Left side button. Not supported by CK70, CK71, or CN70.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonId.Center">
            <summary>
            Center button.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonId.LeftFront">
            <summary>
            Left front button. Not supported by CK70, CK71, or CN70.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReader.ButtonActionType">
            <summary>
            Button ID type used by <see cref="M:Intermec.DataCollection2.BarcodeReader.GetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType@)"/> and <see cref="M:Intermec.DataCollection2.BarcodeReader.SetButtonAction(Intermec.DataCollection2.BarcodeReader.ButtonId,Intermec.DataCollection2.BarcodeReader.ButtonActionType)"/>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonActionType.Scan">
            <summary>
            Sets button for scanning. Not used by document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonActionType.RFIDWedge">
            <summary>
            Sets button for RFID wedge. Not used by document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonActionType.BRI">
            <summary>
            Sets button for BRI. Not used by document capture.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.ButtonActionType.Camera">
            <summary>
            Sets button for camera.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReader.PortInfo">
            <summary>
            Struct for storing ports information in <see cref="M:Intermec.DataCollection2.BarcodeReader.GetPortInfo(Intermec.DataCollection2.BarcodeReader.PortInfo[])"/>.
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                     
                                        bcr.GetPortInfo(bcr.portInfoArray);
                                        for (int i = 0; i &lt; bcr.portInfoArray.Length; i++)
                                        {
                                            this.listBox1.Items.Add("portId = " + bcr.portInfoArray[i].PortId);
                                            this.listBox1.Items.Add("DeviceType = " + bcr.portInfoArray[i].PortDeviceType);
                                            this.listBox1.Items.Add("PortName = " + bcr.portInfoArray[i].PortName);
                                            this.listBox1.Items.Add("StateID = " + bcr.portInfoArray[i].PortStateID);
                                            this.listBox1.Items.Add("PortState = " + bcr.portInfoArray[i].strPortState);
                                        }                                       
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                     
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New BarcodeReader()
            
                                    bcr.GetPortInfo(bcr.portInfoArray)
            
                                    For Each myPort As BarcodeReader.PortInfo In bcr.portInfoArray
                                        ListBox1.Items.Add("portId = " + myPort.PortId.ToString())
                                        ListBox1.Items.Add("DeviceType = " + myPort.PortDeviceType)
                                        ListBox1.Items.Add("PortName = " + myPort.PortName)
                                        ListBox1.Items.Add("StateID = " + myPort.PortStateID.ToString())
                                        ListBox1.Items.Add("PortState = " + myPort.strPortState)
                                    Next
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub                
                        End Class
                        </code>
            </example>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfo.PortId">
            <summary>
            Port Id
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfo.PortName">
            <summary>
            Port name
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfo.PortDeviceType">
            <summary>
            Port device type
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfo.PortStateId">
            <summary>
            Port state ID
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortInfo.PortStateName">
            <summary>
            String of port state
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReader.PortState">
            <summary>
            Enum type for port state 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortState.Disabled">
            <summary>
            Disable port
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortState.Enabled">
            <summary>
            Enable port
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReader.PortState.Inoperative">
            <summary>
            Port is inoperative
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.MyHelper.ImgCapResult">
            <exclude />          
        </member>
        <member name="P:Intermec.DataCollection2.MyHelper.BCResult">
            <exclude />          
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology">
            <summary>
            Use Intermec.DataCollection2.CSymbology to set decoding and attribute options for bar code symbologies.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner and associated firmware 
            installed in your Intermec computer, and on the current symbology settings as configured by the 
            Intermec Settings application. For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded operations. 
            Instance members are not guaranteed to be thread safe and each instance should be used only within a 
            single thread.
            </para>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Postnet">
            <summary>
            Object for Postnet symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Planet">
            <summary>
            Object for Planet symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Bpo">
            <summary>
            Object for BPO symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CanadaPost">
            <summary>
            Object for Canada Post symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.AustralianPost">
            <summary>
            Object for Australia Post symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.JapanPost">
            <summary>
            Object for Japan Post symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.DutchPost">
            <summary>
            Object for Dutch Post symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.SwedenPost">
            <summary>
            Object for Sweden Post symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Infomail">
            <summary>
            Object for Infomail symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.IntelligentMail">
            <summary>
            Object for Intelligent mail symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Codabar">
            <summary>
            Object for Codabar symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Code93">
            <summary>
            Object for Code 93 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Code39">
            <summary>
            Object for Code 39 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Code128">
            <summary>
            Object for Code 128 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Interleaved2Of5">
            <summary>
            Object for Interleaved 2 of 5 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Matrix2Of5">
            <summary>
            Object for Matrix 2 of 5 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Msi">
            <summary>
            Object for MSI symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Plessey">
            <summary>
            Object for Plessey symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Standard2Of5">
            <summary>
            Object for Standard 2 of 5 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Telepen">
            <summary>
            Object for Telepen symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Code11">
            <summary>
            Object for Code 11 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.EanUpc">
            <summary>
            Object for EAN/UPC symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.MicroPdf417">
            <summary>
            Object for MicroPDF417 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Pdf417">
            <summary>
            Object for PDF417 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CodablockA">
            <summary>
            Object for CodablockA symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CodablockF">
            <summary>
            Object for CodablockF symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Tlc39">
            <summary>
            Object for TLC39 symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Gs1DataBarOmniDirectional">
            <summary>
            Object for GS1 DataBar Omnidirectional symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Gs1DataBarLimited">
            <summary>
            Object for GS1 DataBar Limited symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Gs1DataBarExpanded">
            <summary>
            Object for GS1 DataBar Expanded symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Maxicode">
            <summary>
            Object for Maxicode symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Aztec">
            <summary>
            Object for Aztec symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Datamatrix">
            <summary>
            Object for Datamatrix symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.QrCode">
            <summary>
            Object for QR Code symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.Gs1Composite">
            <summary>
            Object for GS1 Composite symbology settings.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.HanXin">
            <summary>
            Object for Han Xin symbology settings.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.CSymbology.#ctor(System.Int32)">
            <summary>
            Constructor that create an instance of the CSymbology class. 
            When you create an instance of the <see cref="T:Intermec.DataCollection2.BarcodeReader"/> class,
            you also create an instance of the CSymbology class. 
            </summary>
            <param name="bcHandle">A handle that passed by BarcodeReader class.</param>
        </member>
        <member name="M:Intermec.DataCollection2.CSymbology.DisableAll">
            <summary>
            Disable all symbologies (except locked).
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.symbology.DisableAll();                            
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.symbology.DisableAll()
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub             
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.CSymbology.ResetFactoryDefault">
            <summary>
            Reset factory defaults settings.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.BarcodeReader bcr;
            
                                public frmBarcodeReader()
                                {
                                    InitializeComponent();
            
                                    try
                                    {
                                        bcr = new Intermec.DataCollection2.BarcodeReader();
                                        bcr.symbology.ResetFactoryDefault();                           
                                    }
                                    catch (BarcodeReaderException bcrexp)
                                    {
                                        MessageBox.Show(bcrexp.Message);
                                    }         
                                }                                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class BarcodeReader
                            Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                            Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    bcr = New Intermec.DataCollection2.BarcodeReader()
                                    bcr.symbology.ResetFactoryDefault()
                                Catch bcrexp As BarcodeReaderException
                                    MessageBox.Show(bcrexp.Message)
                                End Try
                            End Sub             
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPostnet">
            <summary>
            Defines attributes for decoding the Postnet symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685. It is not supported on EV12
            </para>
            </remarks>          
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPostnet.Enable">
            <summary>
            Enables decoding of Postnet.
            </summary>
            <value>
            Set to true to enable Postnet decoding, or set to false to disable decoding.
            </value>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Postnet.Enable = CSymbology.CPostnet.EEnable.Enable;                           
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Postnet.Enable = CSymbology.CPostnet.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPostnet.TransmitCheckDigit">
            <summary>
            Enables Postnet check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Postnet.TransmitCheckDigit = CSymbology.CPostnet.ETransmitCheckDigit.Enable;                           
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Postnet.TransmitCheckDigit = CSymbology.CPostnet.ETransmitCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPostnet.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P0. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Postnet.UserDefinedSymbologyId = "P0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Postnet.UserDefinedSymbologyId = "P0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPostnet.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is transmitted 
            as Ilt;code mark symbology ID&gt;lt;data&gt;.
            </summary> 
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Postnet.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Postnet.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPostnet.EEnable">
            <summary>
            An enum data type for the Enable postnet. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPostnet.EEnable.Disable">
            <summary>
            Disable postnet.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPostnet.EEnable.Enable">
            <summary>
            Enable postnet.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPostnet.ETransmitCheckDigit">
            <summary>
            An enum data type for the TransmitCheckDigit property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPostnet.ETransmitCheckDigit.Disable">
            <summary>
            Disable TransmitCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPostnet.ETransmitCheckDigit.Enable">
            <summary>
            Enable TransmitCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlanet">
            <summary>
            Defines attributes for decoding the Planet symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner and 
            associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685. It is not supported on EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlanet.Enable">
            <summary>
            Enables decoding of Planet.
            </summary>     
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Planet.Enable = CSymbology.CPlanet.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Planet.Enable = CSymbology.CPlanet.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlanet.TransmitCheckDigit">
            <summary>
            Enables Planet check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Planet.TransmitCheckDigit = CSymbology.CPlanet.ETransmitCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Planet.TransmitCheckDigit = CSymbology.CPlanet.ETransmitCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlanet.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P1. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Planet.UserDefinedSymbologyId = "P1"; 
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Planet.UserDefinedSymbologyId = "P1"                        
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlanet.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is transmitted 
            as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary> 
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Planet.CodeMark = "*";    
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Planet.CodeMark = "*"                   
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlanet.EEnable">
            <summary>
            An enum data type for the Enable planet.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlanet.EEnable.Disable">
            <summary>
            Disable Planet
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlanet.EEnable.Enable">
            <summary>
            Enable Planet
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlanet.ETransmitCheckDigit">
            <summary>
            An enum data type for the TransmitCheckDigit property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlanet.ETransmitCheckDigit.Disable">
            <summary>
            Enable TransmitCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlanet.ETransmitCheckDigit.Enable">
            <summary>
            Disable TransmitCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CBpo">
            <summary>
            Defines attributes for decoding the BPO (British Post Office) symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner and 
            associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685. It is not supported on EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CBpo.Enable">
            <summary>
            Enables decoding of BPO.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Bpo.Enable = CSymbology.CBpo.EEnable.Enable;
                                       }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Bpo.Enable = CSymbology.CBpo.EEnable.Enable                  
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CBpo.TransmitCheckDigit">
            <summary>
            Enables Planet check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Bpo.TransmitCheckDigit = CSymbology.CBpo.ETransmitCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Bpo.TransmitCheckDigit = CSymbology.CBpo.ETransmitCheckDigit.Enable                  
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CBpo.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P2. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Bpo.UserDefinedSymbologyId = "P2";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Bpo.UserDefinedSymbologyId = "P2"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CBpo.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is transmitted 
            as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary> 
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Bpo.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Bpo.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CBpo.EEnable">
            <summary>
            An enum data type for the Enable BPO.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CBpo.EEnable.Disable">
            <summary>
            Disable BPO
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CBpo.EEnable.Enable">
            <summary>
            Enable BPO
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CBpo.ETransmitCheckDigit">
            <summary>
            An enum data type for TransmitCheckDigit.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CBpo.ETransmitCheckDigit.Disable">
            <summary>
            Disable TransmitCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CBpo.ETransmitCheckDigit.Enable">
            <summary>
            Enable TransmitCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCanadaPost">
            <summary>
            Defines attributes for decoding the Canada Post symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and 
            is supported only by Intermec area imagers, such as it is not supported on EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCanadaPost.Enable">
            <summary>
            Enables decoding of Canada Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CanadaPost.Enable = CSymbology.CCanadaPost.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CanadaPost.Enable = CSymbology.CCanadaPost.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCanadaPost.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P3. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CanadaPost.UserDefinedSymbologyId = "P3";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CanadaPost.UserDefinedSymbologyId = "P3"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCanadaPost.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is transmitted 
            as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary> 
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CanadaPost.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CanadaPost.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCanadaPost.EEnable">
            <summary>
            An enum data type for Canada Post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCanadaPost.EEnable.Disable">
            <summary>
            Disable Canada post
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCanadaPost.EEnable.Enable">
            <summary>
            Enable Canada post
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAustralianPost">
            <summary>
            Defines attributes for decoding the Australia Post symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner and 
            associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is supported 
            only by Intermec area imagers, such as the EV12 is not supported.        
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAustralianPost.Enable">
            <summary>
            Enables decoding of Australia Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.AustralianPost.Enable = CSymbology.CAustralianPost.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.AustralianPost.Enable = CSymbology.CAustralianPost.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAustralianPost.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P3. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.AustralianPost.UserDefinedSymbologyId = "P3";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.AustralianPost.UserDefinedSymbologyId = "P3"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAustralianPost.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Australia Post. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.AustralianPost.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.AustralianPost.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAustralianPost.EEnable">
            <summary>
            An enum data type for Canada Post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAustralianPost.EEnable.Disable">
            <summary>
            Disable Australia Post decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAustralianPost.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CJapanPost">
            <summary>
            Defines attributes for decoding the Japan Post symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner and 
            associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is 
            supported only by Intermec area imagers, such as EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CJapanPost.Enable">
            <summary>
            Enables decoding of Japan Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.JapanPost.Enable = CSymbology.CJapanPost.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.JapanPost.Enable = CSymbology.CJapanPost.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CJapanPost.TransmitCheckDigit">
            <summary>
            Enables Japan Post check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.JapanPost.TransmitCheckDigit = CSymbology.CJapanPost.ETransmitCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.JapanPost.TransmitCheckDigit = CSymbology.CJapanPost.ETransmitCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CJapanPost.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P5. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.JapanPost.UserDefinedSymbologyId = "P5";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.JapanPost.UserDefinedSymbologyId = "P5"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CJapanPost.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.JapanPost.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.JapanPost.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CJapanPost.EEnable">
            <summary>
            An enum data type for Japan Post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CJapanPost.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CJapanPost.EEnable.Enable">
            <summary>
             Enable Japan Post decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CJapanPost.ETransmitCheckDigit">
            <summary>
            An enum data type for TransmitCheckDigit.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CJapanPost.ETransmitCheckDigit.Disable">
            <summary>
            Enable TransmitCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CJapanPost.ETransmitCheckDigit.Enable">
            <summary>
            Disable TransmitCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CDutchPost">
            <summary>
            Defines attributes for decoding the Dutch Post symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is 
            supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDutchPost.Enable">
            <summary>
            Enables decoding of Dutch Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.DutchPost.Enable = CSymbology.CDutchPost.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.DutchPost.Enable = CSymbology.CDutchPost.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDutchPost.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P4. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.DutchPost.UserDefinedSymbologyId = "P4";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.DutchPost.UserDefinedSymbologyId = "P4"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDutchPost.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Dutch Post. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.DutchPost.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.DutchPost.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CDutchPost.EEnable">
            <summary>
            An enum data type for enable Dutch post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDutchPost.EEnable.Disable">
            <summary>
            Disable Dutch Post decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDutchPost.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CSwedenPost">
            <summary>
            Defines attributes for decoding the Sweden Post symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is 
            supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CSwedenPost.Enable">
            <summary>
            Enables decoding of Sweden Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.SwedenPost.Enable = CSymbology.CSwedenPost.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.SwedenPost.Enable = CSymbology.CSwedenPost.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CSwedenPost.CodeMark">
            <summary>
            Set one ASCII character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.SwedenPost.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.SwedenPost.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CSwedenPost.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P7. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.SwedenPost.UserDefinedSymbologyId = "P7";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.SwedenPost.UserDefinedSymbologyId = "P7"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CSwedenPost.EEnable">
            <summary>
            An enum data type for enable Sweden post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CSwedenPost.EEnable.Disable">
            <summary>
            Disable Sweden Post decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CSwedenPost.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CKOREANPOST">
            <exclude /> 
            <summary>
            Defines attributes for decoding the Sweden Post symbology. 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.Enable">
            <summary>
            Enables decoding of Korean Post.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Korean post. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 
            are used differently depending on this property.
            </summary>
            <remarks>
            <para>
            Minimum length for Code 39 bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;start&gt; + &lt;bar code data&gt; + &lt;check digit&gt; + &lt;stop&gt;.
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>            
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B1. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>  
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CKOREANPOST.EEnable">
            <summary>
            An enum data type for enable <see cref="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.EEnable.Enable"/> post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.EEnable.Disable">
            <summary>
            Disable decode
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.EEnable.Enable">
            <summary>
            Enable Sweden Post
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CKOREANPOST.ELengthMode">
            <summary>
            An enum data type for enable <see cref="P:Intermec.DataCollection2.CSymbology.CKOREANPOST.LengthMode"/> post.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.ELengthMode.Length1Minimum">
            <summary>
            Sets length1 as minimum length.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.ELengthMode.Lengths123Fixed">
            <summary>
            Sets length1, length2 and length3 as fixed lengths. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CKOREANPOST.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Sets length1 as the minimum length and length2 as the maximum.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInfomail">
            <summary>
            Defines attributes for decoding the Infomail symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is 
            supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInfomail.Enable">
            <summary>
            Enables decoding of Infomail.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Infomail.Enable = CSymbology.CInfomail.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Infomail.Enable = CSymbology.CInfomail.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInfomail.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Infomail. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Infomail.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Infomail.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInfomail.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P8. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Infomail.UserDefinedSymbologyId = "P8";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Infomail.UserDefinedSymbologyId = "P8"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInfomail.EEnable">
            <summary>
            An enum data type for enable informail.
            </summary>          
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInfomail.EEnable.Disable">
            <summary>
            Disable Infomail decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInfomail.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CIntelligentMail">
            <summary>
            Defines attributes for decoding the Intelligent Mail symbology
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer and is 
            supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CIntelligentMail.Enable">
            <summary>
            Enables decoding of Intelligent Mail.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.IntelligentMail.Enable = CSymbology.CIntelligentMail.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.IntelligentMail.Enable = CSymbology.CIntelligentMail.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CIntelligentMail.CodeMark">
            <summary>
            Set one ASCII character code mark symbology identifier for Intelligent Mail. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.IntelligentMail.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.IntelligentMail.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CIntelligentMail.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P8. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.IntelligentMail.UserDefinedSymbologyId = "P8";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.IntelligentMail.UserDefinedSymbologyId = "P8"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CIntelligentMail.EEnable">
            <summary>
            An enum data type for enable Intelligent mail.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CIntelligentMail.EEnable.Disable">
            <summary>
            Disable Intelligent Mail decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CIntelligentMail.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar">
            <summary>
            Defines attributes for decoding the Codabar symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.Enable">
            <summary>
            Enables decoding of Codabar.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.Enable = CSymbology.CCodabar.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.Enable = CSymbology.CCodabar.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.CodeMark">
            <summary>
            Compose one ASCII character code mark symbology identifier for Codabar. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.VerifyCheckDigit">
            <summary>
            Enables Codabar check digit transmission.
            </summary>
            <remarks>
            Length verification as defined in <see cref="P:Intermec.DataCollection2.CSymbology.CCodabar.LengthMode"/> does not include the 
            check digit character.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.VerifyCheckDigit = CSymbology.CCodabar.EVerifyCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.VerifyCheckDigit = CSymbology.CCodabar.EVerifyCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 are 
            used differently depending on this property.
            </summary>
            <remarks>
            <para>
            Minimum length for Codabar is 3 characters.
            </para>
            <para>
            Bar code length = &lt;start&gt; + &lt;bar code data&gt; + [check digit] + &lt;stop&gt;.
            </para>
            <para>When length1, length2, length3, and length mode are set to 0, no length 
            is specified and any length of characters is accepted.
            </para>
            </remarks>  
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.LengthMode = CSymbology.CCodabar.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.LengthMode = CSymbology.CCodabar.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.TransmitCheckDigit">
            <summary>
            Enables Codabar check digit transmission.
            </summary>
            <remarks>
            Length verification as defined in <see cref="P:Intermec.DataCollection2.CSymbology.CCodabar.LengthMode"/> does not include the 
            check digit character.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.TransmitCheckDigit = CSymbology.CCodabar.ETransmitCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.TransmitCheckDigit = CSymbology.CCodabar.ETransmitCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.StartStopTransmission">
            <summary>
            Specifies start/stop transmission characters.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.StartStopTransmission = CSymbology.CCodabar.EStartStopTransmit.abcd;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.StartStopTransmission = CSymbology.CCodabar.EStartStopTransmit.abcd
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.ClsiLibrarySystem">
            <summary>
            <para>Enables Codabar CLSI library system.</para>
            <para>
            The CLSI library system for Codabar inserts spaces after characters 1, 5, 
            and 10 in the 14-character label. Start/stop characters can be transmitted 
            or not transmitted as required. This system is used by some libraries in the USA.
            </para>
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.ClsiLibrarySystem = CSymbology.CCodabar.EClsiLibrarySystem.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.ClsiLibrarySystem = CSymbology.CCodabar.EClsiLibrarySystem.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.Concatenation">
            <summary>
            Enables concatenation. Two adjacent Codabar bar codes scanned in a single sweep 
            can be concatenated and sent as a single message. You can also choose to transmit 
            only concatenated data, or all data.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.Concatenation = CSymbology.CCodabar.EConcatenation.TransmitConcatOnly;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.Concatenation = CSymbology.CCodabar.EConcatenation.TransmitConcatOnly
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.ConcatenationMode">
            <summary>
            Specifies concatenation type. Concatenation is applied differently 
            depending on this property.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.ConcatenationMode = CSymbology.CCodabar.EConcatenationMode.Abc;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.ConcatenationMode = CSymbology.CCodabar.EConcatenationMode.Abc
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodabar.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B7. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Codabar.UserDefinedSymbologyId = "B7";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Codabar.UserDefinedSymbologyId = "B7"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EEnable">
            <summary>
            An enum data type for enable Codabar. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EEnable.Disable">
            <summary>
            Disable Codabar decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EVerifyCheckDigit">
            <summary>
            An enum data type for enable VerifyCheckDigit. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EVerifyCheckDigit.Disable">
            <summary>
            Disable VerifyCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EVerifyCheckDigit.Enable">
            <summary>
            Enable EVerifyCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.ELengthMode">
            <summary>
            An enum data type for the lengthMode property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, 
            length2 and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and not 
            longer than the maximum length specified by length2 are read. Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.ETransmitCheckDigit">
            <summary>
            An enum data type for the TransmitCheckDigit property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.ETransmitCheckDigit.Disable">
            <summary>
            Disable TransmitCheckDigit
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.ETransmitCheckDigit.Enable">
            <summary>
            Enable TransmitCheckDigit
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit">
            <summary>
            An enum data type for the StartStopTransmission property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit.Disable">
            <summary>Not transmitted.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit.abcd">
            <summary>a, b, c, d </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit.ABCD">
            <summary>A, B, C, D</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit.abcdtnAsteriskE">
            <summary>a, b, c, d / t, n, *, e </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EStartStopTransmit.Dc1Dc2Dc3Dc4">
            <summary>DC1, DC2, DC3, DC4</summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EClsiLibrarySystem">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCodabar.ClsiLibrarySystem"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EClsiLibrarySystem.Disable">
            <summary>
            Disable the library system
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EClsiLibrarySystem.Enable">
            <summary>
            Enable Codabar CLSI library system
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenation">
            <summary>
            An enum data type for the Concatenation property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenation.Disable">
            <summary>
            Disables concatenation
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenation.TransmitConcatOnly">
            <summary>
            Only concatenated codes are transmitted. Non-concatenated codes are ignored.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenation.TransmitConcatOrSingle">
            <summary>
            All bar code data is transmitted whether concatenated or not.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenationMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCodabar.ConcatenationMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenationMode.NoRestriction">
            <summary>
            Concatenates all adjacent codes. Intermediate start/stop characters are not transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenationMode.SecondCodeStartEquals1stCodeStop">
            <summary>
            Second code start = first code stop
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodabar.EConcatenationMode.Abc">
            <summary>
            American Blood Commission (ABC).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode93">
            <summary>
            Defines attributes for decoding the Code 93 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.Enable">
            <summary>
            Enables decoding of Code 93.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.Enable = CSymbology.CCode93.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.Enable = CSymbology.CCode93.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Code93. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 
            are used differently depending on this property.
            </summary>
            <remarks>
            <para>
            Minimum length for Code 39 bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;start&gt; + &lt;bar code data&gt; + &lt;check digit&gt; + &lt;stop&gt;.
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is specified 
            and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.LengthMode = CSymbology.CCode93.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.LengthMode = CSymbology.CCode93.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode93.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B6. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code93.UserDefinedSymbologyId = "B6"; 
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code93.UserDefinedSymbologyId = "B6";                        
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode93.EEnable">
            <summary>
            An enum data type for the code93 <see cref="F:Intermec.DataCollection2.CSymbology.CCode93.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode93.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode93.EEnable.Enable">
            <summary>
            Enable Code 39 decoding
            </summary>               
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode93.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode93.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode93.ELengthMode.Length1Minimum">
            <summary>
            Sets length1 as minimum length.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode93.ELengthMode.Lengths123Fixed">
            <summary>
            Sets length1, length2 and length3 as fixed lengths. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode93.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Sets length1 as the minimum length and length2 as the maximum.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39">
            <summary>
            Defines attributes for decoding the Code 39 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.Enable">
            <summary>
            Enables decoding of Code 39.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.Enable = CSymbology.CCode39.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.Enable = CSymbology.CCode39.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.FullAsciiConversion">
            <summary>
            Enables full ASCII conversion. If enabled, Code 39 bar codes are transmitted 
            with an extended character set. The full 128-character set is encoded in 
            Code 39 by combining two regular Code 39 characters.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.FullAsciiConversion = CSymbology.CCode39.EFullAsciiConversion.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.FullAsciiConversion = CSymbology.CCode39.EFullAsciiConversion.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.StartStopTransmission">
            <summary>
            Enables start/stop transmission. Start/stop transmission does not 
            alter full ASCII conversion or length count.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.StartStopTransmission = CSymbology.CCode39.EStartStopTransmission.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.StartStopTransmission = CSymbology.CCode39.EStartStopTransmission.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.StartCharacter">
            <summary>
            Sets and gets the Code 39 start character.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.StartCharacter = CSymbology.CCode39.EStartCharacter.AsterickOnly;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.StartCharacter = CSymbology.CCode39.EStartCharacter.AsterickOnly
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.VerifyCheckDigit">
            <summary>
            Sets and gets Code 39 check digit verification types.
            </summary>
            <remarks>
            Activating one type of check digit deactivates all other check digits.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.VerifyCheckDigit = CSymbology.CCode39.EVerifyCheckDigit.FrenchCip;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.VerifyCheckDigit = CSymbology.CCode39.EVerifyCheckDigit.FrenchCip
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.TransmitCheckDigit">
            <summary>
            Enables Code 39 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.TransmitCheckDigit = CSymbology.CCode39.ETransmitCheckDigit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.TransmitCheckDigit = CSymbology.CCode39.ETransmitCheckDigit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.ReadingRange">
            <summary>
            Sets and gets the reading range.
            </summary>
            <remarks>
            Use Extended reading range when long-distance bar code reading is 
            important for an application, as read distances are significantly increased.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.ReadingRange = CSymbology.CCode39.EReadingRange.Normal;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.ReadingRange = CSymbology.CCode39.EReadingRange.Normal
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.UnconventionalCode39">
            <summary>
            Enables and disables decoding of Code 39 with unconventional dimensions, 
            such as large intercharacter gaps or nonstandard ratios between narrow 
            and wide elements.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.UnconventionalCode39 = CSymbology.CCode39.EUnconventionalCode39.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.UnconventionalCode39 = CSymbology.CCode39.EUnconventionalCode39.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.ReadingTolerance">
            <summary>
            Sets and gets the tolerance level for reading "hard to read" bar codes.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.ReadingTolerance = CSymbology.CCode39.EReadingTolerance.Medium;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.ReadingTolerance = CSymbology.CCode39.EReadingTolerance.Medium
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 
            are used differently depending on this property.
            </summary>
            <remarks>
            <para>
            Minimum length for Code 39 bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;start&gt; + &lt;bar code data&gt; + &lt;check digit&gt; + &lt;stop&gt;.
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.LengthMode = CSymbology.CCode39.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.LengthMode = CSymbology.CCode39.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B1. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.UserDefinedSymbologyId = "B1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.UserDefinedSymbologyId = "B1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode39.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Code 39. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code39.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code39.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EEnable">
            <summary>
            An enum data type for the code39 <see cref="F:Intermec.DataCollection2.CSymbology.CCode39.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EEnable.Enable">
            <summary>
            Enable Code 39 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EFullAsciiConversion">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.FullAsciiConversion"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EFullAsciiConversion.Disable">
            <summary>
            Disable full ASCII conversion.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EFullAsciiConversion.Enable">
            <summary>
            Enables full ASCII conversion. Code 39 bar codes are transmitted with the 
            full 128-character set, encoded in Code 39 by combining two regular characters.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EStartStopTransmission">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.StartStopTransmission"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EStartStopTransmission.Disable">
            <summary>
            Disable StartStopTransmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EStartStopTransmission.Enable">
            <summary>
            Enable StartStopTransmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EStartCharacter">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.StartCharacter"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EStartCharacter.DollarOnly">
            <summary>
            Uses "$" as Code 39 start character.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EStartCharacter.AsteriskOnly">
            <summary>
            Uses "*" as Code 39 start character.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EStartCharacter.DollarAndAsterisk">
            <summary>
            Uses "$" and "*" as start characters.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EVerifyCheckDigit">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.VerifyCheckDigit"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EVerifyCheckDigit.Disable">
            <summary>
            Disable Code 39 check digit verification.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EVerifyCheckDigit.Modulo43">
            <summary>
            Standard check digit for Code 39 using the Modulo 43 algorithm, 
            providing extra validation of data.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EVerifyCheckDigit.FrenchCip">
            <summary>
            Check digit used by French pharmaceutical industry. Used only for 
            codes with 7 characters.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EVerifyCheckDigit.ItalianCpi">
            <summary>
            Check digit used by Italian pharmaceutical industry, also known 
            as Code 32. If the checksum is not validated, the bar code is 
            transmitted as standard Code 39.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.ETransmitCheckDigit">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.TransmitCheckDigit"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.ETransmitCheckDigit.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.ETransmitCheckDigit.Enable">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EReadingRange">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.ReadingRange"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EReadingRange.Normal">
            <summary>
            Sets Code 39 reading range to standard.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EReadingRange.Extended">
            <summary>
            Sets Code 39 reading range to extended. Use this mode when 
            long-distance reading is important to your application.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EUnconventionalCode39">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.UnconventionalCode39"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EUnconventionalCode39.Disable">
            <summary>
            Disable decode of unconventional code 39 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EUnconventionalCode39.Enable">
            <summary>
            Enable decode of unconventional code 39 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.EReadingTolerance">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.ReadingTolerance"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EReadingTolerance.High">
            <summary>
            Sets high reading tolerance.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EReadingTolerance.Medium">
            <summary>
            Sets medium reading tolerance
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.EReadingTolerance.Low">
            <summary>
            Sets low reading tolerance
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode39.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode39.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.ELengthMode.Length1Minimum">
            <summary>
            Sets length1 as minimum length.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.ELengthMode.Lengths123Fixed">
            <summary>
            Sets length1, length2 and length3 as fixed lengths. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode39.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Sets length1 as the minimum length and length2 as the maximum.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128">
            <summary>
            Defines attributes for decoding the Code 128 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.EnableCode128">
            <summary>
            Enables decoding of Code 128.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.EnableCode128 = CSymbology.CCode128.EEnableCode128.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.EnableCode128 = CSymbology.CCode128.EEnableCode128.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.EnableIsbt128">
            <summary>
            Enables decoding of ISBT-128.
            </summary>
            <remarks>
            To avoid confusion, Intermec recommends disabling Code 128 and GS1-128 
            if you enable ISBT-128.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.EnableIsbt128 = CSymbology.CCode128.EEnableIsbt128.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.EnableIsbt128 = CSymbology.CCode128.EEnableIsbt128.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.EnableGs1With128">
            <summary>
            Enables decoding of GS1-128.
            </summary>
            <remarks>
            Enable GS1-128 to decode Code 128 bar codes with FNC1 in first position. 
            This symbology is subject to identical Code 128 constraints such as 
            length and reading tolerance. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.EnableGs1With128 = CSymbology.CCode128.EEnableGs1With128.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.EnableGs1With128 = CSymbology.CCode128.EEnableGs1With128.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.UnconventionalGs1With128">
            <summary>
            Enables UnconventionalGs1 128
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.UnconventionalGs1With128 = CSymbology.CCode128.EUnconventionalGs1With128.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.UnconventionalGs1With128 = CSymbology.CCode128.EUnconventionalGs1With128.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.ReadingRange">
            <summary>
            Sets and gets the reading range.
            </summary>
            <remarks>
            Support by EA11, EA21, EA30, and Camera.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.ReadingRange = CSymbology.CCode128.EReadingRange.Normal;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.ReadingRange = CSymbology.CCode128.EReadingRange.Normal
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Code128CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Code 128. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Code128CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Code128CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Gs1With128CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1-128. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Gs1With128CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Gs1With128CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.CheckDigitVerify">
            <summary>
            Enables French CIP check digit verification, used in the French pharmaceutical industry.
            </summary>
            <remarks>
            <para>
            If French CIP check digit is active, decoding only succeeds if barcode length is 
            14 characters, start is C type, and CIP check digit is verified.
            </para>
            <para>
            French CIP verification does not force a minimum length of 14 characters.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.CheckDigitVerify = CSymbology.CCode128.ECheckDigitVerify.FrenchCip;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.CheckDigitVerify = CSymbology.CCode128.ECheckDigitVerify.FrenchCip
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.ReadingTolerance">
            <summary>
            Sets and gets the tolerance level for reading "hard to read" bar codes.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.ReadingTolerance = CSymbology.CCode128.EReadingTolerance.Medium;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.ReadingTolerance = CSymbology.CCode128.EReadingTolerance.Medium
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <remarks>
            <para>
            When length1, length2, length3, and length mode are set to 0, no 
            length is specified and any bar code length is accepted.
            </para>
            <para>
            Minimum length for Code 128 or GS1-128 is 1 character. Bar code 
            length = &lt;bar code data&gt;.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <remarks>
            <para>
            When length1, length2, length3, and length mode are set to 0, no 
            length is specified and any bar code length is accepted.
            </para>
            <para>
            Minimum length for Code 128 or GS1-128 is 1 character. Bar code 
            length = &lt;bar code data&gt;.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <remarks>
            <para>
            When length1, length2, length3, and length mode are set to 0, no 
            length is specified and any bar code length is accepted.
            </para>
            <para>
            Minimum length for Code 128 or GS1-128 is 1 character. Bar code 
            length = &lt;bar code data&gt;.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 are 
            used differently depending on this property.
            </summary>
            <remarks>
            When length1, length2, length3, and length mode are set to 0, no length 
            is specified and any bar code length is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.LengthMode = CSymbology.CCode128.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.LengthMode = CSymbology.CCode128.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Gs1With128Identifier">
            <summary>
            Enables inclusion of the AIM identifier characters. When enabled, 
            the AIM identifier "]C1" is added to the beginning of each GS1-128 bar code, 
            as in ]C1&lt;data&gt;.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Gs1With128Identifier = CSymbology.CCode128.EGs1With128Identifier.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Gs1With128Identifier = CSymbology.CCode128.EGs1With128Identifier.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Fnc1Conversion">
            <summary>
            <para>
            One ASCII character (or a string in hex notation) specifying the 
            Code 128/GS1-128/ISBT FNC1 separator character.
            </para>
            <para>
            Applies only to FNC1 in first or second position (converted FNC1 
            character not transmitted).
            </para>
            </summary>
            <remarks>
            This separator is used when multiple identifiers and their fields 
            are concatenated. This is useful for keyboard wedge interfaces where 
            the &lt;GS&gt; character cannot be transmitted.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Fnc1Conversion = ",";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Fnc1Conversion = ","
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Isbt128ConcatTrans">
            <summary>
            Selects the transmission mode for concatenated ISBT-128 bar codes.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Isbt128ConcatTrans = CSymbology.CCode128.EIsbt128ConcatTrans.ConcatenatedCodes;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Isbt128ConcatTrans = CSymbology.CCode128.EIsbt128ConcatTrans.ConcatenatedCodes
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Isbt128Concatenation">
            <summary>
            Enables ISBT-128 concatenation.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Isbt128Concatenation = CSymbology.CCode128.EIsbt128Concatenation.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Isbt128Concatenation = CSymbology.CCode128.EIsbt128Concatenation.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.GtinCompliant">
            <summary>
            Enables GTIN processing for GS1-128.
            </summary>
            <remarks>
            Only GS1-128 bar codes of at least 16 characters that begin with "01" 
            are processed. Non-compliant GS1-128 bar codes are not read when GTIN 
            processing is enabled.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.GtinCompliant = CSymbology.CCode128.EGtinCompliant.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.GtinCompliant = CSymbology.CCode128.EGtinCompliant.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Code128UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. If there is no value specified, 
            and symbology ID transmission is active, no symbology ID is sent for 
            this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Code128UserDefinedSymbologyId = "B7";   
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Code128UserDefinedSymbologyId = "B7"                       
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode128.Gs1With128UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C9. 
            If there is no value specified, and symbology ID transmission is active, 
            no symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code128.Gs1With128UserDefinedSymbologyId = "C9";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code128.Gs1With128UserDefinedSymbologyId = "C9"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EEnableCode128">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.EnableCode128"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableCode128.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableCode128.Enable">
            <summary>
            Enable Code 128 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EEnableIsbt128">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.EnableIsbt128"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableIsbt128.Disable">
            <summary>
            Disable ISBT128
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableIsbt128.Enable">
            <summary>
            Enable ISBT128
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EEnableGs1With128">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.EnableGs1With128"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableGs1With128.Disable">
            <summary>
            Disable GS1 128
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EEnableGs1With128.Enable">
            <summary>
            Enable GS1 128
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EUnconventionalGs1With128">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.UnconventionalGs1With128"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EUnconventionalGs1With128.Disable">
            <summary>
            Disable UnconventionalGs1 128
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EUnconventionalGs1With128.Enable">
            <summary>
            Enable UnconventionalGs1 128
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EReadingRange">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.ReadingRange"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EReadingRange.Normal">
            <summary>
            Sets Code 128 reading range to standard.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EReadingRange.Extended">
            <summary>
            Sets Code 128 reading range to extended. Use this mode when 
            long-distance reading is important to your application.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.ECheckDigitVerify">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.CheckDigitVerify"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.ECheckDigitVerify.Disable">
            <summary>
            Disable Code 3128 check digit verification.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.ECheckDigitVerify.FrenchCip">
            <summary>
            Enable French CIP check digit verification.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EReadingTolerance">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.ReadingTolerance"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EReadingTolerance.High">
            <summary>
            Sets high reading tolerance. Most permissive - reads codes of varying quality.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EReadingTolerance.Medium">
            <summary>
            Sets medium reading tolerance.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EReadingTolerance.Low">
            <summary>
            Sets low reading tolerance. Least permissive - reads only codes that meet 
            the standard for the symbology.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by Length1 and longer are read. 
            Length2 and Length3 are not used
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by Length1, Length2 
            and Length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by Length1 
            and not longer than the maximum length specified by Length2 are read. 
            Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EGs1With128Identifier">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.Gs1With128Identifier"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EGs1With128Identifier.Disable">
            <summary>
            Disable GS1 128 Identifier
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EGs1With128Identifier.Enable">
            <summary>
            Enable GS1 128 Identifier
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128ConcatTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.Isbt128ConcatTrans"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128ConcatTrans.Disable">
            <summary>
            Codes are always transmitted as single codes 
            (no concatenation).
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128ConcatTrans.ConcatenatedCodes">
            <summary>
            Only transmits concatenated codes, does not transmit 
            single codes.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128ConcatTrans.ConcatOrSingleCodes">
            <summary>
            Single codes and concatenated codes are both transmitted. 
            If the product can only "see" one code of a code pair 
            it will send that code as a single code. If the product 
            "sees" both codes of a pair it will concatenate the 
            codes depending on the concatenation mode setting.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128Concatenation">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.Isbt128Concatenation"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128Concatenation.Disable">
            <summary>
            Disable concatenation
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EIsbt128Concatenation.Enable">
            <summary>
            Enable ISBT-128 concatenation
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode128.EGtinCompliant">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode128.GtinCompliant"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EGtinCompliant.Disable">
            <summary>
            Disable processing
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode128.EGtinCompliant.Enable">
            <summary>
            Enable GTIN processing
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5">
            <summary>
            Defines attributes for decoding the Interleaved 2 of 5 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the 
            imager/scanner and associated firmware installed in your 
            Intermec computer, and on the current symbology settings as 
            configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.Enable">
            <summary>
            Enables decoding of Interleaved 2 of 5.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding is possible for 
            all bar codes read. Some options (such as length or check digit) 
            may prevent decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.Enable = CSymbology.CInterleaved2Of5.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.Enable = CSymbology.CInterleaved2Of5.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ReadingRange">
            <summary>
            Sets and gets the reading range.
            </summary>
            <remarks>
            <para>Use Extended reading range when long-distance bar code 
            reading is important for an application, as read distances are 
            significantly increased.
            </para>
            <para>
            Support on 70 series(EV12, EA30, SR Tethered, Camera), CN50(EA11, EA21), and CS40(EA11).
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.ReadingRange = CSymbology.CInterleaved2Of5.EReadingRange.Normal;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.ReadingRange = CSymbology.CInterleaved2Of5.EReadingRange.Normal
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Interleaved 2 of 5. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.CheckDigitVerify">
            <summary>
            Specifies Interleaved 2 of 5 check digit verification type.
            </summary>
            <remarks>
            Activating one type of check digit deactivates all other check digits.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.CheckDigitVerify = CSymbology.CInterleaved2Of5.ECheckDigitVerify.French_CIP;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.CheckDigitVerify = CSymbology.CInterleaved2Of5.ECheckDigitVerify.French_CIP
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ReadingTolerance">
            <summary>
            Sets the tolerance level for reading "hard to read" bar codes.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.ReadingTolerance = CSymbology.CInterleaved2Of5.EReadingTolerance.Medium;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.ReadingTolerance = CSymbology.CInterleaved2Of5.EReadingTolerance.Medium
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.LengthMode">
            <summary>
            Specifies acceptable bar code length.
            </summary>
            <remarks>
            <para>
            Minimum length for Interleaved 2 of 5 bar codes is 4 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt; + [check digit].
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, 
            no length is specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.LengthMode = CSymbology.CInterleaved2Of5.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.LengthMode = CSymbology.CInterleaved2Of5.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.CheckDigitTransmission">
            <summary>
            Enables Interleaved 2 of 5 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.CheckDigitTransmission = CSymbology.CInterleaved2Of5.ECheckDigitTransmission.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.CheckDigitTransmission = CSymbology.CInterleaved2Of5.ECheckDigitTransmission.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B2.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Interleaved2Of5.UserDefinedSymbologyId = "B2";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Interleaved2Of5.UserDefinedSymbologyId = "B2"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EEnable">
            <summary>
            An enum data type for the Interleaved 2 of 5 <see cref="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EEnable.Enable">
            <summary>
            Enable Interleaved 2 of 5 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingRange">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ReadingRange"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingRange.Normal">
            <summary>
            Sets reading range to standard.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingRange.Extended">
            <summary>
            Sets reading range to extended. Use this mode when long-distance 
            reading is important to your application.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitVerify">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.CheckDigitVerify"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitVerify.Disable">
            <summary>
            No check digit verification
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitVerify.Modulo10">
            <summary>
            Check digit usually reserved for Interleaved 2 of 5 that applies 
            the Modulo 10 algorithm.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitVerify.French_CIP">
            <summary>
            Check digit used for the French pharmaceutical industry. Used only 
            for codes with 7 characters.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingTolerance">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ReadingTolerance"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingTolerance.High">
            <summary>
            Scanner reads codes of variable quality. This is the most permissive mode.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingTolerance.Medium">
            <summary>
            Medium permissiveness.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.EReadingTolerance.Low">
            <summary>
            Scanner reads only high quality codes that meet the official 
            Interleaved 2 of 5 standards.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 
            and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and 
            not longer than the maximum length specified by length2 are read. 
            Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitTransmission">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.CheckDigitTransmission"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitTransmission.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CInterleaved2Of5.ECheckDigitTransmission.Enable">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMatrix2Of5">
            <summary>
            Defines attributes for decoding the Matrix 2 of 5 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.Enable">
            <summary>
            Enables decoding of Matrix 2 of 5.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.Enable = CSymbology.CMatrix2Of5.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.Enable = CSymbology.CMatrix2Of5.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.StartStop">
            <summary>
            Sets the start and stop type.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.StartStop = CSymbology.CMatrix2Of5.EStartStop.Regular;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.StartStop = CSymbology.CMatrix2Of5.EStartStop.Regular
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark 
            is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.LengthMode">
            <summary>
            Specifies the length mode type.
            </summary>
            <remarks>
            <para>
            Use length1, length2, and length3 to compose acceptable bar codes depending 
            on the length mode used. Minimum length for Matrix 2 of 5 bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt;.
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.LengthMode = CSymbology.CMatrix2Of5.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.LengthMode = CSymbology.CMatrix2Of5.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B4. 
            If no value is specified and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Matrix2Of5.UserDefinedSymbologyId = "B4";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Matrix2Of5.UserDefinedSymbologyId = "B4"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EEnable">
            <summary>
            An enum data type for <see cref="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EEnable.Enable"/> Matrix 2 of 5.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EEnable.Enable">
            <summary>
            Enable Matrix 2 of 5 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EStartStop">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.StartStop"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EStartStop.Regular">
            <summary>
            Enables start/stop characters. Checksum is not transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.EStartStop.ChinaPost">
            <summary>
            Start/stop characters are not transmitted, but the checksum is transmitted.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMatrix2Of5.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMatrix2Of5.LengthMode"/> property.
            </summary>            
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 
            and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMatrix2Of5.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and 
            not longer than the maximum length specified by length2 are read. 
            Length3 is not used. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMsi">
            <summary>
            Defines attributes for decoding the MSI symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.Enable">
            <summary>
            Enables decoding of MSI.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding is possible for all bar codes read. 
            Some options (such as length or check digit) may prevent decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.Enable = CSymbology.CMsi.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.Enable = CSymbology.CMsi.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.CheckDigitVerification">
            <summary>
            Specifies MSI check digit verification type.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.CheckDigitVerification = CSymbology.CMsi.ECheckDigitVerification.DoubleModulo10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.CheckDigitVerification = CSymbology.CMsi.ECheckDigitVerification.DoubleModulo10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.LengthMode">
            <summary>
            Specifies acceptable bar code length.
            </summary>
            <remarks>
            <para>
            Use length1, length2 and length3 to compose acceptable bar code lengths 
            depending on the length mode used. Minimum length for MSI bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt; + [check digit].
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.LengthMode = CSymbology.CMsi.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.LengthMode = CSymbology.CMsi.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.CheckDigitTrans">
            <summary>
            Enables MSI check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.CheckDigitTrans = CSymbology.CMsi.ECheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.CheckDigitTrans = CSymbology.CMsi.ECheckDigitTrans.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMsi.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B8. 
            If no value is specified and symbology ID transmission is active, no symbology 
            ID will be sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Msi.UserDefinedSymbologyId = "B8";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Msi.UserDefinedSymbologyId = "B8"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMsi.EEnable">
            <summary>
            An enum data type for <see cref="F:Intermec.DataCollection2.CSymbology.CMsi.EEnable.Enable"/> MSI.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.EEnable.Enable">
            <summary>
            Enable MSI decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitVerification">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMsi.CheckDigitVerification"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitVerification.Modulo10">
            <summary>
            Check digit usually used for MSI that applies the Modulo 10 algorithm.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitVerification.DoubleModulo10">
            <summary>
            MSI bar code has two Modulo 10 checksum digits.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMsi.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMsi.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 
            and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and 
            not longer than the maximum length specified by length2 are read. Length3 is not used. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMsi.CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitTrans.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMsi.ECheckDigitTrans.Enable">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlessey">
            <summary>
            Defines attributes for decoding the Plessey symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner and 
            associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.Enable">
            <summary>
            Enables decoding of Plessey bar codes.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding is possible for all 
            bar codes read. Some options (such as length) may prevent decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.Enable = CSymbology.CPlessey.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.Enable = CSymbology.CPlessey.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.UnconventionalStop">
            <summary>
            Enables or disables unconventional stop.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.UnconventionalStop = CSymbology.CPlessey.EUnconventionalStop.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.UnconventionalStop = CSymbology.CPlessey.EUnconventionalStop.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is transmitted 
            as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.LengthMode">
            <summary>
            Specifies acceptable bar code length.
            </summary>
            <remarks>
            <para>
            Minimum length for Plessey bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt; + [check digit].
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.LengthMode = CSymbology.CPlessey.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.LengthMode = CSymbology.CPlessey.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.CheckDigitTrans">
            <summary>
            Enables Plessey check digit transmission.
            </summary>
            <remarks>
            Length counts are not impacted by check digit transmission.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.CheckDigitTrans = CSymbology.CPlessey.ECheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.CheckDigitTrans = CSymbology.CPlessey.ECheckDigitTrans.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPlessey.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C2. 
            If no value is specified and symbology ID transmission is active, no symbology ID 
            is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Plessey.UserDefinedSymbologyId = "C2";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Plessey.UserDefinedSymbologyId = "C2"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlessey.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CPlessey.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.EEnable.Enable">
            <summary>
            Enable Plessey decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlessey.EUnconventionalStop">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPlessey.UnconventionalStop"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.EUnconventionalStop.Disable">
            <summary>
            Disable unconventional stop
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.EUnconventionalStop.Enable">
            <summary>
            Enable unconventional stop.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlessey.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPlessey.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 
            and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 
            and not longer than the maximum length specified by length2 are read. 
            Length3 is not used. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPlessey.ECheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPlessey.CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.ECheckDigitTrans.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPlessey.ECheckDigitTrans.Enable">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5">
            <summary>
            Defines attributes for decoding the Standard 2 of 5 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual. 
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Enable">
            <summary>
            Enables decoding of Standard 2 of 5.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding is possible for all bar codes read. 
            Some options (such as length or check digit) may prevent decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.Enable = CSymbology.CStandard2Of5.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.Enable = CSymbology.CStandard2Of5.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Code 2 of 5. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.CheckDigitVerification">
            <summary>
            Specifies whether or not to verify Standard 2 of 5 using a Modulo 10 algorithm.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.CheckDigitVerification = CSymbology.CStandard2Of5.ECheckDigitVerification.Modulo10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.CheckDigitVerification = CSymbology.CStandard2Of5.ECheckDigitVerification.Modulo10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length2 and length3 are used differently 
            depending on this property.
            </summary>
            <remarks>
            <para>
            Minimum length for Code 2 of 5 bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt; + [check digit].
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.LengthMode = CSymbology.CStandard2Of5.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.LengthMode = CSymbology.CStandard2Of5.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.CheckDigitTrans">
            <summary>
            Enables Standard 2 of 5 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.CheckDigitTrans = CSymbology.CStandard2Of5.ECheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.CheckDigitTrans = CSymbology.CStandard2Of5.ECheckDigitTrans.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Format">
            <summary>
            Specifies the Code 2 of 5 format type to decode.
            </summary>
            <remarks>
            If you specify Computer Identics format for this property, Intermec recommends 
            you disable Interleaved 2 of 5 decoding to reduce the risk of incorrect decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.Format = CSymbology.CStandard2Of5.EFormat.CompIdentics4SsBars;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.Format = CSymbology.CStandard2Of5.EFormat.CompIdentics4SsBars
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B5. 
            If no value is specified and symbology ID transmission is active, then no symbology 
            ID is sent for this symbology only. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Standard2Of5.UserDefinedSymbologyId = "B5";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Standard2Of5.UserDefinedSymbologyId = "B5"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.EEnable.Enable"/> Standard 2 of 5.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.EEnable.Enable">
            <summary>
            Enable Code 2 of 5 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitVerification">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.CheckDigitVerification"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitVerification.Disable">
            <summary>
            No check digit verification.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitVerification.Modulo10">
            <summary>
            Standard 2 of 5 check digit verification as Modulo 10.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 and 
            length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and not 
            longer than the maximum length specified by length2 are read. Length3 is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitTrans.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.ECheckDigitTrans.Enable">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CStandard2Of5.EFormat">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CStandard2Of5.Format"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.EFormat.Identicon6SsBars">
            <summary>Identicon (6 start/stop bars).</summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CStandard2Of5.EFormat.CompIdentics4SsBars">
            <summary>Computer Identics (4 start/stop bars).</summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTelepen">
            <summary>
            Defines attributes for decoding the Telepen symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.Enable">
            <summary>
            Enables decoding of Telepen.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.Enable = CSymbology.CTelepen.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.Enable = CSymbology.CTelepen.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.LengthMode">
            <summary>
            Specifies the length mode type.
            </summary>
            <remarks>
            <para>
            Use length1, length2, and length3 to compose acceptable bar codes depending 
            on the length mode used. Minimum length for Telepen bar codes is 3 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt; + &lt;check digit&gt;.
            </para>
            <para>
            When length1, length2, length3, and length mode are set to 0, no length is 
            specified and any length of characters is accepted.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.LengthMode = CSymbology.CTelepen.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.LengthMode = CSymbology.CTelepen.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.Format">
            <summary>
            Specifies ASCII or Numeric as the format type for Telepen.
            </summary>
            <remarks>            
            When Numeric format is selected, the start/stop and check digits remain 
            unchanged (as with ASCII character values from 0 to 16). Characters from 17 
            to 26 are changed to the values from 0X to 9X. Values greater than 26 are 
            obtained by subtracting 27 from their ASCII values.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.Format = CSymbology.CTelepen.EFormat.Ascii;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.Format = CSymbology.CTelepen.EFormat.Ascii
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTelepen.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C6. 
            If no value is specified and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Telepen.UserDefinedSymbologyId = "C6";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Telepen.UserDefinedSymbologyId = "C6"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTelepen.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CTelepen.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.EEnable.Enable">
            <summary>
            Enable Telepen decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTelepen.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CTelepen.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 
            and length3 will be read. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and not 
            longer than the maximum length specified by length2 are read. Length3 is not used. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTelepen.EFormat">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CTelepen.Format"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.EFormat.Ascii">
            <summary>
            ASCII
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTelepen.EFormat.Numeric">
            <summary>
            Numeric
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode11">
            <summary>
            Defines attributes for decoding the Code 11 symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.Enable">
            <summary>
            Enables decoding of Code 11.
            </summary>
            <remarks>
            Enabling this symbology does not ensure decoding will be possible for 
            any bar code read. Some options (such as bar code length or check digit) 
            can prevent decoding. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.Enable = CSymbology.CCode11.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.Enable = CSymbology.CCode11.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.CodeMark">
            <summary>
            Compose a one-character code mark symbology identifier for Code 11. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.CheckDigitVerification">
            <summary>
            Sets the number of check digits for Code 11 check digit verification.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.CheckDigitVerification = CSymbology.CCode11.ECheckDigitVerification.OneDigit;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.CheckDigitVerification = CSymbology.CCode11.ECheckDigitVerification.OneDigit
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.Length1">
            <summary>
            Integer value specifying bar code length1. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.Length1 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.Length1 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.Length2">
            <summary>
            Integer value specifying bar code length2. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.Length2 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.Length2 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.Length3">
            <summary>
            Integer value specifying bar code length3. Range is 0 to 255.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.Length3 = 10;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.Length3 = 10
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.LengthMode">
            <summary>
            Specifies acceptable bar code length. Length1, length2, and length3 are 
            used differently depending on this property.
            </summary>
            <remarks>
            <para>
            Use length1, length2, and length3 to compose acceptable bar code lengths 
            depending on the lengthMode used. Minimum length for Code 11 is 2 characters.
            </para>
            <para>
            Bar code length = &lt;bar code data&gt;.
            </para>
            <para>
            </para>
            When length1, length2, length3, and length mode are set to 0, no length 
            is specified and any length of characters is accepted.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.LengthMode = CSymbology.CCode11.ELengthMode.Length1Minimum;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.LengthMode = CSymbology.CCode11.ELengthMode.Length1Minimum
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.CheckDigitTrans">
            <summary>
            Enables Code 11 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.CheckDigitTrans = CSymbology.CCode11.ECheckDigitTrans.Transmitted;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.CheckDigitTrans = CSymbology.CCode11.ECheckDigitTrans.Transmitted
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCode11.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C1. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Code11.UserDefinedSymbologyId = "C1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Code11.UserDefinedSymbologyId = "C1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode11.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CCode11.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.EEnable.Enable">
            <summary>
            Enable Code 11 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitVerification">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode11.CheckDigitVerification"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitVerification.OneDigit">
            <summary>
            One digit.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitVerification.TwoDigits">
            <summary>
            Two digits.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode11.ELengthMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode11.LengthMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ELengthMode.Length1Minimum">
            <summary>
            Codes with as many characters as specified by length1 and longer are read. 
            Length2 and length3 are not used.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ELengthMode.Lengths123Fixed">
            <summary>
            Only codes that comply with the lengths specified by length1, length2 and 
            length3 will be read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ELengthMode.Length1MinimumAndLength2Maximum">
            <summary>
            Codes that are at least the minimum length specified by length1 and not 
            longer than the maximum length specified by length2 are read. Length3 
            is not used.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CCode11.CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitTrans.NotTransmitted">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCode11.ECheckDigitTrans.Transmitted">
            <summary>
            Enable check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc">
            <summary>
            Defines attributes for decoding the EAN/UPC symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual. 
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpca">
            <summary>
            Enables decoding of UPC-A.
            </summary>
            <remarks>
            <para>
            Set to true to enable UPC-A decoding, or set to false to disable decoding.
            </para>
            <para>
            Enabling UPC-A decoding does not ensure that decoding is possible for all bar 
            codes read. Some options, such as Add-On requirements, may prevent decoding.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.EnableUpca = CSymbology.CEanUpc.EEnableUpca.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.symbology.EanUpc.EnableUpca = CSymbology.CEanUpc.EEnableUpca.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpce">
            <summary>
            Enables decoding of UPC-E.
            </summary>
            <remarks>
            Set to true to enable UPC-E decoding, or set to false to disable decoding.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.EnableUpce = CSymbology.CEanUpc.EEnableUpce.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.EnableUpce = CSymbology.CEanUpc.EEnableUpce.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableEan8">
            <summary>
            Enables decoding of EAN-8.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.EnableEan8 = CSymbology.CEanUpc.EEnableEan8.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.EnableEan8 = CSymbology.CEanUpc.EEnableEan8.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableEan13">
            <summary>
            Enables decoding of EAN-13.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.EnableEan13 = CSymbology.CEanUpc.EEnableEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.EnableEan13 = CSymbology.CEanUpc.EEnableEan13.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.IsbnConversionForEan13">
            <summary>
            <para>
            Enables ISBN conversion for EAN-13. If enabled, no add-on is transmitted even if required.
            </para>
            <para>
            ISBN conversion converts all EAN-13 bar codes that begin with "978" or "979" 
            (except for "9790") by removing the first three digits, calculating the checksum 
            on the remaining characters, and adding the ISBN (International Standard Book Number) 
            check digit.
            </para>
            </summary>
            <remarks>
            If <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.GtinCompliant"/> is enabled, no ISBN conversion occurs.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.IsbnConversionForEan13 = CSymbology.CEanUpc.EIsbnConversionForEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.IsbnConversionForEan13 = CSymbology.CEanUpc.EIsbnConversionForEan13.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.AddOn2DigitsActive">
            <summary>
            Enables EAN/UPC Add-On 2.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.AddOn2DigitsActive = CSymbology.CEanUpc.EAddOn2DigitsActive.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.AddOn2DigitsActive = CSymbology.CEanUpc.EAddOn2DigitsActive.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.AddOn5DigitsActive">
            <summary>
            Enables EAN/UPC Add-On 5.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.AddOn5DigitsActive = CSymbology.CEanUpc.EAddOn5DigitsActive.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.AddOn5DigitsActive = CSymbology.CEanUpc.EAddOn5DigitsActive.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.AddOnSecurity">
            <summary>
            <para>
            Sets and gets the security level for decoding.
            </para>
            <para>
            Security is used only when add-on digits are not required but transmitted. 
            The higher this value, the more secure the decoding, but this can also slow 
            the decode rate.
            </para>
            <para>
            Range is 0 to 100.
            </para>
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.AddOnSecurity = 50;  
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.AddOnSecurity = 50
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaCodeMark">
            <summary>
            Set a one-character code mark symbology identifier for UPC-A. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcaCodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcaCodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceCodeMark">
            <summary>
            Set a one-character code mark symbology identifier for UPC-E. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpceCodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpceCodeMark = "*"
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for EAN-8. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean8CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean8CodeMark = "*"
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean13CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for EAN-13. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean13CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean13CodeMark = "*"
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpce1">
            <summary>
            Enables decoding of UPC-E1.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.EnableUpce1 = CSymbology.CEanUpc.EEnableUpce1.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.EnableUpce1 = CSymbology.CEanUpc.EEnableUpce1.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaCheckDigitTrans">
            <summary>
            Enables UPC-A check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcaCheckDigitTrans = CSymbology.CEanUpc.EUpcaCheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcaCheckDigitTrans = CSymbology.CEanUpc.EUpcaCheckDigitTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceCheckDigitTrans">
            <summary>
            Enables UPC-E check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpceCheckDigitTrans = CSymbology.CEanUpc.EUpceCheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpceCheckDigitTrans = CSymbology.CEanUpc.EUpceCheckDigitTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8CheckDigitTrans">
            <summary>
            Enables EAN-8 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean8CheckDigitTrans = CSymbology.CEanUpc.EEan8CheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean8CheckDigitTrans = CSymbology.CEanUpc.EEan8CheckDigitTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean13CheckDigitTrans">
            <summary>
            Enables EAN-13 check digit transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean13CheckDigitTrans = CSymbology.CEanUpc.EEan13CheckDigitTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean13CheckDigitTrans = CSymbology.CEanUpc.EEan13CheckDigitTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaNumberSystemTrans">
            <summary>
            Enables UPC-A number system transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcaNumberSystemTrans = CSymbology.CEanUpc.EUpcaNumberSystemTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcaNumberSystemTrans = CSymbology.CEanUpc.EUpcaNumberSystemTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceNumberSystemTrans">
            <summary>
            Enables UPC-E number system transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpceNumberSystemTrans = CSymbology.CEanUpc.EUpceNumberSystemTrans.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpceNumberSystemTrans = CSymbology.CEanUpc.EUpceNumberSystemTrans.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaTransAsEan13">
            <summary>
            Enables transmission of UPC-A as EAN-13. Transmission takes into account 
            only the parameters available for the target bar code format. For all 
            conversions, the symbology ID (AIM standard or user-defined) is based on 
            the destination symbology.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcaTransAsEan13 = CSymbology.CEanUpc.EUpcaTransAsEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcaTransAsEan13 = CSymbology.CEanUpc.EUpcaTransAsEan13.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceTransAsUpca">
            <summary>
            Enables transmission of UPC-E as UPC-A. Transmission takes into account 
            only the parameters available for the target bar code format.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpceTransAsUpca = CSymbology.CEanUpc.EUpceTransAsUpca.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpceTransAsUpca = CSymbology.CEanUpc.EUpceTransAsUpca.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8TransAsEan13">
            <summary>
            Enables transmission of EAN-8 as EAN-13.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean8TransAsEan13 = CSymbology.CEanUpc.EEan8TransAsEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean8TransAsEan13 = CSymbology.CEanUpc.EEan8TransAsEan13.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcEanAddOnDigits">
            <summary>
            Sets and gets the requirements for EAN/UPC add-on digits.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcEanAddOnDigits = CSymbology.CEanUpc.EUpcEanAddOnDigits.ControlledByAddOnDigits;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcEanAddOnDigits = CSymbology.CEanUpc.EUpcEanAddOnDigits.ControlledByAddOnDigits
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.GtinCompliant">
            <summary>
            Enables GTIN compliance. GTIN stands for "Global Trade Item Number" 
            and transmits EAN/UPC symbologies as the 14-character EAN.UCC GTIN.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.GtinCompliant = CSymbology.CEanUpc.EGtinCompliant.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.GtinCompliant = CSymbology.CEanUpc.EGtinCompliant.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.IsmnConversionForEan13">
            <summary>
            Enables ISMN conversion for EAN-13 bar codes. If enabled, ISMN conversion 
            converts EAN-13 bar codes that begin with "9790" by removing the first 
            three digits and replacing the "0" with "M", creating an International 
            Standard Music Number.
            </summary>
            <remarks>
            If <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.GtinCompliant"/> is enabled, no ISMN conversion occurs.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>         
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.IsmnConversionForEan13 = CSymbology.CEanUpc.EIsmnConversionForEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.IsmnConversionForEan13 = CSymbology.CEanUpc.EIsmnConversionForEan13.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.IssnConversionForEan13">
            <summary>
            Enables ISSN conversion of EAN-13 bar codes. If enabled, ISSN conversion  
            converts all EAN-13 bar codes that begin with "977" by removing the first 
            three digits and adding the ISBN check digit. This creates the International 
            Standard Serial Number
            </summary>
            <remarks>
            If <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.GtinCompliant"/> is enabled, no ISSN conversion occurs.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.IssnConversionForEan13 = CSymbology.CEanUpc.EIssnConversionForEan13.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.IssnConversionForEan13 = CSymbology.CEanUpc.EIssnConversionForEan13.Enable
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaUserDefinedSymbologyId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            The default UDSI is A0. If no value is specified and symbology ID transmission 
            is active, no symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpcaUserDefinedSymbologyId = "A0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpcaUserDefinedSymbologyId = "A0"
            
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceUserDefinedSymbologyId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            The default UDSI is E0. If no value is specified and symbology ID transmission 
            is active, no symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.UpceUserDefinedSymbologyId = "E0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.UpceUserDefinedSymbologyId = "E0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8UserDefinedSymbologyId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            The default UDSI is FF. If no value is specified and symbology ID transmission 
            is active, no symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean8UserDefinedSymbologyId = "FF";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean8UserDefinedSymbologyId = "FF"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean13UserDefinedSymbologyId">
            <summary>
            A string (0 to 4 characters) that specifies a user-defined symbology ID (UDSI) 
            when not using the AIM standard for this symbology. The UDSI is transmitted in 
            the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            The default UDSI is F. If no value is specified and symbology ID transmission 
            is active, no symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.EanUpc.Ean13UserDefinedSymbologyId = "F";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.EanUpc.Ean13UserDefinedSymbologyId = "F"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpca">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpca"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpca.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpca.Enable">
            <summary>
            Eenable UPC-A decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpce"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce.Enable">
            <summary>
            Enable UPC-E decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan8">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableEan8"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan8.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan8.Enable">
            <summary>
            Enable EAN-8 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableEan13"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan13.Disable">
            <summary>
             Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableEan13.Enable">
            <summary>
            Enable EAN-13 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EIsbnConversionForEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.IsbnConversionForEan13"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIsbnConversionForEan13.Disable">
            <summary>
            Disable ISBN conversion
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIsbnConversionForEan13.Enable">
            <summary>
            Enable ISBN conversion
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn2DigitsActive">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.AddOn2DigitsActive"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn2DigitsActive.Disable">
            <summary>
            Disable AddOn2DigitsActive
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn2DigitsActive.Enable">
            <summary>
            Enable AddOn2DigitsActive
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn5DigitsActive">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.AddOn5DigitsActive"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn5DigitsActive.Disable">
            <summary>
            Disable AddOn5DigitsActive
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EAddOn5DigitsActive.Enable">
            <summary>
            Enable AddOn5DigitsActive
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce1">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.EnableUpce1"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce1.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEnableUpce1.Enable">
            <summary>
            Enable UPC-E1 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaCheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaCheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaCheckDigitTrans.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaCheckDigitTrans.Enable">
            <summary>
            Enable UPC-A check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceCheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceCheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceCheckDigitTrans.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceCheckDigitTrans.Enable">
            <summary>
            Enable UPC-E check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8CheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8CheckDigitTrans.Disable">
            <summary>
            Disable check digit transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8CheckDigitTrans.Enable">
            <summary>
            Enable EAN-8 check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEan13CheckDigitTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean13CheckDigitTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan13CheckDigitTrans.Disable">
            <summary>
            Disable check digit transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan13CheckDigitTrans.Enable">
            <summary>
            Enable EAN-13 check digit transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaNumberSystemTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaNumberSystemTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaNumberSystemTrans.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaNumberSystemTrans.Enable">
            <summary>
            Enable UPC-A number system transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceNumberSystemTrans">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceNumberSystemTrans"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceNumberSystemTrans.Disable">
            <summary>
            disable number system transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceNumberSystemTrans.Enable">
            <summary>
            Enable UPC-E number system transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaTransAsEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcaTransAsEan13"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaTransAsEan13.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcaTransAsEan13.Enable">
            <summary>
            Enable transmission of UPC-A as EAN-13
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceTransAsUpca">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpceTransAsUpca"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceTransAsUpca.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpceTransAsUpca.Enable">
            <summary>
            Enable transmission of UPC-E as UPC-A
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8TransAsEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.Ean8TransAsEan13"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8TransAsEan13.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EEan8TransAsEan13.Enable">
            <summary>
            Enable transmission of EAN-8 as EAN-13
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcEanAddOnDigits">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.UpcEanAddOnDigits"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcEanAddOnDigits.TransmitIfFound">
            <summary>
            Not required but transmitted if read.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EUpcEanAddOnDigits.ControlledByAddOnDigits">
            <summary>
            Required and transmitted.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EGtinCompliant">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.GtinCompliant"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EGtinCompliant.Disable">
            <summary>
            disable GTIN processing.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EGtinCompliant.Enable">
            <summary>
            Enable GTIN processing for all EAN/UPC symbologies
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EIsmnConversionForEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.IsmnConversionForEan13"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIsmnConversionForEan13.Disable">
            <summary>
            Disable conversion.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIsmnConversionForEan13.Enable">
            <summary>
            Enable ISMN conversion
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CEanUpc.EIssnConversionForEan13">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CEanUpc.IssnConversionForEan13"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIssnConversionForEan13.Disable">
            <summary>
            Disable conversion
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CEanUpc.EIssnConversionForEan13.Enable">
            <summary>
            Enable ISSN conversion
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMicroPdf417">
            <summary>
            Defines attributes for decoding the MicroPdf417 symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.EnableMicroPdf417">
            <summary>
            Enables decoding of MicroPDF417.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.MicroPdf417.EnableMicroPDF417 = CSymbology.CMicroPdf417.EEnableMicroPDF417.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.MicroPdf417.EnableMicroPdf417 = CSymbology.CMicroPdf417.EEnableMicroPDF417.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.Code128Emulation">
            <summary>
            Enables MicroPDF417 Code 128 emulation, which constrains the MicroPDF 
            character set to the EAN128 character set. Transmission is identical 
            to EAN128 (that is, ]C1xxx).
            </summary>
            <remarks>
            If the option is enabled, and EAN128Identifier is enabled, the MicroPDF 
            AIM identifier is set to ]C1. If the option is enabled, and EAN128Identifier 
            is disabled, AIM identifier is set to ]L3.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.MicroPdf417.Code128Emulation = CSymbology.CMicroPdf417.ECode128Emulation.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.MicroPdf417.Code128Emulation = CSymbology.CMicroPdf417.ECode128Emulation.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.MicroPdf417.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.MicroPdf417.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C8. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.MicroPdf417.UserDefinedSymbologyId = "C8";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.MicroPdf417.UserDefinedSymbologyId = "C8"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMicroPdf417.EEnableMicroPdf417">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.EnableMicroPdf417"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMicroPdf417.EEnableMicroPdf417.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMicroPdf417.EEnableMicroPdf417.Enable">
            <summary>
            Enable MicroPDF417 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMicroPdf417.ECode128Emulation">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMicroPdf417.Code128Emulation"/> property
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMicroPdf417.ECode128Emulation.Disable">
            <summary>
            Disable emulation
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMicroPdf417.ECode128Emulation.Enable">
            <summary>
            Enable emulation
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417">
            <summary>
            Defines attributes for decoding the PDF417 symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.EnablePdf417">
            <summary>
            Enables decoding of PDF417.
            </summary>
            <remarks>
             Enabling this symbology does not ensure decoding of all bar codes read. 
             Some options (such as length) will prevent decodes.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.EnablePdf417 = CSymbology.CPdf417.EEnablePdf417.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.EnablePdf417 = CSymbology.CPdf417.EEnablePdf417.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.MacroPdfBuffered">
            <summary>
            Enables MacroPDF buffering. When enabled, multi-labeled PDF417 messages are 
            stored in the scanner buffer until the whole message has been read. Once the 
            whole message has been read the message is transmitted. Bar codes can be read 
            in any order.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.MacroPdfBuffered = CSymbology.CPdf417.EMacroPdfBuffered.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.MacroPdfBuffered = CSymbology.CPdf417.EMacroPdfBuffered.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.PdfWithDataLengthId0">
            <summary>
            Enables Irregular PDF. When enabled, PDF417 labels with the symbology 
            length descriptor set to 0 can still be read.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.PdfWithDataLengthId0 = CSymbology.CPdf417.EPdfWithDataLengthId0.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.PdfWithDataLengthId0 = CSymbology.CPdf417.EPdfWithDataLengthId0.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.ControlHeaderTransmission">
            <summary>
            Enables control header transmission. The control header is always transmitted 
            when using MacroPDF417 unbuffered.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.ControlHeaderTransmission = CSymbology.CPdf417.EControlHeaderTransmission.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.ControlHeaderTransmission = CSymbology.CPdf417.EControlHeaderTransmission.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.OptionalFieldsFileNameXmit">
            <summary>
            Enables file name transmission for MacroPDF417.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.OptionalFieldsFileNameXmit = CSymbology.CPdf417.EOptionalFieldsFileNameXmit.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.OptionalFieldsFileNameXmit = CSymbology.CPdf417.EOptionalFieldsFileNameXmit.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.SegmentCountTransmitted">
            <summary>
            Enables segment count transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.SegmentCountTransmitted = CSymbology.CPdf417.ESegmentCountTransmitted.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.SegmentCountTransmitted = CSymbology.CPdf417.ESegmentCountTransmitted.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.TimeStampTransmitted">
            <summary>
            Enables time stamp transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.TimeStampTransmitted = CSymbology.CPdf417.ETimeStampTransmitted.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.TimeStampTransmitted = CSymbology.CPdf417.ETimeStampTransmitted.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.SenderTransmitted">
            <summary>
            Enables sender transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.SenderTransmitted = CSymbology.CPdf417.ESenderTransmitted.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.SenderTransmitted = CSymbology.CPdf417.ESenderTransmitted.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.AddresseeTransmitted">
            <summary>
            Enables addressee transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.AddresseeTransmitted = CSymbology.CPdf417.EAddresseeTransmitted.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.AddresseeTransmitted = CSymbology.CPdf417.EAddresseeTransmitted.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.ChecksumTranmitted">
            <summary>
            Enables checksum transmission.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.ChecksumTranmitted = CSymbology.CPdf417.EChecksumTranmitted.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.ChecksumTranmitted = CSymbology.CPdf417.EChecksumTranmitted.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CPdf417.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C7. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Pdf417.UserDefinedSymbologyId = "C7";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Pdf417.UserDefinedSymbologyId = "C7"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EEnablePdf417">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.EnablePdf417"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EEnablePdf417.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EEnablePdf417.Enable">
            <summary>
            Enable PDF417 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EMacroPdfBuffered">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.MacroPdfBuffered"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EMacroPdfBuffered.Disable">
            <summary>
            Disable buffering
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EMacroPdfBuffered.Enable">
            <summary>
            Enable MacroPDF buffering
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EPdfWithDataLengthId0">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.PdfWithDataLengthId0"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EPdfWithDataLengthId0.Disable">
            <summary>
            Disable Irregular PDF
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EPdfWithDataLengthId0.Enable">
            <summary>
            Enable Irregular PDF
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EControlHeaderTransmission">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.ControlHeaderTransmission"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EControlHeaderTransmission.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EControlHeaderTransmission.Enable">
            <summary>
            Enable control header transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EOptionalFieldsFileNameXmit">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.OptionalFieldsFileNameXmit"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EOptionalFieldsFileNameXmit.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EOptionalFieldsFileNameXmit.Enable">
            <summary>
            Enable file name transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.ESegmentCountTransmitted">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.SegmentCountTransmitted"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ESegmentCountTransmitted.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ESegmentCountTransmitted.Enable">
            <summary>
            Enable segment count transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.ETimeStampTransmitted">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.TimeStampTransmitted"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ETimeStampTransmitted.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ETimeStampTransmitted.Enable">
            <summary>
            Enable time stamp transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.ESenderTransmitted">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.SenderTransmitted"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ESenderTransmitted.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.ESenderTransmitted.Enable">
            <summary>
            Enable sender transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EAddresseeTransmitted">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.AddresseeTransmitted"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EAddresseeTransmitted.Disable">
            <summary>
            Disable transmission
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EAddresseeTransmitted.Enable">
            <summary>
            Enable addressee transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CPdf417.EChecksumTranmitted">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CPdf417.ChecksumTranmitted"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EChecksumTranmitted.Disable">
            <summary>
            Disable transmission.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CPdf417.EChecksumTranmitted.Enable">
            <summary>
            Enable checksum transmission
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodablockA">
            <summary>
            Defines attributes for decoding the Codablock A symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockA.Enable">
            <summary>
            Enables decoding of Codablock A.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockA.Enable = CSymbology.CCodablockA.EEnable.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockA.Enable = CSymbology.CCodablockA.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockA.CodeMark">
            <summary>
            Compose a one-character code mark symbology identifier for Codablock A. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockA.CodeMark = "*";
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockA.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockA.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is K0. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockA.UserDefinedSymbologyId = "K0";
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockA.UserDefinedSymbologyId = "K0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodablockA.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CCodablockA.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodablockA.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodablockA.EEnable.Enable">
            <summary>
            Enable Codablock A decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodablockF">
            <summary>
            Defines attributes for decoding the Codablock F symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockF.Enable">
            <summary>
            <para>
            Enables decoding of Codablock F.
            </para>
            <para>
            Codablock F is based on Code 128. To avoid confusion, Intermec recommends 
            disabling Code 128 when enabling Codablock F. 
            </para>
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockF.Enable = CSymbology.CCodablockF.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockF.Enable = CSymbology.CCodablockF.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockF.CodeMark">
            <summary>
            Compose a one-character code mark symbology identifier for Codablock F. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockF.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockF.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CCodablockF.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is K1. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.CodablockF.UserDefinedSymbologyId = "K1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.CodablockF.UserDefinedSymbologyId = "K1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CCodablockF.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CCodablockF.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodablockF.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CCodablockF.EEnable.Enable">
            <summary>
            Enable Codablock F decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTlc39">
            <summary>
            Defines attributes for decoding the TLC39 symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class requires IVA version 5.01.40.1685 on the Intermec computer 
            and is not supported by EV12.
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTlc39.Enable">
            <summary>
            Enables decoding of TLC39.
            </summary>
            <remarks>
            To enable TLC39, you must also enable MicroPDF417 and Code 39. 
            When TLC39 is enabled, extended range on Code 39 is not available.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Tlc39.Enable = CSymbology.CTlc39.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Tlc39.Enable = CSymbology.CTlc39.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTlc39.LinearOnlyXmitMode">
            <summary>
            Enables TLC39 linear-only transmission mode
            </summary>
            <remarks>
            In this mode, only data from the Code 39 label is transmitted. 
            MicroPDF417 data is ignored.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Tlc39.LinearOnlyXmitMode = CSymbology.CTlc39.ELinearOnlyXmitMode.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Tlc39.LinearOnlyXmitMode = CSymbology.CTlc39.ELinearOnlyXmitMode.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTlc39.EciSecurity">
            <summary>
            Specifies security level. Security is triggered when a TLC39 bar code 
            is read if ECI has been found and Code 39 is enabled. If code is 6 digit, 
            the scanner attempts to decode a TLC39 ECI part with more security.
            </summary>
            <remarks>
            Range is 0 to 100. The higher the value, the more secure the decode, 
            but decoding becomes less snappy.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Tlc39.EciSecurity = 50;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Tlc39.EciSecurity = 50
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTlc39.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Tlc39.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Tlc39.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CTlc39.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is H0. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Tlc39.UserDefinedSymbologyId = "H0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Tlc39.UserDefinedSymbologyId = "H0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTlc39.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CTlc39.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTlc39.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTlc39.EEnable.Enable">
            <summary>
            Enable TLC39 decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CTlc39.ELinearOnlyXmitMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CTlc39.LinearOnlyXmitMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTlc39.ELinearOnlyXmitMode.Disable">
            <summary>
            Disable LinearOnlyXmitMode
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CTlc39.ELinearOnlyXmitMode.Enable">
            <summary>
            Enable LinearOnlyXmitMode
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional">
            <summary>
            Defines attributes for decoding the GS1 DataBar Omnidirectional symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.Enable">
            <summary>
            Enables decoding of GS1 DataBar Omnidirectional.
            </summary>
            <remarks>
            Enabling this symbology does not ensure that decoding occurs for 
            any bar code read. Some options (such as bar code length) may prevent decoding.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarOmniDirectional.Enable = CSymbology.CGs1DataBarOmniDirectional.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarOmniDirectional.Enable = CSymbology.CGs1DataBarOmniDirectional.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1 DataBar Omnidirectional. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarOmniDirectional.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarOmniDirectional.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C3. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarOmniDirectional.UserDefinedSymbologyId = "C3";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarOmniDirectional.UserDefinedSymbologyId = "C3"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarOmniDirectional.EEnable.Enable">
            <summary>
            Enable GS1 DataBar Limited decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited">
            <summary>
            Defines attributes for decoding the GS1 DataBar Limited symbology
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current
            symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.Enable">
            <summary>
            Enables decoding of GS1 DataBar Limited.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarLimited.Enable = CSymbology.CGs1DataBarLimited.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarLimited.Enable = CSymbology.CGs1DataBarLimited.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1 DataBar Limited. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarLimited.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarLimited.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is C4. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarLimited.UserDefinedSymbologyId = "C4";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarLimited.UserDefinedSymbologyId = "C4"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarLimited.EEnable.Enable">
            <summary>
            Enable GS1 DataBar Limited decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded">
            <summary>
            Defines attributes for decoding the GS1 DataBar Expanded symbology.
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.Enable">
            <summary>
            Enables decoding of GS1 DataBar Expanded.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarExpanded.Enable = CSymbology.CGs1DataBarExpanded.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarExpanded.Enable = CSymbology.CGs1DataBarExpanded.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1 DataBar Expanded. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarExpanded.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarExpanded.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1DataBarExpanded.UserDefinedSymbologyId = "C5";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1DataBarExpanded.UserDefinedSymbologyId = "C5"             
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1DataBarExpanded.EEnable.Enable">
            <summary>
            Enable GS1 DataBar Expanded decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMaxicode">
            <summary>
            Defines attributes for decoding the Maxicode symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMaxicode.Enable">
            <summary>
            Enables decoding of Maxicode.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Maxicode.Enable = CSymbology.CMaxicode.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Maxicode.Enable = CSymbology.CMaxicode.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMaxicode.Mode0">
            <summary>
            Enables Mode0 for Maxicode.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Maxicode.Mode0 = CSymbology.CMaxicode.EMode0.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Maxicode.Mode0 = CSymbology.CMaxicode.EMode0.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMaxicode.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Maxicode.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Maxicode.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CMaxicode.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is D2. 
            If no value is specified and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Maxicode.UserDefinedSymbologyId = "D2";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Maxicode.UserDefinedSymbologyId = "D2"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMaxicode.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CMaxicode.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMaxicode.EEnable.Disable">
            <summary>
            Disable decoding.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMaxicode.EEnable.Enable">
            <summary>
            Enable Maxicode decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CMaxicode.EMode0">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CMaxicode.Mode0"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMaxicode.EMode0.Disable">
            <summary>
            Disable Mode0
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CMaxicode.EMode0.Enable">
            <summary>
            Enable Mode0
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAztec">
            <summary>
            Defines attributes for decoding the Aztec symbology.
            </summary>
            <remarks>
            <para>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.Enable">
            <summary>
            Enables decoding of Aztec.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.Enable = CSymbology.CAztec.EEnable.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.Enable = CSymbology.CAztec.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.StructuredAppendMode">
            <summary>
            Specify the Aztec structured append mode type.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.StructuredAppendMode = CSymbology.CAztec.EStructuredAppendMode.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.StructuredAppendMode = CSymbology.CAztec.EStructuredAppendMode.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.Runes">
            <summary>
            Specify the Aztec runes type.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.Runes = CSymbology.CAztec.ERunes.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.Runes = CSymbology.CAztec.ERunes.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.Gs1With128Emulation">
            <summary>
            Specify the Aztec GS1-128 emulation type.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.Gs1With128Emulation = CSymbology.CAztec.EGs1With128Emulation.Enable;
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.Gs1With128Emulation = CSymbology.CAztec.EGs1With128Emulation.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.CodeMark">
            <summary>
            Compose a one-character code mark symbology identifier for Aztec. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.CodeMark = "*";
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CAztec.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI symbology ID]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is D3. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Aztec.UserDefinedSymbologyId = "D3";
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Aztec.UserDefinedSymbologyId = "D3"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAztec.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CAztec.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EEnable.Enable">
            <summary>
            Enable Aztec decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAztec.EStructuredAppendMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CAztec.StructuredAppendMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EStructuredAppendMode.Disable">
            <summary>
            Disable Aztec structured append mode.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EStructuredAppendMode.Enable">
            <summary>
            Aztec structured append header is used instead of ECI.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAztec.ERunes">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CAztec.Runes"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.ERunes.Disable">
            <summary>
            Disable Aztec runes.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.ERunes.Enable">
            <summary>
            Enable decoding of Aztec runes (special symbols).
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CAztec.EGs1With128Emulation">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CAztec.Gs1With128Emulation"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EGs1With128Emulation.Disable">
            <summary>
            Disable Aztec EAN128 emulation.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CAztec.EGs1With128Emulation.Enable">
            <summary>
            AZTEC with FNC1 preceding 1st message character receives ]C1 symbology identifier.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CDatamatrix">
            <summary>
            Defines attributes for decoding the Data Matrix symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as the EV12 is not supported. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDatamatrix.Enable">
            <summary>
            Enables decoding of Data Matrix.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Datamatrix.Enable = CSymbology.CDatamatrix.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Datamatrix.Enable = CSymbology.CDatamatrix.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDatamatrix.MirroredLabels">
            <summary>
            Enables or disables decoding of mirrored labels. When enabled, both mirrored 
            and normal labels are decoded. When disabled, only normal labels are decoded.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Datamatrix.MirroredLabels = CSymbology.CDatamatrix.EMirroredLabels.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Datamatrix.MirroredLabels = CSymbology.CDatamatrix.EMirroredLabels.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDatamatrix.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for DataMatrix. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Datamatrix.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Datamatrix.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CDatamatrix.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is B7. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Datamatrix.UserDefinedSymbologyId = "B7";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Datamatrix.UserDefinedSymbologyId = "B7"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CDatamatrix.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CDatamatrix.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDatamatrix.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDatamatrix.EEnable.Enable">
            <summary>
            Enable Data Matrix decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CDatamatrix.EMirroredLabels">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CDatamatrix.MirroredLabels"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDatamatrix.EMirroredLabels.Disable">
            <summary>
            Disables decoding of mirrored labels. Only normal labels are decoded.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CDatamatrix.EMirroredLabels.Enable">
            <summary>
            Enables decoding of mirrored and normal labels.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CQrCode">
            <summary>
            Defines attributes for decoding the QR Code symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the current 
            symbology settings as configured by the Intermec Settings application. For more 
            information, see the Intermec Settings Command Reference Manual.
            </para>
            <para>
            This class is supported only by Intermec area imagers, such as it is not supported on EV12. 
            </para>
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CQrCode.Enable">
            <summary>
            Enables decoding of QR Code.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.QrCode.Enable = CSymbology.CQrCode.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.QrCode.Enable = CSymbology.CQrCode.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CQrCode.ReverseVideo">
            <summary>
            Enables or disables reverse video.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.QrCode.ReverseVideo = CSymbology.CQrCode.EReverseVideo.Automatic;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.QrCode.ReverseVideo = CSymbology.CQrCode.EReverseVideo.Automatic
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CQrCode.UnconventionalQRCode">
            <summary>
            Enables or disables decoding of unconventional QR Code.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.QrCode.UnconventionalQRCode = CSymbology.CQrCode.EUnconventionalQRCode.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.QrCode.UnconventionalQRCode = CSymbology.CQrCode.EUnconventionalQRCode.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CQrCode.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier. The code mark is 
            transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.QrCode.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.QrCode.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CQrCode.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is D1. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.QrCode.UserDefinedSymbologyId = "D1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.QrCode.UserDefinedSymbologyId = "D1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CQrCode.EEnable">
            <summary>
            An enum data type for the <see cref="F:Intermec.DataCollection2.CSymbology.CQrCode.EEnable.Enable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EEnable.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EEnable.Enable">
            <summary>
            Enable QR Code decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CQrCode.EReverseVideo">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CQrCode.ReverseVideo"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EReverseVideo.Normal">
            <summary>
            Decodes black bar codes on a white background
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EReverseVideo.Inverse">
            <summary>
            Decodes white bar codes on a black background.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EReverseVideo.Automatic">
            <summary>
            Decodes either type.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CQrCode.EUnconventionalQRCode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CQrCode.UnconventionalQRCode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EUnconventionalQRCode.Disable">
            <summary>
            The structured append label headers are transmitted in accordance
            with ECI protocol.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CQrCode.EUnconventionalQRCode.Enable">
            <summary>
            The label header is transmitted as the first two bytes of every symbol.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1Composite">
            <summary>
            Defines attributes for decoding the GS1 Composite symbology
            </summary>
            <remarks>
            Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EnableGs1CompositeAb">
            <summary>
            Enables decoding of GS1 Composite A/B.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.EnableGs1CompositeAb = CSymbology.CGs1Composite.EEnableGS1CompositeAb.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.EnableGs1CompositeAb = CSymbology.CGs1Composite.EEnableGS1CompositeAb.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EnableGs1CompositeC">
            <summary>
            Enables decoding of GS1 Composite C.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.EnableGs1CompositeC = CSymbology.CGs1Composite.EEnableGS1CompositeC.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.EnableGs1CompositeC = CSymbology.CGs1Composite.EEnableGs1CompositeC.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.LinearOnlyXmitMode">
            <summary>
            Enables linear-only transmission mode.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.LinearOnlyXmitMode = CSymbology.CGs1Composite.ELinearOnlyXmitMode.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.LinearOnlyXmitMode = CSymbology.CGs1Composite.ELinearOnlyXmitMode.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.AbCodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1 Composite A/B. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.AbCodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.AbCodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.CCodeMark">
            <summary>
            Set a one-character code mark symbology identifier for GS1 Composite C. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.CCodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.CCodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EanUpcCompMsgDecode">
            <summary>
            Sets the manner in which the linear and stacked parts of the bar code are read.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.EanUpcCompMsgDecode = CSymbology.CGs1Composite.EEanUpcCompMsgDecode.AlwaysLinked;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.EanUpcCompMsgDecode = CSymbology.CGs1Composite.EEanUpcCompMsgDecode.AlwaysLinked
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.AbUserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID for GS1 Composite A/B if not using 
            the AIM standard. The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is G0. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.AbUserDefinedSymbologyId = "G0";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.AbUserDefinedSymbologyId = "G0"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CGs1Composite.CUserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID for GS1 Composite A/B if not using 
            the AIM standard. The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is G1. 
            If there is no value specified, and symbology ID transmission is active, no symbology 
            ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception>
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.Gs1Composite.CUserDefinedSymbologyId = "G1";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.Gs1Composite.CUserDefinedSymbologyId = "G1"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeAb">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EnableGs1CompositeAb"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeAb.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeAb.Enable">
            <summary>
            Enable GS1 Composite A/B decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeC">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EnableGs1CompositeC"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeC.Disable">
            <summary>
            Disable decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEnableGs1CompositeC.Enable">
            <summary>
            Enable GS1 Composite C decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1Composite.ELinearOnlyXmitMode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CGs1Composite.LinearOnlyXmitMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.ELinearOnlyXmitMode.Disable">
            <summary>
            Disable this mode
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.ELinearOnlyXmitMode.Enable">
            <summary>
            Enable linear-only transmission mode
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CGs1Composite.EEanUpcCompMsgDecode">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.CSymbology.CGs1Composite.EanUpcCompMsgDecode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEanUpcCompMsgDecode.NeverLinked">
             <summary>
            EAN/UPC bar code is not linked to the 2D composite component - only the 
            EAN/UPC bar code is transmitted.
             </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEanUpcCompMsgDecode.AlwaysLinked">
            <summary>
            EAN/UPC bar code is always linked to the 2D composite component. 
            Both the EAN/UPC bar code and the 2D composite component are transmitted. 
            If a 2D composite component is not present, the UPC bar code is not transmitted.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CGs1Composite.EEanUpcCompMsgDecode.Autodiscriminate">
            <summary>
            (Intermec computers with imagers only) The imager detects if there is a 
            2D composite component or not and then transmits the data accordingly. 
            This option allows the imager to send EAN/UPC bar codes only or both 
            the EAN/UPC bar code with the 2D composite component if present.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CHanXin">
            <summary>
            Defines attributes for decoding the Han Xin symbology.
            </summary>
            <remarks>
            <para>Support for symbologies and their attributes depends on the imager/scanner 
            and associated firmware installed in your Intermec computer, and on the 
            current symbology settings as configured by the Intermec Settings application. 
            For more information, see the Intermec Settings Command Reference Manual.
            </para>      
            </remarks>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CHanXin.Enable">
            <summary>
            Enables decoding of Han Xin.
            </summary>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.HanXin.Enable = CSymbology.CHanXin.EEnable.Enable;
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.HanXin.Enable = CSymbology.CHanXin.EEnable.Enable
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CHanXin.CodeMark">
            <summary>
            Set a one-character code mark symbology identifier for Han Xin. 
            The code mark is transmitted as &lt;code mark symbology ID&gt;&lt;data&gt;.
            </summary>
            <value>
            One ASCII character, or one non-printable ASCII character (such as "\x12").
            </value>
            <remarks>
            If you set a string of length 0, getting this property returns \x0.
            The non-printable ASCII character is not displayed with the get property.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.HanXin.CodeMark = "*";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.HanXin.CodeMark = "*"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.CSymbology.CHanXin.UserDefinedSymbologyId">
            <summary>
            String specifying a user-defined symbology ID if not using the AIM standard. 
            The UDSI is transmitted in the format [UDSI]&lt;data&gt;.
            </summary>
            <remarks>
            String is 0 to 4 ASCII characters long. Default user-defined symbology ID is P8. 
            If there is no value specified, and symbology ID transmission is active, no 
            symbology ID is sent for this symbology only.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.BarcodeReaderException"> 
            throws an exception when an error has occurred on methods and properties.
            </exception> 
            <example>
            <code>
                            using Intermec.DataCollection2;
                            namespace DataCollection
                            {
                                public partial class frmImagerCapture : Form
                                {
                                    private Intermec.DataCollection2.BarcodeReader bcr;
            
                                    public frmBarcodeReader()
                                    {
                                        InitializeComponent();
            
                                        try
                                        {
                                            bcr = new Intermec.DataCollection2.BarcodeReader();
                                            bcr.Symbology.HanXin.UserDefinedSymbologyId = "C2";
                                        }
                                        catch (BarcodeReaderException bcrexp)
                                        {
                                            MessageBox.Show(bcrexp.Message);
                                        }         
                                    }                                   
                                }            
                            }
                            </code>
                            <code lang="VB.NET">
                            Imports Intermec.DataCollection2
                            Public Class BarcodeReader
                                Private WithEvents bcr As Intermec.DataCollection2.BarcodeReader
            
                                Private Sub BarcodeReader_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                    Try
                                        bcr = New Intermec.DataCollection2.BarcodeReader()
                                        bcr.Symbology.HanXin.UserDefinedSymbologyId = "C2"
                                    Catch bcrexp As BarcodeReaderException
                                        MessageBox.Show(bcrexp.Message)
                                    End Try
                                End Sub             
                            End Class
                            </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.CSymbology.CHanXin.EEnable">
            <summary>
            An enum data type for enable Han Xin.
            </summary>          
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CHanXin.EEnable.Disable">
            <summary>
            Disable Han Xin decoding
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.CSymbology.CHanXin.EEnable.Enable">
            <summary>
            Enable decoding
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCaptureException">
            <summary>
            Exception thrown by <see cref="T:Intermec.DataCollection2.ImagerCapture"/>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCaptureException.hResult">
            <summary>
            Error value.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCaptureException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information. 
            </summary>
            <param name="inputResult">Error value of the error.</param>
            <param name="Message">String describing the error.</param>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                     
                                    try
                                    {
                                        imgCapture = new Intermec.DataCollection2.ImagerCapture("default", pbVideo);
                                    }
                                    catch (ImagerCaptureException imgexp)
                                    {
                                        MessageBox.Show("ImagerCapture error = " + imgexp.Message);
                                    }
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    imgCapture = New ImagerCapture("default", pbVideo)
                                Catch imgexp As ImagerCaptureException
                                    MessageBox.Show("ImagerCapture error = " + imgexp.Message)
                                End Try
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="T:Intermec.DataCollection2.DocumentCaptureEventArgs">
            <summary>
            The DocumentCaptureEventArgs class passes this information to the 
            <see cref="E:Intermec.DataCollection2.ImagerCapture.DocumentCapture"/> event:
            <list type="bullet">
            <item>
            the path of the captured document file.
            </item>
            <item>
            whether or not a document capture is in process.
            </item>
            </list>
            </summary>
            <example>
            <code>
                    using Intermec.DataCollection2;
                    namespace DataCollection
                    {
                        public partial class frmImagerCapture : Form
                        {
                            private Intermec.DataCollection2.ImagerCapture imgCapture;
                            public frmImagerCapture()
                            {
                                InitializeComponent();
                                imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                //enable document capture
                                imgCapture.EnableDocumentCapture = ImagerCapture.EnableDocumentCaptureValue.EnableWithoutDecodes;
            
                                imgCapture.DocumentCapture += new DocumentCaptureEventHandler(imgCapture_DocumentCapture);
                            }
                      
                            void imgCapture_DocumentCapture(object sender, DocumentCaptureEventArgs DocCaptureEventArgs)
                            {
                                try
                                {
                                    //display captured doucment image file
                                    if (DocCaptureEventArgs.DocCapFile.Length &gt; 0)
                                    {
                                        string filePath = DocCaptureEventArgs.DocCapFile.ToString();                                
                                    }
                                }
                                catch (Exception exp)
                                {
                                    MessageBox.Show(exp.Message);
                                }
                            }
                        }            
                    }
                    </code>
                    <code lang="VB.NET">
                    Imports Intermec.DataCollection2
                    Public Class Form1
                        Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            imgCapture = New ImagerCapture("Camera")
                            imgCapture.EnableDocumentCapture = ImagerCapture.EnableDocumentCaptureValue.EnableWithoutDecodes
                        End Sub
            
                        Private Sub imgCapture_DocumentCapture(ByVal sender As Object, ByVal DocCaptureEventArgs As Intermec.DataCollection2.DocumentCaptureEventArgs) Handles imgCapture.DocumentCapture
                            Dim filePath As String = DocCaptureEventArgs.DocCapFile.ToString()
                        End Sub
                    End Class
                    </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.DocumentCaptureEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Stores the image file path and document capture progress status information.
            </summary>
            <param name="inpDocCapFile">
            The image file path of the capture document, including the file location and file name.
            </param>
            <param name="inpDocCapInProcess">
            A Boolean type indicating whether or not the document capture is in progress before a 
            capture file path is returned.
            </param>
        </member>
        <member name="M:Intermec.DataCollection2.DocumentCaptureEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection2.DocumentCaptureEventArgs.DocCapFile">
            <summary>
            Stores the document capture file location and file name passed in from inpDocCapFile.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.DocumentCaptureEventArgs.DocCapInProcess">
            <summary>
            Updates the document capture process status passed in from inpDocCapInProcess.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ErrorEventArgs">
            <summary>
            Use this class for notification of file space or file save errors and image capture errors.
            </summary>
            <example>
            <code>
                    using Intermec.DataCollection2;
                    namespace DataCollection
                    {
                        public partial class frmImagerCapture : Form
                        {
                            private Intermec.DataCollection2.ImagerCapture imgCapture;
                            public frmImagerCapture()
                            {
                                InitializeComponent();
                                imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                imgCapture.Error += new ErrorEventHandler(imgCapture_Error);                    }
                            }
                     
                            void imgCapture_Error(object sender, ErrorEventArgs CaptureErrorArgs)
                            {
                                if (CaptureErrorArgs.FileSaveError)
                                {
                                    this.txtStatus.Text = "Failed on save file = " + CaptureErrorArgs.ErrorMessage;
                                }
            
                                if (CaptureErrorArgs.LimitStorageWarning)
                                {
                                    this.txtStatus.Text = "LimitWarning = " + CaptureErrorArgs.ErrorMessage;
                                }
            
                                if (CaptureErrorArgs.ExceedStorageLimit)
                                {
                                    this.txtStatus.Text = "ExceedStorateError = " + CaptureErrorArgs.ErrorMessage;
                                }
            
                                if (CaptureErrorArgs.ImageConditioningError)
                                {
                                    this.txtStatus.Text = "Image conditioning error = " + CaptureErrorArgs.ErrorMessage;
                                }
            
                                if (CaptureErrorArgs.CaptureError)
                                {
                                    this.txtStatus.Text = "CaptureError = " + CaptureErrorArgs.ErrorMessage;
                                }
                            }
                        }            
                    }
                    </code>
                    <code lang="VB.NET">
                    Imports Intermec.DataCollection2
                    Public Class Form1
                        Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            imgCapture = New ImagerCapture("Camera")
                        End Sub
            
                        Private Sub imgCapture_Error(ByVal sender As Object, ByVal CaptureErrorArgs As Intermec.DataCollection2.ErrorEventArgs) Handles imgCapture.Error
                            If (CaptureErrorArgs.FileSaveError) Then
                                txtStatus.Text = "Failed on save file = " + CaptureErrorArgs.ErrorMessage
                            End If
            
                            If (CaptureErrorArgs.LimitStorageWarning) Then
                                txtStatus.Text = "LimitWarning = " + CaptureErrorArgs.ErrorMessage
                            End If
            
                            If (CaptureErrorArgs.ExceedStorageLimit) Then
                                txtStatus.Text = "ExceedStorateError = " + CaptureErrorArgs.ErrorMessage
                            End If
            
                            If (CaptureErrorArgs.ImageConditioningError) Then
                                txtStatus.Text = "Image conditioning error = " + CaptureErrorArgs.ErrorMessage
                            End If
            
                            If (CaptureErrorArgs.CaptureError) Then
                                txtStatus.Text = "CaptureError = " + CaptureErrorArgs.ErrorMessage
                            End If
                        End Sub
                    End Class
                    </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ErrorEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Stores error information.
            </summary>
            <param name="LimitStorageWarningData">
            Saving an image file exceeded the memory limit. Subsequent attempts to save an image 
            may fail due to the storage memory limit.
            </param>
            <param name="ExceedStorageLimitData">
            File exceeds the storage memory limit. A document image was captured but discarded.
            </param>
            <param name="CaptureClosedData">
            The document capture interface is closed.
            </param>
            <param name="CaptureErrorData">
            An unexpected error has occurred in the document capture interface.
            </param>
            <param name="FatalErrorData">
            An unrecoverable error has occurred in the document capture interface. The interface 
            is closed and no document has been captured.
            </param>
            <param name="FileSaveErrorData">
            The image file cannot be created, possibly because the file size is too long, there 
            is a file name conflict, or because old files cannot be deleted. 
            </param>
            <param name="ImageConditioningErrorData">
            The capture process encountered an error and has been terminated.
            </param>
            <param name="ImageLoadErrorData">
            The pictureBox failed to load image
            </param>
            <param name="ErrorMessageString">
            String that describes errors.
            </param>       
        </member>
        <member name="M:Intermec.DataCollection2.ErrorEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.LimitStorageWarning">
            <summary>
            Stores the warning of a saved image file exceeding the memory limit passed from 
            LimitStorageWarningData. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.ExceedStorageLimit">
            <summary>
            Stores memory limit information passed from ExceedStorageLimitData. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.CaptureClosed">
            <summary>
            Image capture interface closing information passed from CaptureClosedData.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.CaptureError">
            <summary>
            Unexpected error information passed from CaptureErrorData. Indicates the image 
            capture process encountered an error and has been terminated. If the application 
            has a busy cursor turned    on, the application should turn off the busy cursor 
            when it receives this error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.FatalError">
            <summary>
            Unrecoverable error has occurred in the image capture interface.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.FileSaveError">
            <summary>
            File save error information passed from FileSaveError.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.ImageConditioningError">
            <summary>
            Stores the information of the image capture process error passed from the 
            ImageConditioningErrorData parameter. Indicates the image capture process 
            encountered an error and has been terminated. If the application has a busy 
            cursor turned on, the application should turn off the busy cursor when it 
            receives this error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.ImageLoadError">
            <summary>
            Stores the error of the pictureBox failed to load image.  
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ErrorEventArgs.ErrorMessage">
            <summary>
            Stores the error descriptions passed from ErrorMessageString parameter.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.SnapShotCaptureEventArgs">
            <summary>
            The SnapShotCaptureEventArgs class passes the path to the Snapshot image file.   
            </summary>
            <example>
            <code>
                    using Intermec.DataCollection2;
                    namespace DataCollection
                    {
                        public partial class frmImagerCapture : Form
                        {
                            private Intermec.DataCollection2.ImagerCapture imgCapture;
                            public frmImagerCapture()
                            {
                                InitializeComponent();
                                imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                imgCapture.SnapShotCapture += new SnapShotEventHandler(imgCapture_SnapShotCapture);
                                imgCapture.VideoRunning = true;
                            }
                      
                            void imgCapture_SnapShotCapture(object sender, SnapShotCaptureEventArgs SnapshotCaptureEventArgs)
                            {                        
                                if (SnapshotCaptureEventArgs.SnapshotFile.Length > 0)
                                {
                                    string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                }                    
                            }
                     
                            private void btnSnapShot_Click(object sender, EventArgs e)
                            {
                                imgCapture.SnapShot();                        
                            }
                        }            
                    }
                    </code>
                    <code lang="VB.NET">
                    Imports Intermec.DataCollection2
                    Public Class Form1
                        Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            imgCapture = New ImagerCapture(Me.pbVideo)
                            imgCapture.VideoRunning = True
            
                        End Sub
            
                        Private Sub imgCapture_SnapShotCapture(ByVal sender As Object, ByVal SnapCaptureEventArgs As Intermec.DataCollection2.SnapShotCaptureEventArgs) Handles imgCapture.SnapShotCapture
                            If (SnapCaptureEventArgs.SnapshotFile.Length > 0) Then
                                Dim filePath As String = SnapCaptureEventArgs.SnapshotFile.ToString()
                            End If
                        End Sub
                     
                        Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                        imgCapture.SnapShot()
                    End Sub
                    End Class
                    </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.SnapShotCaptureEventArgs.#ctor(System.String)">
            <summary>
            Stores the snapshot image file path information.
            </summary>
            <param name="inpSnapshotCapFile">
            The path of the Snapshot image file.
            </param>
        </member>
        <member name="M:Intermec.DataCollection2.SnapShotCaptureEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection2.SnapShotCaptureEventArgs.SnapshotFile">
            <summary>
            Stores the image file location passed from inpSnapshotCapFile.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.GuidanceEventArgs">
            <summary>
            The GuidanceEventArgs class passes image capture failure information 
            to the Guidance event, such as when the document is too far away or 
            at too sharp of an angle, when the focus check fails, or in the case 
            of an internal error.
            </summary>
            <example>
            <code>
                    using Intermec.DataCollection2;
                    namespace DataCollection
                    {
                        public partial class frmImagerCapture : Form
                        {
                            private Intermec.DataCollection2.ImagerCapture imgCapture;
                            public frmImagerCapture()
                            {
                                InitializeComponent();
                                imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                imgCapture.Guidance += new GuidanceEventHandler(imgCapture_Guidance);            
                            }
                     
                            void imgCapture_Guidance(object sender, GuidanceEventArgs CaptureGuidanceArgs)
                            {
                                if (CaptureGuidanceArgs.FocusCheckFailure)
                                {
                                    txtStatus.Text = "focus failure";
                                }
            
                                if (CaptureGuidanceArgs.ImagerFar)
                                {
                                    txtStatus.Text = "imager far";
                                }
            
                                if (CaptureGuidanceArgs.ImagerSharp)
                                {
                                    txtStatus.Text = "imager sharp";
                                }
                            }
                        }            
                    }
                    </code>
                    <code lang="VB.NET">
                    Imports Intermec.DataCollection2
                    Public Class Form1
                        Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            imgCapture = New ImagerCapture("Camera")
                        End Sub
            
                        Private Sub imgCapture_Guidance(ByVal sender As Object, ByVal CaptureGuidanceArgs As Intermec.DataCollection2.GuidanceEventArgs) Handles imgCapture.Guidance
                            If (CaptureGuidanceArgs.FocusCheckFailure) Then
                                txtStatus.Text = "focus failure"
                            End If
            
                            If (CaptureGuidanceArgs.ImagerFar) Then
                                txtStatus.Text = "imager far"
                            End If
            
                            If (CaptureGuidanceArgs.ImagerSharp) Then
                                txtStatus.Text = "imager sharp"
                            End If
                        End Sub
                    End Class
                    </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.GuidanceEventArgs.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Stores imager capture failure information.
            </summary>
            <param name="inpInternalError">
            Call Intermec Product Support if you get this error.
            </param>
            <param name="inpImagerFar">
            Document that is to be captured is too far away relative to the ImageRatioCheck setting.
            </param>
            <param name="inpFocusCheckFailure">
            Could not read the document to be captured.
            </param>
            <param name="inpImagerSharp">
            The imager reading angle is too steep. For best results, the imager should be within 35° 
            from vertical as long as the entire document is within the laser framer.
            </param>
        </member>
        <member name="M:Intermec.DataCollection2.GuidanceEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection2.GuidanceEventArgs.InternalError">
            <summary>
            Indicates an internal error.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.GuidanceEventArgs.ImagerFar">
            <summary>
            Stores the Imager ratio check information passed  from inpImagerFar.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.GuidanceEventArgs.FocusCheckFailure">
            <summary>
            Stores the focus check information passed from inpFocusCheckFailure.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.GuidanceEventArgs.ImagerSharp">
            <summary>
            Stores the image ratio check information passed  from inpImagerSharp.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureCaptureEventArgs">
            <summary>
            This class passes information to the calling application when a signature image is captured. 
            </summary>
            <example>
            <code>
                    using Intermec.DataCollection2;
                    namespace DataCollection
                    {
                        public partial class frmImagerCapture : Form
                        {
                            private Intermec.DataCollection2.ImagerCapture imgCapture;
                            public frmImagerCapture()
                            {
                                InitializeComponent();
                                imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                imgCapture.SignatureCapture += new SignatureCaptureEvenHandler(imgCapture_SignatureCapture);
                            }
                      
                            void imgCapture_SignatureCapture(object sender, SignatureCaptureEventArgs SigCaptureEventArgs)
                            {
                                string filePath = SigCaptureEventArgs.SignatureCaptureFile.ToString();        
                            }
                        }            
                    }
                    </code>
                    <code lang="VB.NET">
                    Imports Intermec.DataCollection2
                    Public Class Form1
                        Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                        Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                            imgCapture = New ImagerCapture(Me.pbVideo)
                        End Sub
            
                        Private Sub imgCapture_SignatureCapture(ByVal sender As Object, ByVal SigCaptureEventArgs As Intermec.DataCollection2.SignatureCaptureEventArgs) Handles imgCapture.SignatureCapture
                            Dim SignaturePath As String = SigCaptureEventArgs.SignatureCaptureFile
            
                        End Sub
                    End Class
                    </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.SignatureCaptureEventArgs.#ctor(System.String,System.Boolean,System.String,System.Byte[],System.Int32)">
            <summary>
            Creates an instance of the class and passes file names, bar code data, and the symbology ID.
            </summary>
            <param name="inpSignatureCapFile">The path to the signature image file.</param>
            <param name="xmlStatus">Indicates whether an XML file is stored.</param>
            <param name="xmlPath">Path to the XML file.</param>
            <param name="barcodeDataBuffer">Bar code data buffer.</param>
            <param name="symbID">Symbology ID.</param>
        </member>
        <member name="M:Intermec.DataCollection2.SignatureCaptureEventArgs.Finalize">
            <exclude /> 
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.SignatureCaptureFile">
            <summary>
            Path to the signature image file.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.XmlFileAvailable">
            <summary>
            Status if an XML file is stored.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.XmlFilePath">
            <summary>
            Path to the XML file.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.BarcodeData">
            <summary>
            Bar code data in string format
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.SymbologyID">
            <summary>
            Symbology ID of the bar code.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.SignatureCaptureEventArgs.BarcodeDataBuffer">
            <summary>
            Bar code data buffer.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.BarcodeReaderException">
            <summary>
            This class is the exception thrown by the <see cref="T:Intermec.DataCollection2.BarcodeReader"/> class.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.BarcodeReaderException.ErrorValue">
            <summary>
            Error value of the error.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.BarcodeReaderException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information.
            </summary>
            <param name="errValue">Error value</param>
            <param name="errMessage">String describing the error</param>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning">
            <summary>
            <para>
            Common helper class for setting properties and filters for images created by Intermec imagers.
            </para>
            <para>
            Properties of this class configure image conditioning settings, which apply digital processing 
            to images generated by the <see cref="T:Intermec.DataCollection2.ImagerCapture"/> and <see cref="T:Intermec.DataCollection2.SignatureScenario"/>classes.
            </para>
            <remarks>
            <para>
            This class is instantiated when you create an instance of the ImagerCapture class.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.ImageConditioning.#ctor(System.Byte[],System.Int32,System.Byte,System.Byte)">
            <summary>
            Constructor of the ImageConditioning class. 
            </summary>
            <param name="InputSettingCommand">Command buffer for image conditoning setting.</param>
            <param name="InputCommandSize">Command size</param>
            <param name="InputGID">Command GID</param>
            <param name="InputFID">Command FID</param>
        </member>
        <member name="M:Intermec.DataCollection2.ImageConditioning.Finalize">
            <exclude /> 
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement">
            <summary>
            Controls whether the image contrast is enhanced. Adjusts brightness and contrast automatically when used. 
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>        
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement">
            <summary>
            Enables text enhancement, which controls the readability of text in the image.
            </summary>
            <remarks>
            This property sets the level to which contrast changes in an image are exaggerated. 
            By exaggerating the contrast between black text and its white background, it can make 
            text more readable, but too high a level can induce visual noise due to uneven lighting, 
            wrinkled surfaces, or other variables. Choose the lowest level that provides readable text. 
            A value of None turns off text enhancement.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ImageRotation">
            <summary>
            Rotates the image counterclockwise from its original position by the specified amount.
            </summary>       
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.Subsampling">
            <summary>
            Reduces image size and therefore transfer time, by averaging sets of pixels into one new pixel.
            If full resolution is unneeded, reducing this setting can lower computation time and reduce 
            memory consumption. 
            </summary>
            <remarks>
            <para>
            Includes horizontal and vertical groupings, so choosing OneOfTwo reduces the file size to 1/4 
            of the original, and OneOfEight reduces the file size to 1/64.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.NoiseReduction">
            <summary>
            Reduces noise resulting from the edge enhancement process. If set to 0, this filtering stage 
            is disabled. The higher the setting value, the higher the filtering. Use this property 
            carefully as it may add some blur to the image. 
            </summary>
            <remarks>
            Range is 0 to 9. Set this property to 0 to disable noise reduction. Values outside the valid 
            range will be limited to the edges of the range.        
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection">
            <summary>
            Controls the image lighting correction. Enable this to correct for non-uniform lighting conditions.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.Brightness">
            <summary>
            Lightens or darkens the image. Range is -100 to 100, where -100 is darkest and 100 is lightest.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ColorConversion">
            <summary>
            <para>
            Sets the color mode. When set to None, gets the default either color image or grayscale image. When set to Monochrome, 
            image content is black and white. This is commonly used for 
            images containing text. Use <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/> to set relative levels 
            of brightness or darkness of the image.
            </para>
            <para>
            Color (with video preview) is supported only by Intermec computers using a Camera.
            </para>
            </summary>
            <remarks>
            <para>
            Black and white are commonly used for images containing text. The resulting image will be clearer and use less memory.
            Use ColorModeValue parameters to adjust the binarisation threshold.  Normally used for pictures of text.
            </para>
            <para><note>
            Monochrome choices only really work with TIFF.  Monochrome_Enhanced_TIFF_Quality causes an algorithm that doubles the file size
            but generally produces a higher quality image. 
            </note></para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold">
            <summary>
            Sets the relative level at which grayscale pixels are converted to black or white when 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> is set to Monochrome.
            </summary>
            <remarks>
            Only applies to TIFF, determines threshold of conversion.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.OutputCompression">
            <summary>
            Sets the output file type of the document capture image.
            </summary>
            <remarks>
            JPEG compression is efficient on grayscale pictures, and uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality"/> 
            setting for the output quality if JPEG is selected.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality">
            <summary>
            Controls the JPEG compression level for the captured image.
            </summary>
            <remarks>
            <para>
            Range is 0 to 100, where 100 is the highest quality (and largest file size).
            </para>
            <para>
            For computers using the EX25 imager for snapshot capture or signature capture, set this value to 50%.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>       
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ColorConversionEx">
            <exclude /> 
            <summary>
            Convert a color image to grayscale image if color image 
            is supported by image source.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ReverseVideo">
            <summary>
            Enable to reverses the grey values for image. 
            </summary>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            Throws an exception on set and get errors.
            </exception>  
        </member>
        <member name="P:Intermec.DataCollection2.ImageConditioning.ImageConditioningResult">
            <summary>
            Set value for ImageConditioningException.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ContrastEnhancementValue">
            <summary>
             An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ContrastEnhancementValue.None">
            <summary>Disable contrast enhancement.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ContrastEnhancementValue.Photo">
            <summary>Sets brightness and contrast to photo levels</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ContrastEnhancementValue.Black_text_on_white_background">
            <summary>Sets brightness and contrast for images containing text.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ContrastEnhancementValue.White_text_on_black_background">
            <summary>Sets brightness and contrast for images containing white text on a black background.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.TextEnhancementValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.TextEnhancementValue.None">
            <summary>Disables Text Enhancement.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.TextEnhancementValue.Low">
            <summary>Sets low level.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.TextEnhancementValue.Medium">
            <summary>Sets medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.TextEnhancementValue.High">
            <summary>Sets high level.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ImageRotationValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageRotation"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageRotationValue.None">
            <summary>Disables image rotation.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageRotationValue.Degrees_90">
            <summary>Rotates image counterclockwise 90 degrees.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageRotationValue.Degrees_180">
            <summary>Rotates image counterclockwise 180 degrees.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageRotationValue.Degrees_270">
            <summary>Rotates image counterclockwise 270 degrees.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.SubsamplingValue">
            <summary>
            An enum data type for the Subsampling property.
            </summary>		
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.None">
            <summary>Full content no subsampling </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfTwo">
            <summary>Returns image of every 2x2 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfThree">
            <summary>Returns image of one pixel for every 3x3 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfFour">
            <summary>Returns image of one pixel for every 4x4 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfFive">
            <summary>Returns image of one pixel for every 5x5 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfSix">
            <summary>Returns image of one pixel for every 6x6 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfSeven">
            <summary>Returns image of one pixel for every 7x7 square of pixels </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.SubsamplingValue.OneOfEight">
            <summary>Returns image of one pixel for every 8x8 square of pixels </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrectionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrectionValue.None">
            <summary>
            Disables image lighting correction
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrectionValue.Enabled">
            <summary>
            Enables image lighting correction
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ColorConversionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionValue.None">
            <summary>Color or grayscale (depending on the default image type for the computer and hardware).
            Color (with video preview) is supported only if the Intermec computer is using a Camera for 
            image capture.
            </summary>	
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionValue.Monochrome_Normal">
            <summary>Black and white, 1 bit/pixel. Use with .tiff files.</summary>	
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionValue.Monochrome_Enhanced_TIFF_Quality">
            <summary>Black and white, 1 bit/pixel, but interpolated to have twice the pixel density. 
            Use with .tiff files.
            </summary>	
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue.VeryDark">
            <summary>
            Only the lightest pixels are converted to white. Results in a generally darker image.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue.Dark">
            <summary>Sets dark</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue.Normal">
            <summary>Sets normal</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue.Bright">
            <summary>Sets bright</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThresholdValue.VeryBright">
            <summary>
            Only the darkest pixels are converted to black. Results in a generally lighter image.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.OutputCompressionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompression"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.OutputCompressionValue.Bitmap">
            <summary>Sets output file type to bitmap.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.OutputCompressionValue.Jpeg">
            <summary>Sets output file type to jpeg.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.OutputCompressionValue.TIFF">
            <summary>Sets output file type to .tiff. Supported only when <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> 
            is set to Monochrome_Normal or Monochrome_Enhanced_TIFF_Quality.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ColorConversionExValue">
            <exclude /> 
            <summary>
            Convert the color image to grayscale image if it is supported. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionExValue.NoColorConversion">
            <summary>No Color conversion.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ColorConversionExValue.Grayscale">
            <summary>Convert the color image to grayscale.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioning.ReverseVideoValue">
            <summary>
            Reverse image value
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ReverseVideoValue.None">
            <summary>Not reverse video.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioning.ReverseVideoValue.Enabled">
            <summary>Enable reverse video.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImageConditioningException">
            <summary>
            This class is the exception thrown by image conditioning properties. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImageConditioningException.hResult">
            <summary>
            Error value
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.ImageConditioningException.#ctor(System.Int32,System.String)">
            <summary>
            Stores error information. 
            </summary>
            <param name="inputResult">Error value of the error</param>
            <param name="Message">String describing the error</param>
        </member>
        <member name="T:Intermec.DataCollection2.SnapShotEventHandler">
            <exclude />
            <summary>
            The SnapShotEventHandler delegate represents the method that will handle the SnapShotCapture 
            event of SnapShotCaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="SnapCaptureEventArgs"> 
            An object of SnapShotCaptureEventArgs class that passes information of SnapShot.
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.SignatureCaptureEvenHandler">
            <exclude />
            <summary>
            The SignatureCaptureEvenHandler delegate represents the method that will handle the SignatureCapture 
            event of SignatureCaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="SigCaptureEventArgs">
            An object of SignatureCaptureEventArgs class that passes information of signature capture
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.DocumentCaptureEventHandler">
            <exclude />
            <summary>
            The DocumentCaptureEventHandler delegate represents the method that will handle the DocumentCapture 
            event of DocumentCaptureEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="DocCaptureEventArgs">
            An object of DocumentCaptureEventArgs class that passes information of document capture
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.ErrorEventHandler">
            <exclude />
            <summary>
            The ErrorEventHandler delegate represents the method that will handle the Error  
            event of ErrorEventHandler class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="CaptureErrorArgs">
            An object of ErrorEventArgs class that passes information of error capture
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.GuidanceEventHandler">
            <exclude />
            <summary>
            The GuidanceEventHandler delegate represents the method that will handle the Error  
            event of GuidanceEventArgs class. 
            </summary>
            <param name="sender">An object of System.Object class.</param>
            <param name="CaptureGuidanceArgs">
            An object of GuidanceEventArgs class that passes information of image caputre guidance.
            </param>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture">
            <summary>
            <para>
            The ImageCapture class enables image snapshot, signature capture, and document capture 
            with sigle instance on Intermec computers with an imager and Camera if they are supported 
            by the <see cref="T:Intermec.DataCollection2.ImagerCapture"/> constructor.
            </para>
            <para>
            Any public static (Shared in Visual Basic) members of this type are safe for multi-threaded 
            operations. Instance members are not guaranteed to be thread safe and each instance should 
            be used only within a single thread.
            </para>
            <remarks>
            <para>
            Siganture capture is allowed with supported bar codes. If data in the bar code meets the 
            requirements set up by the scenario settings, the signature capture is triggered automatically. 
            </para>
            <para>
            For computers using the EX25 imager for signature capture, set these ImageConditioning values 
            for best results:
            <list type="bullet">
            <item>ImageConditioning.OutputCompression should be set to "Jpeg".</item>
            <item>ImageConditioning.OutputCompressionQuality should be set to 50%.</item>
            <item>ImageConditioning.Subsampling should be set to "OneOfEight".</item>
            </list>
            </para>
            
            <para>
            This class provides settings to allow edge detection of a document, and capture to a file 
            with the following features:
            <list type="bullet">
            <item>Removal of keystone effects</item>
            <item>Auto Rotation to align document vertically</item>
            <item>Document detection by contrast evaluation</item>
            </list>
            </para>
            <para>
            Bar codes are not required for document capture. The entire document image must be in the 
            imager field of view, and the imager must be close enough to the document that the ratio 
            of document area to the overall image is greater than the image area capture ratio setting.
            </para>
            <para>
            For best results, the background surface upon which the document is placed should be uniform 
            in color and in high contrast to the document itself.
            </para>
               
            <para>
            To avoid problems, be sure you call ImagerCapture.Dispose before you exit the application.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureScenario1">
            <summary>
            A scenario object that sets and gets Scenario1 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureScenario2">
            <summary>
            A scenario object that sets and gets Scenario2 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureScenario3">
            <summary>
            A scenario object that sets and gets Scenario3 properties.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureScenario4">
            <summary>
            A scenario object that sets and gets Scenario4 properties.
            </summary>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.BeginInit">
            <exclude /> 
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.EndInit">
            <exclude />
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.#ctor">
            <summary>
            Constructor method for default imager without picture box. 
            </summary>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            ImagerCaptureException throws an exception when an error occurs in imager 
            capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.Windows.Forms.PictureBox)">
            <summary>
            Overloaded constructor for default imager and a specific PictureBox.
            </summary>
            <param name="inputPictureBox">Picture box to display streaming video in.</param>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            ImagerCaptureException throws an exception when an error occurs in imager 
            capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture(pbVideo)
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)">
            <summary>
            Overloaded constructor specifying the image source without a picture box. 
            </summary>
            <param name="ImageSource">Name of the image source.Supported values are "default" and "Camera".</param>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            ImagerCaptureException throws an exception when an error occurs in imager 
            capture methods or properties.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture("Camera")
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String,System.Windows.Forms.PictureBox)">
            <summary>
            Overloaded constructor for specifying image source and picture box. 
            </summary>
            <param name="ImageSource">Name of the image source. Supported values are "default" and "Camera".</param>
            <param name="inputPictureBox">Picture box to display streaming video in.</param>
            <remarks>
            PictureBox is not used if Camera is the image source.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            ImagerCaptureException throws an exception when an error occurs in imager 
            capture methods or properties.
            </exception> 
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                     
                                    try
                                    {
                                        imgCapture = new Intermec.DataCollection2.ImagerCapture("default", pbVideo);
                                    }
                                    catch (ImagerCaptureException imgexp)
                                    {
                                        MessageBox.Show("ImagerCapture error = " + imgexp.Message);
                                    }
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                Try
                                    imgCapture = New ImagerCapture("default", pbVideo)
                                Catch imgexp As ImagerCaptureException
                                    MessageBox.Show("ImagerCapture error = " + imgexp.Message)
                                End Try
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.SnapShot">
            <summary>
            Requests a single image save into the directory specified by <see cref="P:Intermec.DataCollection2.ImagerCapture.CapturedImageLocation"/>
            </summary>
            <remarks>       
            This method does not require a video preview.       
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when a SnapShot request fails
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                    imgCapture.SnapShotCapture += new SnapShotEventHandler(imgCapture_SnapShotCapture);
                                    imgCapture.VideoRunning = true;
                                }
                      
                                void imgCapture_SnapShotCapture(object sender, SnapShotCaptureEventArgs SnapshotCaptureEventArgs)
                                {                        
                                    if (SnapshotCaptureEventArgs.SnapshotFile.Length &gt; 0)
                                    {
                                        string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                    }                    
                                }
                     
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    imgCapture.SnapShot();                        
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(Me.pbVideo)
                                imgCapture.VideoRunning = True
            
                            End Sub
            
                            Private Sub imgCapture_SnapShotCapture(ByVal sender As Object, ByVal SnapCaptureEventArgs As Intermec.DataCollection2.SnapShotCaptureEventArgs) Handles imgCapture.SnapShotCapture
                                If (SnapCaptureEventArgs.SnapshotFile.Length &gt; 0) Then
                                    Dim filePath As String = SnapCaptureEventArgs.SnapshotFile.ToString()
                                End If
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                            imgCapture.SnapShot()
                        End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.Dispose">
            <summary>
            Releases resources used by ImagerCapture. Before you call Dispose, you should 
            disable document capture and signature capture, if either is supported and enabled.
            </summary>
            <remarks>
            Call Dispose before exiting the application. If there is already an existing instance
            of ImagerCapture, you must call Dispose before a creating a new instance of 
            ImagerCapture.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>        
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                }          
                                
                                private void btnExit_Click(object sender, EventArgs e)
                                {                        
                                    if (imgCapture != null)
                                    {
                                        imgCapture.Dispose();
                                        imgCapture = null;
                                    }
                     
                                    Application.Exit();
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(Me.pbVideo)
                            End Sub
            
                            Private Sub btnExit_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnExit.Click
                                If imgCapture Is Nothing Then
                                    'do nothing
                                Else
                                    imgCapture.Dispose()
                                End If
            
                                Application.Exit()
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.GetImageBufferData(Intermec.DataCollection2.ImagerCapture.ImageFormat@)">
            <summary>
            Get image data and image format information
            </summary>
            <param name="imgFormat">
            An instance of ImageFormat struct that stores image data.
            </param>
            <remarks>
            The <see cref="P:Intermec.DataCollection2.ImagerCapture.VideoRunning"/> must set to true in order to get image data. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 private ImagerCapture.ImageFormat myImageFormat;
                     
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture();
                                    myImageFormat = new ImagerCapture.ImageFormat();
                                    imgCapture.VideoRunning = true;         
                                 }  
                                
                                private void btnImageBuffer_Click(object sender, EventArgs e)
                                {
                                    imgCapture.GetImageBufferData(ref myImageFormat);
                                }         
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
                             Dim myImageFormat As ImagerCapture.ImageFormat
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture()   
                                myImageFormat = New ImagerCapture.ImageFormat()
                                imgCapture.VideoRunning = True
                             End Sub  
                             
                             Private Sub btnImageBuffer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnImageBuffer.Click
                                imgCapture.GetImageBufferData(myImageFormat)
                            End Sub
                        End Class
                         </code>
            </example>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.CancelReadImage">
            <exclude /> 
            <summary>
            Causes a pending image read to return immediately with an error status.
            </summary>
            <remarks>
            It should only be used before dispose the ImagerCapture object. 
            </remarks>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.ImagerFocusControl(Intermec.DataCollection2.ImagerCapture.ImagerFocusControlType)">
            <summary>
            Active focus control
            </summary>
            <param name="Focus">focus control option</param>
            <remarks>
            <para>
            This property is supported only if the camera is specified by the ImagerCapture Constructor.
            </para>
            <para>
            <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethod"/> must be set to AutomaticSingleFocus.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.ImagerFocusMethod = ImagerCapture.ImagerFocusMethodType.AutomaticSingleFocus;
                                 }  
                                
                                private void btnSetFocusControl_Click(object sender, EventArgs e)
                                {
                                    imgCapture.ImagerFocusControl(ImagerCapture.ImagerFocusControlType.SingleFocus);
                                }         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 imgCapture.ImagerFocusMethod = ImagerCapture.ImagerFocusMethodType.AutomaticSingleFocus
                             End Sub   
                     
                             Private Sub btnSetFocusControl_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSetFocusControl.Click
                                 imgCapture.ImagerFocusControl(ImagerCapture.ImagerFocusControlType.SingleFocus)
                             End Sub
                         End Class
                         </code>
            </example>       
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControl(Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType)">
            <summary>
            Turn torch control on or off.
            </summary>
            <param name="TorchStatus">value turns torch on or off defined by <see cref="T:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType"/>.</param>
            <remarks>     
            <para>
            This property is supported only if the camera is specified by the 
            <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor.
            </para>
            <para><see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethod"/> must be set to <see cref="F:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethodType.ManualTorch"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                         
                                     imgCapture.ImagerTorchMethod = ImagerCapture.ImagerTorchMethodType.ManualTorch;
                                 }   
                    
                                private void btnSet_Click(object sender, EventArgs e)
                                {            
                                     imgCapture.ImagerManualTorchControl(ImagerCapture.ImagerManualTorchControlType.TorchOn); 
                                }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")          
                                 imgCapture.ImagerTorchMethod = ImagerCapture.ImagerTorchMethodType.ManualTorch
                             End Sub   
                     
                            Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
                                 imgCapture.ImagerManualTorchControl(ImagerCapture.ImagerManualTorchControlType.TorchOn)
                            End Sub
                         End Class
                         </code>
            </example>      
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.SetViewFinderCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the screen coordinates for the viewfinder.
            </summary>
            <param name="LeftPosition">The x-coordinate of the upper-left corner of the screen rectangle. Default value is 0.</param>
            <param name="TopPositon">The y-coordinate of the upper-left corner of the screen rectangle. Default value is 0.</param>
            <param name="RightPosition">
            The x-coordinate of the lower-right corner of the screen rectangle. 
            For a VGA display in portrait orientation, the maximum value of RightPosition is 480. Default 
            value is 480.</param>
            <param name="BottomPosition">
            The y-coordinate of the lower-right corner of the screen rectangle. For a VGA display in 
            portrait orientation, the maximum value of BottomPosition is 640. Default value is 640.
            </param>
            <remarks>
            <para>        
            This method is supported only if the camera in the Intermec computer supports imager capture.
            </para>
            <para>       
            Although you can specify the viewfinder size, the size of the image in the viewfinder depends 
            on the image aspect ratio (width/height) of the camera in the computer. The default aspect 
            ratio is .75.
            </para>     
            <para>
            When the display is in Portrait mode, the image will fill the viewfinder if the 
            viewfinder size is set to 0, 0, 480, 640.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                     
                                     //enable viewfinder
                                     imgCapture.ViewFinderEnable = true;
            
                                     //set the viewfinder coordinates
                                     imgCapture.SetViewFinderCoordinates(4, 65, 476, 520);
                     
                                 }          
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")          
                                 'enable viewfinder
                                 imgCapture.ViewFinderEnable = true
            
                                 'set the viewfinder coordinates
                                 imgCapture.SetViewFinderCoordinates(4, 65, 476, 520)
                             End Sub           
                         End Class
                         </code>
            </example>    
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.GetViewFinderCoordinates">
            <summary>
            Gets the current viewfinder coordinates.
            </summary>
            <returns>A string indicating the viewfinder coordinates as left, top, right, or bottom.</returns>
            <remarks>
            This method is supported only if the camera in the Intermec computer supports imager capture.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                     
                                     //enable viewfinder
                                     imgCapture.ViewFinderEnable = true;
            
                                     //set the viewfinder coordinates
                                     imgCapture.SetViewFinderCoordinates(4, 65, 476, 520);
                                     string Coordinates = imgCapture.GetViewFinderCoordinates();         
                                 }          
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")          
                                 'enable viewfinder
                                 imgCapture.ViewFinderEnable = true
            
                                 'set the viewfinder coordinates
                                 imgCapture.SetViewFinderCoordinates(4, 65, 476, 520)
                                 Dim Coordinates As String = imgCapture.GetViewFinderCoordinates()
                             End Sub           
                         End Class
                         </code>
            </example>    
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.SetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType)">
            <summary>
            Sets the button for using the camera in ImagerCapture.
            </summary>
            <param name="inputButtonID">Button ID.</param>
            <param name="inputButtonActionType">Button action type.</param>        
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                     
                                     //enable viewfinder
                                     imgCapture.ViewFinderEnable = true;
            
                                     //set the viewfinder coordinates
                                     imgCapture.SetViewFinderCoordinates(4, 65, 476, 520);
                                     string Coordinates = imgCapture.GetViewFinderCoordinates();    
                                    
                                     //use the Center button for Camera
                                     imgCapture.SetButtonAction(ImagerCapture.ButtonID.Center, ImagerCapture.ButtonActionType.Camera);         
                                 }          
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")          
                                 'enable viewfinder
                                 imgCapture.ViewFinderEnable = true
            
                                 'set the viewfinder coordinates
                                 imgCapture.SetViewFinderCoordinates(4, 65, 476, 520)
                                 Dim Coordinates As String = imgCapture.GetViewFinderCoordinates()
                                 imgCapture.SetButtonAction(ImagerCapture.ButtonID.Center, ImagerCapture.ButtonActionType.Camera)
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.GetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType@)">
            <summary>
            Gets the current button action settings.
            </summary>
            <param name="inputButtonID">Button ID</param>
            <param name="returnButtonActionType">Button action type</param>     
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                     
                                     ImagerCapture.ButtonActionType myButtonType = 0;
                                     CameraCapture.GetButtonAction(ImagerCapture.ButtonID.Center, ref myButtonType);
                                     string CenterButtonType = myButtonType.ToString();                     
                                 }          
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")     
                     
                                 Dim myButtonType As ImagerCapture.ButtonActionType = 0
                                 imgCapture.GetButtonAction(ImagerCapture.ButtonID.Center, myButtonType)
                                 Dim CenterButtonType As String = myButtonType.ToString()                 
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.CancelSignatureCapture">
            <exclude /> 
            <summary>
            Causes a pending signature capture image call to return
            immediately.
            </summary>        
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.WriteConfigInfo(System.Byte[],System.Int32)">
            <exclude />
            <summary>
            Updates configurations using the ISCP setup command format. 
            </summary>
            <param name="InputCommand">Contains ISCP commands in array of bytes</param>
            <param name="InputCommandSize">Command size</param>
            <returns>Return true for success. </returns>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.ReadConfigInfo(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />
            <summary>
            Retrieves configurations using the ISCP setup command format
            </summary>
            <param name="InputCommand">Contains ISCP commands in array of bytes</param>
            <param name="InputCommandSize">Command size</param>
            <param name="retBuffer">Return data in array of bytes</param>
            <param name="retBufferSize">Number of bytes placed in retBuffer</param>
            <returns>Return true for success.</returns>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.WriteStatusCommand(System.Byte[],System.Int32)">
            <exclude />
            <summary>
            Updates configurations using the ISCP control command format. 
            </summary>
            <param name="InputCommand">Contains ISCP commands in array of bytes</param>
            <param name="InputCommandSize">Command size</param>
            <returns>Return true for success.</returns>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.ReadStatus(System.Byte[],System.Int32,System.Byte[],System.Int32@)">
            <exclude />
            <summary>
            Retrieves configurations using the ISCP status command format
            </summary>
            <param name="InputCommand">Contains ISCP commands in array of bytes</param>
            <param name="InputCommandSize">Command size</param>
            <param name="retBuffer">Return data in array of bytes</param>
            <param name="retBufferSize">Number of bytes placed in retBuffer</param>
            <returns>Return true for success.</returns>
        </member>
        <member name="M:Intermec.DataCollection2.ImagerCapture.SetAttribute(System.Int32,System.String)">
            <exclude />
            <summary>
            Sets a capture attribute defined by the user.
            </summary>
            <param name="eAttribId">
            Specifies the capture attribute to set, as defined by ITC_IMG4_CAPTURE_ATTRIBUTE_ID
            </param>
            <param name="AttribValue">
            The attribute value represented as a string. The format of this string depends on eAttribId.
            </param>
            <returns>Returns a success or failure value.</returns>
        </member>
        <member name="E:Intermec.DataCollection2.ImagerCapture.SnapShotCapture">
            <summary>
            Event for notifying when a SnapShot image is captured. 
            The <see cref="T:Intermec.DataCollection2.SnapShotCaptureEventArgs"/> parameter 
            includes the image file path of the SnapShot 
            (through <see cref="F:Intermec.DataCollection2.SnapShotCaptureEventArgs.SnapshotFile"/>)   
            </summary>
            <remarks>
            Event is not supported by the CK71 with EX25, or by the CN50.
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                    imgCapture.SnapShotCapture += new SnapShotEventHandler(imgCapture_SnapShotCapture);
                                    imgCapture.VideoRunning = true;
                                }
                      
                                void imgCapture_SnapShotCapture(object sender, SnapShotCaptureEventArgs SnapshotCaptureEventArgs)
                                {                        
                                    if (SnapshotCaptureEventArgs.SnapshotFile.Length &gt; 0)
                                    {
                                        string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                    }                    
                                }
                     
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    imgCapture.SnapShot();                        
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(Me.pbVideo)
                                imgCapture.VideoRunning = True
            
                            End Sub
            
                            Private Sub imgCapture_SnapShotCapture(ByVal sender As Object, ByVal SnapCaptureEventArgs As Intermec.DataCollection2.SnapShotCaptureEventArgs) Handles imgCapture.SnapShotCapture
                                If (SnapCaptureEventArgs.SnapshotFile.Length &gt; 0) Then
                                    Dim filePath As String = SnapCaptureEventArgs.SnapshotFile.ToString()
                                End If
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                            imgCapture.SnapShot()
                        End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.ImagerCapture.SignatureCapture">
            <summary>
            Event for notifying when a signature image is captured. 
            The SignatureCaptureEventArgs parameter includes 
            the signature image path (through <see cref="F:Intermec.DataCollection2.SignatureCaptureEventArgs.SignatureCaptureFile"/>). 
            It also includes signature bar code data and an XML file 
            path (if either is supported).
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                    imgCapture.SignatureCapture += new SignatureCaptureEvenHandler(imgCapture_SignatureCapture);
                                }
                      
                                void imgCapture_SignatureCapture(object sender, SignatureCaptureEventArgs SigCaptureEventArgs)
                                {
                                    string filePath = SigCaptureEventArgs.SignatureCaptureFile.ToString();        
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(Me.pbVideo)
                            End Sub
            
                            Private Sub imgCapture_SignatureCapture(ByVal sender As Object, ByVal SigCaptureEventArgs As Intermec.DataCollection2.SignatureCaptureEventArgs) Handles imgCapture.SignatureCapture
                                Dim SignaturePath As String = SigCaptureEventArgs.SignatureCaptureFile
            
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.ImagerCapture.DocumentCapture">
            <summary>
            Event for notifying when a document is captured. The DocumentCaptureEventArgs 
            parameter includes the image file path of the captured document 
            (through <see cref="F:Intermec.DataCollection2.DocumentCaptureEventArgs.DocCapFile"/>) and indicates if an image 
            file is in progress (through DocumentCaptureEventArgs.DocCapInProcess).
            </summary>
            <remarks>
            For platforms with a slower decode engine, DocCapInProcess allows the application to display 
            a busy cursor to indicate the image capture is in progress. It may not be available or 
            necessary when the image capture progress is very fast.
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    //enable document capture
                                    imgCapture.EnableDocumentCapture = ImagerCapture.EnableDocumentCaptureValue.EnableWithoutDecodes;
            
                                    imgCapture.DocumentCapture += new DocumentCaptureEventHandler(imgCapture_DocumentCapture);
                                }
                      
                                void imgCapture_DocumentCapture(object sender, DocumentCaptureEventArgs DocCaptureEventArgs)
                                {
                                    try
                                    {
                                        //display captured doucment image file
                                        if (DocCaptureEventArgs.DocCapFile.Length &gt; 0)
                                        {
                                            string filePath = DocCaptureEventArgs.DocCapFile.ToString();                                
                                        }
                                    }
                                    catch (Exception exp)
                                    {
                                        MessageBox.Show(exp.Message);
                                    }
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")
                                imgCapture.EnableDocumentCapture = ImagerCapture.EnableDocumentCaptureValue.EnableWithoutDecodes
                            End Sub
            
                            Private Sub imgCapture_DocumentCapture(ByVal sender As Object, ByVal DocCaptureEventArgs As Intermec.DataCollection2.DocumentCaptureEventArgs) Handles imgCapture.DocumentCapture
                                Dim filePath As String = DocCaptureEventArgs.DocCapFile.ToString()
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.ImagerCapture.Error">
            <summary>
            Event for notifying when an error has occurred. Errors can include:
            <list type="bullet">
            <item>Exceeding storage limits for image files, or when storing additional 
            files will exceed the storage memory limit</item>
            <item>Failure to save images</item>
            <item>Image conditioning errors</item>
            <item>Unavailable image capture interfaces</item>
            <item>Picturebox failed load image</item>
            </list>
            </summary>
            <remarks>
            ImageConditioningError and CaptureError indicate the image capture process 
            encountered an error and has been ended. If an application has a busy 
            cursor turned on, the application should turn off the busy cursor when 
            it receives this event.
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.Error += new ErrorEventHandler(imgCapture_Error);                    }
                                }
                     
                                void imgCapture_Error(object sender, ErrorEventArgs CaptureErrorArgs)
                                {
                                    if (CaptureErrorArgs.FileSaveError)
                                    {
                                        this.txtStatus.Text = "Failed on save file = " + CaptureErrorArgs.ErrorMessage;
                                    }
            
                                    if (CaptureErrorArgs.LimitStorageWarning)
                                    {
                                        this.txtStatus.Text = "LimitWarning = " + CaptureErrorArgs.ErrorMessage;
                                    }
            
                                    if (CaptureErrorArgs.ExceedStorageLimit)
                                    {
                                        this.txtStatus.Text = "ExceedStorateError = " + CaptureErrorArgs.ErrorMessage;
                                    }
            
                                    if (CaptureErrorArgs.ImageConditioningError)
                                    {
                                        this.txtStatus.Text = "Image conditioning error = " + CaptureErrorArgs.ErrorMessage;
                                    }
            
                                    if (CaptureErrorArgs.CaptureError)
                                    {
                                        this.txtStatus.Text = "CaptureError = " + CaptureErrorArgs.ErrorMessage;
                                    }
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")
                            End Sub
            
                            Private Sub imgCapture_Error(ByVal sender As Object, ByVal CaptureErrorArgs As Intermec.DataCollection2.ErrorEventArgs) Handles imgCapture.Error
                                If (CaptureErrorArgs.FileSaveError) Then
                                    txtStatus.Text = "Failed on save file = " + CaptureErrorArgs.ErrorMessage
                                End If
            
                                If (CaptureErrorArgs.LimitStorageWarning) Then
                                    txtStatus.Text = "LimitWarning = " + CaptureErrorArgs.ErrorMessage
                                End If
            
                                If (CaptureErrorArgs.ExceedStorageLimit) Then
                                    txtStatus.Text = "ExceedStorateError = " + CaptureErrorArgs.ErrorMessage
                                End If
            
                                If (CaptureErrorArgs.ImageConditioningError) Then
                                    txtStatus.Text = "Image conditioning error = " + CaptureErrorArgs.ErrorMessage
                                End If
            
                                If (CaptureErrorArgs.CaptureError) Then
                                    txtStatus.Text = "CaptureError = " + CaptureErrorArgs.ErrorMessage
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="E:Intermec.DataCollection2.ImagerCapture.Guidance">
            <summary>
            Event for notifying when a document image capture fails, such as when the 
            document is too far away or at too sharp of an angle, when a focus check fails, 
            or for an internal error.
            </summary>
            <remarks>
            <list type="bullet">
            <item>This event does not apply to Snapshots.</item>
            <item>Contact Intermec Product Support if you get the internal error.</item>
            </list>
            </remarks>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.Guidance += new GuidanceEventHandler(imgCapture_Guidance);            
                                }
                     
                                void imgCapture_Guidance(object sender, GuidanceEventArgs CaptureGuidanceArgs)
                                {
                                    if (CaptureGuidanceArgs.FocusCheckFailure)
                                    {
                                        txtStatus.Text = "focus failure";
                                    }
            
                                    if (CaptureGuidanceArgs.ImagerFar)
                                    {
                                        txtStatus.Text = "imager far";
                                    }
            
                                    if (CaptureGuidanceArgs.ImagerSharp)
                                    {
                                        txtStatus.Text = "imager sharp";
                                    }
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")
                            End Sub
            
                            Private Sub imgCapture_Guidance(ByVal sender As Object, ByVal CaptureGuidanceArgs As Intermec.DataCollection2.GuidanceEventArgs) Handles imgCapture.Guidance
                                If (CaptureGuidanceArgs.FocusCheckFailure) Then
                                    txtStatus.Text = "focus failure"
                                End If
            
                                If (CaptureGuidanceArgs.ImagerFar) Then
                                    txtStatus.Text = "imager far"
                                End If
            
                                If (CaptureGuidanceArgs.ImagerSharp) Then
                                    txtStatus.Text = "imager sharp"
                                End If
                            End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SupportSnapShot">
            <summary>
            Returns true if snap shot is supported.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SupportSigatureCapture">
            <summary>
            Returns true if signature capture is supported.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SupportDocumentCapture">
            <summary>
            Returns true if document capture is supported. 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoRunning">
            <summary>
            Enables streaming video to the Imager pictureBox.
            </summary>
            <remarks>
            <para>
            When set to true, video from the imager is streamed to the pictureBox. 
            When set to false (default), video is not streamed.
            </para>
            <para>
            This property is not supported if the ImagerCapture constructor specifies the Camera.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in this property.
            </exception>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(this.pbVideo);
                                    imgCapture.SnapShotCapture += new SnapShotEventHandler(imgCapture_SnapShotCapture);
                                    imgCapture.VideoRunning = true;
                                }
                      
                                void imgCapture_SnapShotCapture(object sender, SnapShotCaptureEventArgs SnapshotCaptureEventArgs)
                                {                        
                                    if (SnapshotCaptureEventArgs.SnapshotFile.Length &gt; 0)
                                    {
                                        string filePath = SnapshotCaptureEventArgs.SnapshotFile.ToString();                                
                                    }                    
                                }
                     
                                private void btnSnapShot_Click(object sender, EventArgs e)
                                {
                                    imgCapture.SnapShot();                        
                                }
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(Me.pbVideo)
                                imgCapture.VideoRunning = True
            
                            End Sub
            
                            Private Sub imgCapture_SnapShotCapture(ByVal sender As Object, ByVal SnapCaptureEventArgs As Intermec.DataCollection2.SnapShotCaptureEventArgs) Handles imgCapture.SnapShotCapture
                                If (SnapCaptureEventArgs.SnapshotFile.Length &gt; 0) Then
                                    Dim filePath As String = SnapCaptureEventArgs.SnapshotFile.ToString()
                                End If
                            End Sub
                     
                            Private Sub btnSnapShot_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnSnapShot.Click
                            imgCapture.SnapShot()
                        End Sub
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImageSource">
            <summary>
            The currrent image source name used in ImagerCapture constructor.
            </summary>
            <example>
            <code>
                        using Intermec.DataCollection2;
                        namespace DataCollection
                        {
                            public partial class frmImagerCapture : Form
                            {
                                private Intermec.DataCollection2.ImagerCapture imgCapture;
                                public frmImagerCapture()
                                {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    string myImageSource = imgCapture.ImageSource;
                                }                   
                            }            
                        }
                        </code>
                        <code lang="VB.NET">
                        Imports Intermec.DataCollection2
                        Public Class Form1
                            Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                            Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")
                                Dim myImageSource As String = imgCapture.ImageSource
                            End Sub              
                        End Class
                        </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.TriggerEnable">
            <summary>
            Set and get trigger enable status
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.TriggerEnable = ImagerCapture.TriggerEnableValue.Enable;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 imgCapture.TriggerEnable = ImagerCapture.TriggerEnableValue.Enable
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedMode">
            <summary>
            Set and get trigger predefined mode.
            </summary>
            <remarks>
            It supports 70 Series for EA30 scanner, EA11 scanner, and Camera.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws ArgumentException on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.TriggerPredefinedMode = ImagerCapture.TriggerPredefinedModeValue.AimMode;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 imgCapture.TriggerPredefinedMode = ImagerCapture.TriggerPredefinedModeValue.AimMode
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedMode">
            <summary>
            Sets the imager to a specific mode. Each mode may include settings that are optimized for a 
            particular environment.
            </summary>
            <remarks>       
            <para>
            The Preset is not supported for EX25 scanner.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.ImagerPredefinedMode = ImagerCapture.ImagerPredefinedModeValue.Standard_1D_2D;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 imgCapture.ImagerPredefinedMode = ImagerCapture.ImagerPredefinedModeValue.Standard_1D_2D
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerDecodeMode">
            <summary>
            Determines whether settings optimized for imaging or barcode decoding.
            </summary>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.ImagerDecodeMode = ImagerCapture.ImagerDecodeModeType.Imaging_2D;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.ImagerDecodeMode = ImagerCapture.ImagerDecodeModeType.Imaging_2D
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerLightingMode">
            <summary>
            Chooses the preferred mode for achieving the desired exposure. Exposure is a function of two 
            parameters: the imager aperture and the LEDs used to light the surface.
            </summary>
            <remarks>
            <para>
            The lighting mode determines how the scanner tries to achieve the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerLightingGoal"/>. 
            Priority can be given to the illumination LEDs or to aperture (exposure time). Using the 
            IllumLedPriority setting results in shorter exposure time, therefore less risk of blurred images.
            </para>
            <para>
            Use the aperture priority setting when you have a shiny bar code label where high intensity 
            lighting will be too bright to decode it. 
            </para>
            <note>
            <list type="bullet">
            These values have been deprecated:
            <item>LedMode (identical to IllumLEDPriority)</item>
            <item>LightMode (identical to AperturePriority)</item>
            </list>
            </note>
            <para>
            It is not supported on EA30 scanners.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.ImagerLightingMode = ImagerCapture.ImagerLightingModeType.AperturePriority;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.ImagerLightingMode = ImagerCapture.ImagerLightingModeType.AperturePriority
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Intermec.DataCollection2.ImagerCapture.ImagerLightingGoal" -->
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashing">
            <summary>
            Set and get imager aimer flashing value
            </summary>
            <exception cref="T:System.ArgumentException">
            throws exception in input value is not correct.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws exception if failed on sets or gets ImagerAimerFlashing value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.ImagerAimerFlashing = ImagerCapture.ImagerAimerFlashingValue.Flashing; 
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.ImagerAimerFlashing = ImagerCapture.ImagerAimerFlashingValue.Flashing
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerIlluminationLevel">
            <summary>
            Adjusts brightness as a ratio of available lighting from imager LEDS. On some devices value range is 0 - 15, 
            on others 0 - 100.
            </summary>
            <remarks>
            <para>
            It sets the maximum brightness level of the illumination LEDs that can be used to achieve the 
            <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerLightingGoal"/>. 
            </para>
            <para>
            The valid range depends on the imager installed in your Intermec computer:
            <list type="table">
            <listheader>
            <term>Imager</term>
            <description>IllumLevel Range</description>
            <description>Default</description>
            </listheader>
            <item>
            <term>EA11, EA11D, EA11-HD</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            <item>
            <term>EA20X</term>
            <description>0 to 15</description>
            <description>15 (brightest setting)</description>
            </item>
            <item>
            <term>EA21 (decoded)</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            <item>
            <term>EA21U</term>
            <description>0 to 15</description>
            <description>15 (brightest setting)</description>
            </item>
            <item>
            <term>EX25</term>
            <description>0 to 100</description>
            <description>100 (brightest setting)</description>
            </item>
            </list>
            </para>
            <note>
            Set the illumination level on a lower setting when reading shiny bar code labels where high intensity 
            lighting will be too bright to decode the label.
            </note>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <exception cref="T:System.ArgumentException">
            Throws exception with invalid input value.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.ImagerIlluminationLevel = 10; 
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.ImagerIlluminationLevel = 10
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.CurrentScene">
            <summary>
            Set and get current scene for ViewFinder.
            </summary>
            <remarks>
            <para>It supports if Camera is used in constructor.</para>
            <para>
            Following scene strings are supported by default:
            <list type="bullet">
            <item>Auto</item>
            <item>Manual</item>
            <item>Van Interior</item>
            <item>Office Store</item>
            <term>Warehouse</term>
            <item>Daylight</item>
            <item>Cloudy</item>
            <item>Night</item>
            <item>Check</item>
            <item>DocCap</item>
            </list>
            </para>
            <para>Use the SceneEditor (at Start screen) for all support 
            scene strings and detail settings associated with them.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on Imager methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.CurrentScene = "Manual"; 
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 imgCapture.CurrentScene = "Manual"
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.CapturedImageLocation">
            <summary>
            Sets and gets the path to the folder where captured single images are stored. 
            The default folder on the computer is "\My Documents\MDI". 
            If a path is not specified, it is created. 
            </summary>
            <remarks>
            <para>
            Valid characters are ASCII characters 32 through 126 (decimal). 
            Invalid characters are /:*?"&lt;&gt;|.
            </para>
            <para>
            The string begins with a backslash, and cannot end with a 
            backslash except for the “\” string (root folder). 
            </para>
            <para><note>
            The total length of the folder location, file name, 
            and file extension string cannot exceed 200 characters 
            (location + file name + 4-characters file extension). This 
            folder memory size is defined in <see cref="P:Intermec.DataCollection2.ImagerCapture.FolderMemoryLimit"/>.
            <list type="bullet">
            <item>The correct folder location string should be similar to “\Temp”. </item>
            <item>“\” is added to the location string if it is not a leading character.</item>
            <item>“\” is removed from the location string if it is a trailing character. </item>
            </list>
            </note></para>
            <para>For example, if the input location string is “Temp\”, 
            then “\Temp” is used as the folder location.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.CapturedImageLocation = "\\Temp";
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.CapturedImageLocation = "\\Temp"
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.FolderMemoryLimit">
            <summary>
            Maximum size (in MB) for the output folder containing the image files.
            </summary>
            <remarks>
            <para>
            If storing a new image file exceeds the memory limit, the <see cref="E:Intermec.DataCollection2.ImagerCapture.Error"/> event 
            is raised (when LimitStorageWarning is set to true), 
            but the file is stored. If the memory limit is already exceeded when 
            another image file needs to be stored, then the <see cref="E:Intermec.DataCollection2.ImagerCapture.Error"/> event is raised 
            (when ExceedStorageLimit is set to true) and no file is stored. 
            </para>
            <para>
            Setting this value to zero disables the memory limit check and files 
            may be added without limits. The default value is 13 MB.
            </para>
            <para>
            Only non-system files and files with the extension .jpg, .bmp, 
            and .tiff are included in the calculation. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on document capture methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.FolderMemoryLimit = 13;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.FolderMemoryLimit = 13
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.EnableLocation">
            <summary>
            Enable location service information. 
            </summary>
            <remarks>
            <para>
            The Location Services must enabled from 
            Intermec Settings\Location Services\Server\Enable Server. 
            Mare sure reboot device after enable server.
            </para>
            <para>
            Read location data barcode to include location data in image file. 
            Refer to LocationService Resource Kit for more information. 
            </para>
            <para>The EnableLocation must set to true if use $(location)static field in 
            <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentFileNameTemplate"/>,  <see cref="P:Intermec.DataCollection2.ImagerCapture.SignatureFileNameTemplate"/>, 
            and/or <see cref="P:Intermec.DataCollection2.ImagerCapture.SnapShotFileNameTemplate"/> properties. Otherwase,
            no location data is saved in file name. 
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred when enable/disable location.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.EnableLocation = true;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.EnableLocation = true
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusDefaultValue">
            <summary>
            Gets the default focus value for the camera.
            </summary>
            <remarks>Supports only if Camera is used in ImagerCapture constructor</remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     Int16 DefaultFocus = imgCapture.ImagerFocusDefaultValue;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 Int16 DefaultFocus = imgCapture.ImagerFocusDefaultValue
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusIncrementValue">
             <summary>
             Gets the incremental value to which the focus value should be set (by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerManualFocusSetting"/>). 
             </summary>
             <remarks>
             <para>For example, If ImagerFocusIncrementValue is 5, then
            the ImagerManualFocusSetting value should be something like:
            10, 15, or 25.
             </para>
             <para>
            Supports only if Camera is used in ImagerCapture constructor
             </para>
             </remarks>
             <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
             Throws an exception when an error has occurred in document capture methods or properties.
             </exception>
             <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     Int16 FocusIncrement = imgCapture.ImagerFocusIncrementValue;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 Int16 FocusIncrement = imgCapture.ImagerFocusIncrementValue
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMinimumValue">
            <summary>
            Get the minimum focus value that is allowed in <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerManualFocusSetting"/>.
            </summary>
            <remarks>     
            Supports only if Camera is used in ImagerCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     Int16 FocusMinimum = imgCapture.ImagerFocusMinimumValue;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 Int16 FocusMinimum = imgCapture.ImagerFocusMinimumValue
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMaximumValue">
            <summary>
            Get the maximum focus value that is allowed in ImagerManualFocusSetting.
            </summary>
            <remarks>     
            Supports only if Camera is used in ImagerCapture constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     Int16 FocusMaximum = imgCapture.ImagerFocusMaximumValue;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 Int16 FocusMaximum = imgCapture.ImagerFocusMaximumValue
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethod">
            <summary>
            Gets and sets the focus method.
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the ImagerCapture Constructor.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                     imgCapture.ImagerFocusMethod = ImagerCapture.ImagerFocusMethodType.AutomaticContinuousFocus;
                                 }                 
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                                 mgCapture.ImagerFocusMethod = ImagerCapture.ImagerFocusMethodType.AutomaticContinuousFocus;
                             End Sub                
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerFocusConfigSupported">
            <exclude /> 
            <summary>
            Get Focus Config Supported status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerManualFocusSupported">
            <exclude /> 
            <summary>
            Get Manual Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerAutomaticContinuousFocusSupported">
            <exclude /> 
            <summary>
            Get Automatic Continuous Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerAutomaticSingleFocusSupported">
            <exclude /> 
            <summary>
            Get Automatic Single Focus support status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerManualFocusSetting">
            <summary>
            Sets and gets focus setting value.
            </summary>      
            <remarks>     
            <para>
            Use <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusIncrementValue"/> to determine the incremental value to which this property should 
            be set. For example, if ImagerFocusIncrementValue returns a value of 5, then ImagerManualFocusSetting 
            should be set to a multiple of 5 (such as 10, 15, 20, and so on).
            </para>
            <para>
            This property should be set to a value within the range set by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMinimumValue"/>
            and <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMaximumValue"/>.
            </para>
            <para>
            This property is supported only if the camera is specified by the <see cref="T:Intermec.DataCollection2.ImagerCapture"/> Constructor.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                        
                                     //If the MinimumFocusValue is 0, MaximumFocusValue is 255, 
                                     //and the FocusIncrementValue is 1, this example sets
                                     //the ManualFocusSetting to 80%.
                                     imgCapture.ImagerManualFocusSetting = 204;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")
                     
                                 //If the MinimumFocusValue is 0, MaximumFocusValue is 255, 
                                 //and the FocusIncrementValue is 1, this example sets
                                 //the ManualFocusSetting to 80%.
                                 imgCapture.ImagerManualFocusSetting = 204
                             End Sub                
                         End Class
                         </code>
            </example>         
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashDefaultValue">
            <summary>
            Get default flash value.
            </summary>
            <remarks>Supports only if Camera is used in ImagerCapture constructor</remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                            
                                     Int16 Flash = imgCapture.ImagerFlashDefaultValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                  Dim DefaultValue As Integer = imgCapture.ImagerFlashDefaultValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashIncrementValue">
             <summary>
             Gets the incremental value to which the flash value should be set (by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashSetting"/>). 
             </summary>
             <remarks>
             <para>For example, If FlashIncrementValue is 5, then
            the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashSetting"/>FlashSetting value should be something like:
            10, 15, or 25.
             </para>
             <para>
            Supports only if Camera is used in ImagerCapture constructor
             </para>
             </remarks>
             <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
             Throws an exception when an error has occurred in imager capture methods or properties.
             </exception>
             <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                            
                                     Int16 FlashIncrement = imgCapture.ImagerFlashIncrementValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim DefaulFlashIncrement Value As Integer = imgCapture.ImagerFlashIncrementValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerFlashConfigSupported">
            <exclude /> 
            <summary>
            Get Flash Config Supported status
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isImagerAutomaticFlashSupported">
            <exclude /> 
            <summary>
            Get the AutomaticallyFlash support status 
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMinimumValue">
            <summary>
            Gets the minimum allowed value for <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashSetting"/>
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the ImagerCapture Constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                            
                                     Int16 FlashMinimum = imgCapture.ImagerFlashMinimumValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim FlashMinimum Value As Integer = imgCapture.ImagerFlashMinimumValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMaximumValue">
            <summary>
            Gets the maximum allowed value for <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashSetting"/>.
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the ImagerCapture Constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                            
                                     Int16 FlashMaximum = imgCapture.ImagerFlashMaximumValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim FlashMaximum Value As Integer = imgCapture.ImagerFlashMaximumValue
                             End Sub                
                         End Class
                         </code>
            </example>   
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethod">
            <summary>
            Gets and sets the flash method.
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/>Constructor.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");                            
                                     imgCapture.ImagerFlashMethod = ImagerCapture.ImagerFlashMethodType.AlwaysFlash;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 imgCapture.ImagerFlashMethod = ImagerCapture.ImagerFlashMethodType.AlwaysFlash
                             End Sub                
                         End Class
                         </code>
            </example>         
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashSetting">
            <summary>
            Gets and sets the flash value.
            </summary>
            <remarks>     
            <para>Use <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashIncrementValue"/> to determine the incremental value to which this 
            property should be set. For example, if ImagerFlashIncrementValue returns a value of 5, 
            then ImagerFlashSetting should be set to a multiple of 5 (such as 10, 15, 20, and so on).
            </para>
            
            <para>The ImagerFlashSetting value must between <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMinimumValue"/> and <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMaximumValue"/>.</para>
            <para>
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/>Constructor.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera"); 
                     
                                     //If the MinimumFlashValue is 0, MaximumFlashValue is 15, 
                                     //and the FlashIncrementValue is 1
                                     imgCapture.ImagerFlashSetting = 5;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")     
                     
                                  //If the MinimumFlashValue is 0, MaximumFlashValue is 15, 
                                  //and the FlashIncrementValue is 1,
                                  imgCapture.ImagerFlashSetting = 5
                             End Sub                
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchDefaultValue">
            <summary>
            Gets the default torch value.
            </summary>
            <remarks>
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor. 
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     Int16 DefaultValue = imgCapture.ImagerTorchDefaultValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim DefaultValue As Integer = imgCapture.ImagerTorchDefaultValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIncrementValue">
            <summary>
            Gets the incremental value to which the torch value should be set by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting"/>.
            </summary>
            <remarks>
            <para>For example, if this property returns 5, then the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting"/> value should
            be set to a multiple of 5 (such as 10, 15, 20, and so on).
            </para>
            <para>
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor.
            </para>
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     Int16 DefaultValue = imgCapture.ImagerTorchIncrementValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim DefaultValue As Integer = imgCapture.ImagerTorchIncrementValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensityMinimumValue">
            <summary>
            Gets the minimum allowed value for <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting"/>.
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     Int16 MinValue = imgCapture.ImagerTorchIntensityMinimumValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim MinValue As Integer = imgCapture.ImagerTorchIntensityMinimumValue
                             End Sub                
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensityMaximumValue">
            <summary>
            Gets the maximum allowed value for <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting"/>.
            </summary>
            <remarks>     
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     Int16 MaxValue = imgCapture.ImagerTorchIntensityMaximumValue;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 Dim MaxValue As Integer = imgCapture.ImagerTorchIntensityMaximumValue
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethod">
            <summary>
            Gets and sets the torch method.
            </summary>
            <remarks>     
            <para>When this property is set to AutomaticTorch, the Torch is automatically turned 
            on when video is running and turned off when video is not running.
            </para>
            <para>Supports only if Camera is used in <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> constructor.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     imgCapture.ImagerTorchMethod = ImagerCapture.ImagerTorchMethodType.AutomaticTorch;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")         
                                 imgCapture.ImagerTorchMethod = ImagerCapture.ImagerTorchMethodType.AutomaticTorch
                             End Sub                
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting">
            <summary>
            Gets and sets the torch intensity value.
            </summary>
            <remarks>   
            <para>        
            Use <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIncrementValue"/> to determine the incremental value to which this 
            property should be set. For example, if TorchIncrementValue returns a value of 5, then 
            <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensitySetting"/> should be set to a multiple of 5 (such as 10, 15, 20, 
            and so on).
            </para>
            <para>
            This property should be set to a value within the range set by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensityMinimumValue"/> 
            and <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchIntensityMaximumValue"/>.
            </para>        
            <para>
            This property is supported only if the camera is specified by the <see cref="M:Intermec.DataCollection2.ImagerCapture.#ctor(System.String)"/> Constructor.
            </para>       
            </remarks>
            <exception cref="T:System.ArgumentException">
            Throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");        
                                     
                                     //If the TorchIntensityMinimumValue is 0, TorchIntensityMaximumValue is 7, 
                                     //and the TorchIncrementValue is 1.
                                    imgCapture.ImagerTorchIntensitySetting = 2;
                                 }                         
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")  
                     
                                 'If the TorchIntensityMinimumValue is 0, TorchIntensityMaximumValue is 7, 
                                 'and the TorchIncrementValue is 1.
                                 imgCapture.ImagerTorchIntensitySetting = 2
                             End Sub                
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.ViewFinderEnable">
            <summary>
            Enables and disables the viewfinder when images are streamed from the camera. 
            </summary>
            <remarks>
            This property only supports the camera in Intermec computers.
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                     
                                     //enable viewfinder
                                     imgCapture.ViewFinderEnable = true;
            
                                     //set the viewfinder coordinates
                                     imgCapture.SetViewFinderCoordinates(4, 65, 476, 520);
                     
                                 }          
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture("Camera")          
                                 'enable viewfinder
                                 imgCapture.ViewFinderEnable = true
            
                                 'set the viewfinder coordinates
                                 imgCapture.SetViewFinderCoordinates(4, 65, 476, 520)
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoContrastEnhancement">
            <summary>
            Sets and gets whether the video image contrast is enhanced. This property uses 
            the <see cref="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement"/> property 
            of the ImageConditioning class.
            </summary>       
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo
                             End Sub           
                         End Class
                         </code>
            </example>         
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoTextEnhancement">
            <summary>
            Enables video text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoImageRotation">
            <summary>
            Rotates the image (in 90-degree increments) for preview. This property uses the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageRotation"/> property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoImageRotation = ImageConditioning.ImageRotationValue.Degrees_90;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoImageRotation = ImageConditioning.ImageRotationValue.Degrees_90
                             End Sub           
                         End Class
                         </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoSubsampling">
            <summary>
            Specify video image size,
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoSubsampling = ImageConditioning.SubsamplingValue.OneOfEight;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoSubsampling = ImageConditioning.SubsamplingValue.OneOfEight
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoNoiseReduction">
            <summary>
            Filters out pixels that may cause the image to appear grainy or patchy on video. 
            Uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.NoiseReduction"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoNoiseReduction = 0;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoNoiseReduction = 0
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoImageLightingCorrection">
            <summary>
            Sets and gets the video image lighting correction using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoReverseImage">
            <summary>
            Reverses the grey values for video preview.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoReverseImage = ImageConditioning.ReverseVideoValue.Enabled;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)
                                 imgCapture.VideoReverseImage = ImageConditioning.ReverseVideoValue.Enabled
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoColorConversion">
            <summary>
            Sets the video color mode (grayscale or monochrome), using 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                     InitializeComponent();
                                     imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                     imgCapture.VideoColorConversion = ImageConditioning.ColorConversionValue.None;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                 imgCapture = New ImagerCapture(pbVideo)           
                                 imgCapture.VideoColorConversion = ImageConditioning.ColorConversionValue.None
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoColorConversionEx">
            <exclude /> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoColorConversionBrightnessThreshold">
            <summary>
            When <see cref="P:Intermec.DataCollection2.ImagerCapture.VideoColorConversion"/> is set to monochrome, this property determines the overall 
            image brightness by determining the general level at which pixels are converted 
            from greyscale to black or white. It uses <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/>
            property of the ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.VideoColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Enhanced_TIFF_Quality;
                                    imgCapture.VideoColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.VideoColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Enhanced_TIFF_Quality
                                imgCapture.VideoColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoOutputCompression">
            <summary>
            Sets the video output compression type using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompression"/> 
            property of the ImageConditioning class.       
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.VideoOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.VideoOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoOutputCompressionQuality">
            <summary>
            Controls the JPEG compression level of the video image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.VideoOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.VideoOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.VideoOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example>  
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.VideoBrightness">
            <summary>
            Lightens or darkens the video image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.Brightness"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws an exception on incorrect input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception when an error has occurred in ImageConditioning methods and properties.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.VideoBrightness = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.VideoBrightness = 1
                             End Sub           
                         End Class
                         </code>
            </example>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotFileNameTemplate">
            <summary>
            Defines the default file name for SnapShot capture files. 
            </summary>
            <remarks>  
            <para>
            The value for this property can be up to 200 characters. Valid characters are ASCII 
            character numbers 32 to 126 (decimal). Invalid characters are \/:*?"&lt;&gt;|.
            </para>
            <para>
            However, note that the total length of the folder location (defined in CapturedDocumentLocation), 
            the SnapShot file name, and the file extension cannot exceed 200 characters (location + file name 
            + max. 4-character file extension) when the file is saved. An Error event occurs if this length 
            exceeds 200 characters.
            </para>
            <para>
            You can specify the file name to consist of one or more of the following static fields:
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. For example, if you set the file 
            name to "myFile_$(time)", the captured file name would be similar to 
            "myFile_2009-02-11 16_23_26.jpg", which is 2/11/2009 4:23:26 pm for GTM-8 Pacific US time. 
            </item>
            <item>
            Location $(location), which is GPS information. If a location service is not available, 
            then the text of $(location) is "no_location". You need to enable location service information 
            to include this field.
            </item>
            <item>
            Default static field is the root file name which is "doc_$(num)", where num is an automatically 
            incremented number. For example, if you use the default file location and file name on a handheld 
            computer, the file path is similar to "\My Document\MDI\snap_1.jpg".
            </item>
            </list> 
            </para>
            <para>
            If you do not specify the static field with a file name, the computer generates a random number 
            in order to set a unique file name for a captured document file. For example, if you set the 
            file name to "myFile", the second generated file name is similar to "myFile_143553.jpg", where 
            143553 is a random number generated by the computer.
            </para>
            </remarks>      
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotFileNameTemplate = "snap_$(num)";
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotFileNameTemplate = "snap_$(num)"
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the <see cref="P:Intermec.DataCollection2.ImagerCapture.SnapShotNextFileNumber"/> 
            value for saved SnapShot images.     
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295.
            </remarks>        
            <exception cref="T:System.ArgumentException">
            throws an exception if the input value is invalid.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotMaxFileNumber = 100;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotMaxFileNumber = 100
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved document image. This value 
            automatically increments after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>        
            <exception cref="T:System.ArgumentException">
            throws an exception on invalid input values.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotNextFileNumber = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotNextFileNumber = 1
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotContrastEnhancement">
            <summary>
            Sets and gets whether the SnapShot image contrast is enhanced, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotTextEnhancement">
            <summary>
            Enables SnapShot text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotTextEnhancement = ImageConditioning.TextEnhancementValue.Medium;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotTextEnhancement = ImageConditioning.TextEnhancementValue.Medium
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotImageRotation">
            <summary>
            Rotates the image (in 90-degree increments) for preview. This property uses the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageRotation"/> property of the ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotImageRotation = ImageConditioning.ImageRotationValue.Degrees_90;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotImageRotation = ImageConditioning.ImageRotationValue.Degrees_90
                             End Sub           
                         End Class
                         </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotSubsampling">
            <summary>
            Specifiy snap shot image size, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.Subsampling"/> 
            property of the ImageConditioning class.        
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotSubsampling = ImageConditioning.SubsamplingValue.OneOfEight;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotSubsampling = ImageConditioning.SubsamplingValue.OneOfEight
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotNoiseReduction">
            <summary>
            Filters out pixels that may cause the SnapShot image to appear grainy or patchy.  
            Uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.NoiseReduction"/> property of the 
            ImageConditioning class.             
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotNoiseReduction = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotNoiseReduction = 1
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotImageLightingCorrection">
            <summary>
            Sets and gets the SnapShot image lighting correction using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotReverseImage">
            <summary>
            Reverse snapshot image. 
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in document capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotReverseImage = ImageConditioning.ReverseVideoValue.Enabled;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)  
                                imgCapture.SnapShotReverseImage = ImageConditioning.ReverseVideoValue.Enabled
                             End Sub           
                         End Class
                         </code>
            </example>  
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotColorConversion">
            <summary>
            Sets the SnapShot color mode (grayscale or monochrome), using
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotColorConversion = ImageConditioning.ColorConversionValue.None;
                                    imgCapture.SnapShotColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotColorConversion = ImageConditioning.ColorConversionValue.None
                                imgCapture.SnapShotColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotColorConversionEx">
            <exclude /> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotColorConversionBrightnessThreshold">
            <summary>
            When <see cref="P:Intermec.DataCollection2.ImagerCapture.SnapShotColorConversion"/> is set to monochrome, this property determines 
            the overall image brightness by determining the general level at which pixels are converted 
            from greyscale to black or white. It uses
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/> property of the 
            ImageConditioning class.            
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotColorConversion = ImageConditioning.ColorConversionValue.None;
                                    imgCapture.SnapShotColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotColorConversion = ImageConditioning.ColorConversionValue.None
                                imgCapture.SnapShotColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub           
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotOutputCompression">
            <summary>
            Sets the SnapShot output file type using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompression"/>
            property of the ImageConditioning class.   
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.SnapShotOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.SnapShotOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotOutputCompressionQuality">
            <summary>
            Controls the SnapShot JPEG compression level of the output file image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.SnapShotOutputCompressionQuality = 80;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.SnapShotOutputCompressionQuality = 80
                             End Sub           
                         End Class
                         </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SnapShotBrightness">
            <summary>
            Lightens or darkens the SnapShot image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.Brightness"/> 
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                   imgCapture.SnapShotBrightness = 1; 
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SnapShotBrightness = 1
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isSnapShotColorConversionSupported">
            <exclude /> 
            <summary>
            Returns true if support snap shot color conversion.
            </summary>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SignatureNotification">
            <summary>
            Gets and sets the SignatureNotification value defined by the 
            <see cref="T:Intermec.DataCollection2.ImagerCapture.SignatureNotificationType"/> enumeration.
            </summary>
            <remarks>
            <para>
            When this property is set to StoredImageAndBarcodeInFiles (supported only by the 
            70 Series computers with a camera or EA30 imager), the signature capture file path, 
            the XML file path, and bar code label data are returned through the 
            <see cref="E:Intermec.DataCollection2.ImagerCapture.SignatureCapture"/> event. 
            </para>
            <para>
            The XML file has the following form:
            <code lang="XML"> 
            &lt;?xml version="1.0" encoding="UTF=8"?&gt;
            &lt;CaptureInfo&gt;
                &lt;Image Type="SigCap"&gt;
                    &lt;FilePath&gt;/My Documents/Sigcap.jpg &lt;/FilePath&gt;
                &lt;/Image&gt;
                &lt;Barcode&gt;
                    &lt;STC_IDENTIFIER&gt;xx&lt;/ STC_IDENTIFIER&gt;
                    &lt;Data&gt;QUJDRA==&lt;/Data&gt;
                &lt;/Barcode&gt;
            &lt;/CaptureInfo&gt;
            </code>
            </para>
            <para>
            Where:
            <list type="bullet">
            <item>
            &lt;Type&gt; denotes the type of image
            </item>
            <item>
            &lt;FilePath&gt; is the full path to the file containing the signature capture image.
            </item>
            <item>
            &lt;STC_IDENTIFIER&gt; is the symbology ID.
            </item>
            <item>
            &lt;Data&gt; is the bar code data(ABCD) encoded in base64.
            </item>
            </list>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception if the input value is invalid. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when option is not supported and when errors occur. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SignatureNotification = ImagerCapture.SignatureNotificationType.StoredImageAndBarcodeInFiles;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SignatureNotification = ImagerCapture.SignatureNotificationType.StoredImageAndBarcodeInFiles
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SignatureFileNameTemplate">
            <summary>
            Defines the default file name for signature capture files.
            </summary>
            <remarks>
            <para>
            The value for this property can be up to 200 characters. Valid characters are ASCII 
            character numbers 32 to 126 (decimal). Invalid characters are \/:*?"&lt;&gt;|.
            </para>
            <para>
            However, note that the total length of the folder location (defined in <see cref="P:Intermec.DataCollection2.ImagerCapture.CapturedImageLocation"/>), 
            the signature capture file name, and the file extension cannot exceed 200 characters 
            (location + file name + max. 4-character file extension) when the file is saved. An Error 
            event occurs if this length exceeds 200 characters.
            </para>
            <para>
            You can specify the file name to consist of one or more of the following static fields: 
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. For example, if you set the 
            file name to "myFile_$(time)", the captured file name would be similar to 
            "myFile_2009-02-11 16_23_26.jpg", which is 2/11/2009 4:23:26 pm for GMT-8 Pacific US time.
            </item>
            <item>
            Location $(location), which is GPS information. If a location service is not available, 
            then the text of $(location) is "no_location". You need to enable location service information 
            to include this field.
            </item>
            <item>
            Default static field is the root file name which is "doc_$(num)", where num is an automatically 
            incremented number. For example, if you use the default file location and file name on a handheld 
            computer, the file path is similar to "\My Document\MDI\snap_1.jpg".
            </item>
            </list>
            </para>
            <para>
            If you do not specify the static field with a file name, the computer generates a random number 
            in order to set a unique file name for a captured document file. For example, if you set the file 
            name to "myFile", the second generated file name is similar to "myFile_143553.jpg", where 143553 
            is a random number generated by the computer.
            </para>        
            </remarks>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            Throws exception when an error has occurred on imager capture methods and properties. 
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SignatureFileNameTemplate = "sign_$(num)";
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SignatureFileNameTemplate = "sign_$(num)"
                             End Sub           
                         End Class
                         </code>
            </example>         
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SignatureMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the <see cref="P:Intermec.DataCollection2.ImagerCapture.SignatureNextFileNumber"/> 
            value for saved signature capture images. 
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295.
            </remarks>     
            <exception cref="T:System.ArgumentException">
            throws an exception if the input value is invalid.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SignatureMaxFileNumber = 100;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SignatureMaxFileNumber = 100
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.SignatureNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved signature capture image. 
            This value automatically increments after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception if the input value is invalid.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture(pbVideo);
                                    imgCapture.SignatureNextFileNumber = 1;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture(pbVideo)           
                                imgCapture.SignatureNextFileNumber = 1
                             End Sub           
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnable">
            <summary>
            Enables and disables document capture.
            </summary>     
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentCaptureEnable = ImagerCapture.DocumentCaptureEnableValue.EnableWithoutDecodes;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentCaptureEnable = ImagerCapture.DocumentCaptureEnableValue.EnableWithoutDecodes
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheck">
            <summary>
            Gets and sets whether the image focus is evaluated as part of determining if 
            there is a valid document to capture.
            </summary>
            <remarks>
            This setting is useful in preventing blurred document captures. 
            The focus check is performed on the document center.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentFocusCheck = ImagerCapture.DocumentFocusCheckValue.Medium;
                                 }
                             }            
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentFocusCheck = ImagerCapture.DocumentFocusCheckValue.Medium
                             End Sub           
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentImageAreaCaptureRatio">
            <summary>
            Controls how far away from the document page  the capture can be taken.
            </summary>
            <remarks>
            <para>
            The further away the capture is taken, the smaller the page looks and 
            the ratio of page relative to the overall image is smaller. 
            </para>
            <para>
            The <see cref="E:Intermec.DataCollection2.ImagerCapture.Guidance"/> event is raised and <see cref="F:Intermec.DataCollection2.GuidanceEventArgs.ImagerFar"/> 
            is set to true when the image ratio check fails, which means you need to move 
            the imager closer to the document.
            </para>
            <para>
            The value is expressed as a percentage with a range of 0 to 100, 
            where the higher the value, the larger the page appears in the image.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.Guidance += new GuidanceEventHandler(imgCapture_Guidance);
            
                                    imgCapture.DocumentImageAreaCaptureRatio = 90;     
                                 }
                     
                                void imgCapture_Guidance(object sender, GuidanceEventArgs CaptureGuidanceArgs)
                                {
                                    if (CaptureGuidanceArgs.ImagerFar)
                                    {
                                        txtStatus.Text = "imager is too far";
                                    }                        
                                }
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentImageAreaCaptureRatio = 90
                             End Sub  
                     
                            Private Sub imgCapture_Guidance(ByVal sender As Object, ByVal CaptureGuidanceArgs As Intermec.DataCollection2.GuidanceEventArgs) Handles imgCapture.Guidance           
                                If (CaptureGuidanceArgs.ImagerFar) Then
                                    txtStatus.Text = "imager is too far"
                                End If                   
                            End Sub
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentPerspectiveCorrection">
            <summary>
            Controls whether or not perspective correction is used.
            </summary>
            <remarks>
            When correction is disabled, there is no projective mapping, 
            and the system returns the smallest rectangle image containing 
            the area to be captured. When correction is enabled, projective 
            mapping is active and the resolution used is automatically adjusted. 
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentPerspectiveCorrection = ImagerCapture.DocumentPerspectiveCorrectionValue.Enable;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentPerspectiveCorrection = ImagerCapture.DocumentPerspectiveCorrectionValue.Enable
                             End Sub         
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentFileNameTemplate">
            <summary>        
            Defines the default file name for document capture files.
            </summary>
            <remarks>
            <para>
            The value for this property can be up to 200 characters. Valid characters are ASCII 
            character numbers 32 to 126 (decimal). Invalid characters are \/:*?"&lt;&gt;|.
            </para>
            <para>
            However, note that the total length of the folder location (defined in <see cref="P:Intermec.DataCollection2.ImagerCapture.CapturedImageLocation"/>),
            the file name, and the file extension cannot exceed 200 characters (location + file name + max. 
            4-character file extension) when the file is saved. An Error event occurs if this length exceeds 
            200 characters.
            </para>
            <para>
            You can specify the file name to consist of one or more of the following static fields:
            <list type="bullet">
            <item>
            Time/Date stamp $(time), in the format YYYY-MM-DD HH_MM_SS. For example, if you set the 
            file name to "myFile_$(time)", the captured file name would be similar to 
            "myFile_2009-02-11 16_23_26.jpg", which is 2/11/2009 4:23:26 pm for GTM-8 Pacific US time. 
            </item>
            <item>
            Document number $(num), which is an automatically incremented number for every file stored. 
            For example, if you set the file name to "myFile_$(num)", the first two file    names would 
            be "myFile_1.jpg" or "myFile_2.jpg".         
            </item>
            <item>
            Location $(location), which is GPS information. If a location service is not available, 
            then the text of $(location) is "no_location". You need to enable location service 
            information to include this field.
            </item>
            <item>
            Default static field is the root file name which is "doc_$(num)", where num is an automatically 
            incremented number. For example, if you use the default file location and file name on a 
            handheld computer, the file path is similar to "\My Document\MDI\doc_1.jpg".
            </item>
            </list>
            </para>
            <para>
            If you do not specify the static field with a file name, the computer generates a random 
            number in order to set a unique file name for a captured document file. For example, 
            if you set the file name to "myFile", the second generated file name is similar to 
            "myFile_143553.jpg", where 143553 is a random number generated by the computer.
            </para>        
            </remarks>        
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>  
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentFileNameTemplate = "doc_$(num)";
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentFileNameTemplate = "doc_$(num)"
                             End Sub         
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentMaxFileNumber">
            <summary>
            Sets the maximum value used when incrementing the <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentNextFileNumber"/> 
            value for saved document images.
            </summary>
            <remarks>
            The default value is 9999. Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentMaxFileNumber = 100;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentMaxFileNumber = 100
                             End Sub         
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentNextFileNumber">
            <summary>
            Sets the value of the file number used for the next saved document 
            image. This value automatically changes after a file is saved.
            </summary>
            <remarks>
            Range is 1 to 4294967295.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error has occurred in imager capture methods or properties.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentNextFileNumber = 1;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentNextFileNumber = 1
                             End Sub         
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentContrastEnhancement">
            <summary>
            Sets and gets whether the document image contrast is enhanced.
            </summary>
            <remarks>
            This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ContrastEnhancement"/> property of the 
            ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentContrastEnhancement = ImageConditioning.ContrastEnhancementValue.Photo
                             End Sub         
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentTextEnhancement">
            <summary>
            Enables document text enhancement, which controls the readability of text in the image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.TextEnhancement"/> property of the ImageConditioning 
            class.
            </summary>       
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentTextEnhancement = ImageConditioning.TextEnhancementValue.Low;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentTextEnhancement = ImageConditioning.TextEnhancementValue.Low
                             End Sub         
                         End Class
                         </code>
            </example>       
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentImageRotation">
            <summary>
            Rotates the image (in 90-degree increments) using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageRotation"/>ImageRotation property of the 
            ImageConditioning class.
            </summary>      
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentImageRotation = ImageConditioning.ImageRotationValue.None;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentImageRotation = ImageConditioning.ImageRotationValue.None
                             End Sub         
                         End Class
                         </code>
            </example>         
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentNoiseReduction">
            <summary>
            Filters out pixels that may cause the document image to appear grainy or patchy. Uses the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.NoiseReduction"/>NoiseReduction property of the 
            ImageConditioning class.
            </summary>        
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentNoiseReduction = 1;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentNoiseReduction = 1
                             End Sub         
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentImageLightingCorrection">
            <summary>
            Sets and gets the document image lighting correction using the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.ImageLightingCorrection"/> property 
            of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentImageLightingCorrection = ImageConditioning.ImageLightingCorrectionValue.Enabled
                             End Sub         
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentReverseImage">
            <summary>
            Reverse document capture image.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentReverseImage = ImageConditioning.ReverseVideoValue.Enabled;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera") 
                                imgCapture.DocumentReverseImage = ImageConditioning.ReverseVideoValue.Enabled
                             End Sub         
                         End Class
                         </code>
            </example> 
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentBrightness">
            <summary>
            Lightens or darkens the document image. This property uses the 
            <see cref="P:Intermec.DataCollection2.ImageConditioning.Brightness"/> setting of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentBrightness = 1;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentBrightness = 1
                             End Sub         
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentColorConversion">
            <summary>
            Gets or sets the document color mode (color, grayscale, or monochrome). 
            This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversion"/>
            property of the ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal;
                                    imgCapture.DocumentColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal
                                imgCapture.DocumentColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub         
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentColorConversionEx">
            <exclude /> 
            <summary>
            Convers color image to grayscale.
            </summary>
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentColorConversionBrightnessThreshold">
            <summary>
            When <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentColorConversion"/> is set to monochrome, this property determines 
            the overall image brightness by determining the general level at which pixels are converted 
            from grayscale to black or white.
            </summary>
            <remarks>
            This property uses the <see cref="P:Intermec.DataCollection2.ImageConditioning.ColorConversionBrightnessThreshold"/> 
            property of the ImageConditioning class.
            </remarks>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal;
                                    imgCapture.DocumentColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentColorConversion = ImageConditioning.ColorConversionValue.Monochrome_Normal
                                imgCapture.DocumentColorConversionBrightnessThreshold = ImageConditioning.ColorConversionBrightnessThresholdValue.Normal
                             End Sub         
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentOutputCompression">
            <summary>
            Sets the document output file type using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompression"/>
            property of the ImageConditioning class. 
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.DocumentOutputCompressionQuality = 80;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.DocumentOutputCompressionQuality = 80
                             End Sub         
                         End Class
                         </code>
            </example>      
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.DocumentOutputCompressionQuality">
            <summary>
            Controls the document JPEG compression level of the output file image, 
            using the <see cref="P:Intermec.DataCollection2.ImageConditioning.OutputCompressionQuality"/> property of the 
            ImageConditioning class.
            </summary>
            <exception cref="T:System.ArgumentException">
            throws an exception on input value errors. 
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImageConditioningException">
            throws an exception on set and get errors.
            </exception>
            <exception cref="T:Intermec.DataCollection2.ImagerCaptureException">
            throws an exception when an error occurs during imager capture.
            </exception>
            <example>
            <code>
                         using Intermec.DataCollection2;
                         namespace DataCollection
                         {
                             public partial class frmImagerCapture : Form
                             {
                                 private Intermec.DataCollection2.ImagerCapture imgCapture;
                                 public frmImagerCapture()
                                 {
                                    InitializeComponent();
                                    imgCapture = new Intermec.DataCollection2.ImagerCapture("Camera");
                                    imgCapture.DocumentOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg;
                                    imgCapture.DocumentOutputCompressionQuality = 80;
                                 }                  
                             }                
                         }
                         </code>
                         <code lang="VB.NET">
                         Imports Intermec.DataCollection2
                         Public Class Form1
                             Private WithEvents imgCapture As Intermec.DataCollection2.ImagerCapture
            
                             Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
                                imgCapture = New ImagerCapture("Camera")           
                                imgCapture.DocumentOutputCompression = ImageConditioning.OutputCompressionValue.Jpeg
                                imgCapture.DocumentOutputCompressionQuality = 80
                             End Sub         
                         End Class
                         </code>
            </example>        
        </member>
        <member name="P:Intermec.DataCollection2.ImagerCapture.isDocumentColorConversionSupported">
            <exclude />
            <summary>
            Returns true if color conversion is supported with imager source.
            </summary>        
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImageFormatType">
            <summary>
            An enum data of the imgFormatType in <see cref="T:Intermec.DataCollection2.ImagerCapture.ImageFormat"/>
            </summary>        
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormatType.TIFF_GROUP4">
            <summary>
            Tiff group4
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormatType.RAW_GRAYSCALE">
            <summary>
            Raw grayscale
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormatType.JPEG">
            <summary>
            Jpeg format
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImageFormat">
            <summary>
            A struct containing image data information. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.ImageData">
            <summary>
            A byte array stores image data.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.ImageDataSize">
            <summary>
            Image data size.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.pixelWidth">
            <summary>
            Number of pixels in each row
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.pixelHeight">
            <summary>
            Number of pixels in each column
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.BitsPerPixel">
            <summary>
            Bits per pixel
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImageFormat.imgFormatType">
            <summary>
            Image format type
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.TriggerEnableValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.TriggerEnable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.TriggerEnableValue.Disable">
            <summary>
            No trigger.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.TriggerEnableValue.Enable">
            <summary>
            Hardware trigger enabled
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedModeValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedModeValue.ToggleMode">
            <summary>
            Trigger started on a trigger press and 
            stopped on the next trigger press.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedModeValue.LevelMode">
            <summary>
            Trigger started when the trigger button is pressed and 
            stopped when trugger button is released
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.TriggerPredefinedModeValue.AimMode">
            <summary>
            Enable Aim Mode
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedModeValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedMode"/> property.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedModeValue.Standard_1D_Only">
            <summary>Optimizes the imager for reading 1D bar codes</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedModeValue.Standard_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedModeValue.BrightEnvironment_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes in bright light</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerPredefinedModeValue.ReflectiveSurface_1D_2D">
            <summary>Optimizes the imager for reading 1D and 2D bar codes on reflective surfaces</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerDecodeModeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerDecodeMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerDecodeModeType.LinearImageEmulation">
            <summary>Imager settings are optimized for reading bar codes.</summary>
            <remarks>
            Used primarily for reading 1-dimensional bar codes. This mode increases imaging 
            performance however you must hold the scanner horizontal to the bar code label. 
            You can read PDF417 codes when using this mode. 
            </remarks>            
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerDecodeModeType.Imaging_2D">
            <summary>Imager settings are optimized for image capture</summary>
            <remarks>
            Used for reading 2-dimensional bar codes. When using 2D imager mode you can read a bar 
            code holding the scanner in any direction (omni-directional scanning). You can also read 
            1D bar codes in this mode. 
            </remarks>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerLightingModeType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerLightingMode"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerLightingModeType.IlluminationLEDPriority">
            <summary>
            The LEDs turn on first. If there is not enough light for imaging, 
            the aperture opens to compensate.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerLightingModeType.AperturePriority">
            <summary>
            The aperture opens first. If there is not enough light for imaging, 
            the LEDs turn on to compensate.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashingValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashing"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashingValue.AlwaysOn">
            <summary>
            Aimer always on
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashingValue.Flashing">
            <summary>
            Aimer flashing (optimize for decode)
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerAimerFlashingValue.AlwaysOff">
            <summary>
            Aimer always off
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethod"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType.ManualFocus">
            <summary>
            Use manual focus
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType.AutomaticContinuousFocus">
            <summary>
            Use automatic continuous focus 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType.AutomaticSingleFocus">
            <summary>
            Use automatic single focus
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType.Macro">
            <summary>
            Use macro focus (Optimized for 10cm to 50cm)
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusMethodType.Extended">
            <summary>
            Use extended focus (10cm to infinity)
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerFocusControlType">
            <summary>
            An enum data type for the <see cref="M:Intermec.DataCollection2.ImagerCapture.ImagerFocusControl(Intermec.DataCollection2.ImagerCapture.ImagerFocusControlType)"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFocusControlType.SingleFocus">
            <summary>
            turns single focus control on.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethodType">
            <summary>
            Data type used by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethod"/> 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethodType.NoFlash">
            <summary>
            No flash used
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethodType.AlwaysFlash">
            <summary>
            flash is always used 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerFlashMethodType.AutomaticallyFlash">
            <summary>
            Flash is automatically used. 
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethodType">
            <summary>
            Data type used by <see cref="P:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethod"/>.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethodType.ManualTorch">
            <summary>
            Uses manual torch. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethodType.AutomaticTorch">
            <summary>
            Torch turns on when video is streaming and turns off 
            when video stops streaming. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerTorchMethodType.AmbientAuto">
            <summary>
            Torch turns on when camera requires additional ambient light
            to produce properly exposed frames. Torch truns off when camera senses
            a luminance above the optimal range to produce a properly exposed frame.            
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType">
            <summary>
            Turns torch control on or off in <see cref="M:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControl(Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType)"/>.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType.TorchOff">
            <summary>
            Turn torch off.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ImagerManualTorchControlType.TorchOn">
            <summary>
            Turn torch on.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ButtonID">
            <summary>
            Button ID type used by <see cref="M:Intermec.DataCollection2.ImagerCapture.GetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType@)"/> or <see cref="M:Intermec.DataCollection2.ImagerCapture.SetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType)"/>.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonID.Handle">
            <summary>
            Button on the scan handle.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonID.RightFront">
            <summary>
            Right front button on the computer. Not supported by CK70, CK71, or CN70. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonID.Left">
            <summary>
            Left side button. Not supported by CK70, CK71, or CN70.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonID.Center">
            <summary>
            Center button.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonID.LeftFront">
            <summary>
            Left front button. Not supported by CK70, CK71, or CN70.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.ButtonActionType">
            <summary>
            Button ID type used by <see cref="M:Intermec.DataCollection2.ImagerCapture.GetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType@)"/> and <see cref="M:Intermec.DataCollection2.ImagerCapture.SetButtonAction(Intermec.DataCollection2.ImagerCapture.ButtonID,Intermec.DataCollection2.ImagerCapture.ButtonActionType)"/>
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonActionType.Scan">
            <summary>
            Sets button for scanning. 
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonActionType.RFIDWedge">
            <summary>
            Sets button for RFID wedge. Not used by ImagerCapture
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonActionType.BRI">
            <summary>
            Sets button for BRI. Not used by ImagerCapture
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.ButtonActionType.Camera">
            <summary>
            Sets button for camera.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.SignatureNotificationType">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.SignatureNotification"/> property. If a 
            signature capture image includes bar code data, this enumeration determines 
            whether or not the bar code data and the file path to the image (in XML format) 
            should be stored with the image file.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureNotificationType.StoredImageInFiles">
            <summary>
            Store only the signature capture image.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.SignatureNotificationType.StoredImageAndBarcodeInFiles">
            <summary>
            <para>
            Store the signature capture image, the file path (in XML format), and the bar code data.
            </para>
            <para>
            Supported only by the 70 Series computers with a camera or EA30 imager.
            </para>
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnableValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnable"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnableValue.Disable">
            <summary>Disable document capture.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnableValue.EnableWithDecodes">
            <summary>
            (Default) Enable document capture with decoding. When set to 
            this value, the imager can still read bar codes.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentCaptureEnableValue.EnableWithoutDecodes">
            <summary>
            Enable document capture, but disable decoding. When set to 
            this value, the imager does not read bar codes.
            </summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheckValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheck"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheckValue.Disable">
            <summary>Disable focus check.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheckValue.Medium">
            <summary>Medium level.</summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentFocusCheckValue.High">
            <summary>High level.</summary>
        </member>
        <member name="T:Intermec.DataCollection2.ImagerCapture.DocumentPerspectiveCorrectionValue">
            <summary>
            An enum data type for the <see cref="P:Intermec.DataCollection2.ImagerCapture.DocumentPerspectiveCorrection"/> property.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentPerspectiveCorrectionValue.Disable">
            <summary>
            Projective mapping is not used. The system returns the smallest rectangle image 
            containing the area to be captured.
            </summary>
        </member>
        <member name="F:Intermec.DataCollection2.ImagerCapture.DocumentPerspectiveCorrectionValue.Enable">
            <summary>
            Projective mapping is active and the resolution used is automatically adjusted.
            </summary>
        </member>
    </members>
</doc>
